     1 00000000                                 ; naskfunc
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4 00000000                                 [FORMAT "WCOFF"]		;制作莫表文件的模式
     5 00000000                                 [INSTRSET "i486p"]		;
     6 00000000                                 [BITS 32]				;制作32位模式用的机械语言
     7 00000000                                 
     8 00000000                                 ;制作目标文件信息
     9 00000000                                 [FILE "naskfunc.nas"]
    10 00000000                                 	GLOBAL 	_io_hlt,_write_mem8	;程序中包含的函数名
    11 00000000                                 	GLOBAL	_io_cli, _io_sti, _io_stihlt
    12 00000000                                 	GLOBAL	_io_in8, _io_in16, _io_in32
    13 00000000                                 	GLOBAL	_io_out8, _io_out16, _io_out32
    14 00000000                                 	GLOBAL	_io_load_eflags, _io_store_eflags
    15 00000000                                 	GLOBAL	_load_gdtr, _load_idtr
    16 00000000                                 	GLOBAL 	_asm_inthandler21, _asm_inthandler27, _asm_inthandler2c
    17 00000000                                 	GLOBAL 	_memtest_sub
    18 00000000                                 	EXTERN	_inthandler21, _inthandler27, _inthandler2c
    19 00000000                                 
    20 00000000                                 ;以下是实际的函数
    21                                          [section .text]			;目标文件中写了这些之后再写程序
    22 00000000                                 
    23 00000000                                 _io_hlt:		;相当于void io_hlt(	void)
    24 00000000 F4                              	HLT
    25 00000001 C3                              	RET			;相当于return
    26 00000002                                 
    27 00000002                                 _io_cli:		;void io_cli(void)
    28 00000002 FA                              	CLI
    29 00000003 C3                              	RET
    30 00000004                                 
    31 00000004                                 _io_sti:		;void io_sti(void)
    32 00000004 FB                              	STI
    33 00000005 C3                              	RET
    34 00000006                                 
    35 00000006                                 _io_stihlt:		;void io_stihlt(void)
    36 00000006 FB                              	STI
    37 00000007 F4                              	HLT
    38 00000008 C3                              	RET
    39 00000009                                 
    40 00000009                                 _io_in8:		;void io_in8(int port)
    41 00000009 8B 54 24 04                     	MOV	EDX,[ESP+4]		;port
    42 0000000D B8 00000000                     	MOV	EAX,0
    43 00000012 EC                              	IN 	AL,DX
    44 00000013 C3                              	RET
    45 00000014                                 
    46 00000014                                 _io_in16:		;void io_in16(int port)
    47 00000014 8B 54 24 04                     	MOV	EDX,[ESP+4]
    48 00000018 B8 00000000                     	MOV	EAX,0
    49 0000001D 66 ED                           	IN 	AX,DX
    50 0000001F C3                              	RET
    51 00000020                                 
    52 00000020                                 _io_in32:		;void io_in32(int port)
    53 00000020 8B 54 24 04                     	MOV EDX,[ESP+4]
    54 00000024 ED                              	IN	EAX,DX
    55 00000025 C3                              	RET
    56 00000026                                 
    57 00000026                                 _io_out8:		;void io_out8(int port, int data) 	
    58 00000026 8B 54 24 04                     	MOV EDX,[ESP+4]
    59 0000002A 8A 44 24 08                     	MOV	AL,[ESP+8]
    60 0000002E EE                              	OUT	DX,AL
    61 0000002F C3                              	RET
    62 00000030                                 
    63 00000030                                 _io_out16:		;void io_out16(int port, int data)
    64 00000030 8B 54 24 04                     	MOV	EDX,[ESP+4]
    65 00000034 8B 44 24 08                     	MOV	EAX,[ESP+8]
    66 00000038 66 EF                           	OUT	DX,AX
    67 0000003A C3                              	RET
    68 0000003B                                 
    69 0000003B                                 _io_out32:		;void io_out32(int port, int data)
    70 0000003B 8B 54 24 04                     	MOV EDX,[ESP+4]
    71 0000003F 8B 44 24 08                     	MOV	EAX,[ESP+8]
    72 00000043 EF                              	OUT	DX,EAX
    73 00000044 C3                              	RET
    74 00000045                                 
    75 00000045                                 _io_load_eflags:	;int io_load_eflags(void)
    76 00000045 9C                              	PUSHFD			;PUSH EFLAGS
    77 00000046 58                              	POP EAX
    78 00000047 C3                              	RET
    79 00000048                                 
    80 00000048                                 _io_store_eflags:	;void io_store_eflags(int eflags)
    81 00000048 8B 44 24 04                     	MOV		EAX,[ESP+4]
    82 0000004C 50                              	PUSH	EAX
    83 0000004D 9D                              	POPFD	;POP EFLAGS
    84 0000004E C3                              	RET
    85 0000004F                                 
    86 0000004F                                 _load_gdtr:			;void load_gdtr(int limit, int addr)
    87 0000004F 66 8B 44 24 04                  	MOV		AX,[ESP+4]
    88 00000054 66 89 44 24 06                  	MOV		[ESP+6],AX
    89 00000059 0F 01 54 24 06                  	LGDT	[ESP+6]
    90 0000005E C3                              	RET
    91 0000005F                                 
    92 0000005F                                 _load_idtr:			;void load_idtr(int limit, int addr)
    93 0000005F 66 8B 44 24 04                  	MOV		AX,[ESP+4]
    94 00000064 66 89 44 24 06                  	MOV		[ESP+6],AX
    95 00000069 0F 01 5C 24 06                  	LIDT 	[ESP+6]
    96 0000006E C3                              	RET
    97 0000006F                                 
    98 0000006F                                 _write_mem8:		;void write_mem8(int addr, int data)
    99 0000006F 8B 4C 24 04                     	MOV	ECX,[ESP+4]	;[ESP+4]中存放的是地址
   100 00000073 8A 44 24 08                     	MOV	AL,[ESP+8]	;[ESP+8]中存放的是数据
   101 00000077 88 01                           	MOV	[ECX],AL	;把数据放入指定的地址中
   102 00000079                                 
   103 00000079 C3                              	RET
   104 0000007A                                 
   105 0000007A                                 ;
   106 0000007A                                 _asm_inthandler21:
   107 0000007A 06                              	PUSH 	ES
   108 0000007B 1E                              	PUSH 	DS
   109 0000007C 60                              	PUSHAD
   110 0000007D 89 E0                           	MOV 	EAX,ESP
   111 0000007F 50                              	PUSH 	EAX
   112 00000080 66 8C D0                        	MOV 	AX,SS
   113 00000083 8E D8                           	MOV 	DS,AX
   114 00000085 8E C0                           	MOV 	ES,AX
   115 00000087 E8 [00000000]                   	CALL 	_inthandler21
   116 0000008C 58                              	POP 	EAX
   117 0000008D 61                              	POPAD
   118 0000008E 1F                              	POP 	DS
   119 0000008F 07                              	POP 	ES
   120 00000090 CF                              	IRETD
   121 00000091                                 
   122 00000091                                 _asm_inthandler27:
   123 00000091 06                              	PUSH 	ES
   124 00000092 1E                              	PUSH 	DS
   125 00000093 60                              	PUSHAD
   126 00000094 89 E0                           	MOV 	EAX,ESP
   127 00000096 50                              	PUSH 	EAX
   128 00000097 66 8C D0                        	MOV 	AX,SS
   129 0000009A 8E D8                           	MOV 	DS,AX
   130 0000009C 8E C0                           	MOV 	ES,AX
   131 0000009E E8 [00000000]                   	CALL 	_inthandler27
   132 000000A3 58                              	POP 	EAX
   133 000000A4 61                              	POPAD
   134 000000A5 1F                              	POP 	DS
   135 000000A6 07                              	POP 	ES
   136 000000A7 CF                              	IRETD
   137 000000A8                                 
   138 000000A8                                 _asm_inthandler2c:
   139 000000A8 06                              	PUSH 	ES
   140 000000A9 1E                              	PUSH 	DS
   141 000000AA 60                              	PUSHAD
   142 000000AB 89 E0                           	MOV 	EAX,ESP
   143 000000AD 50                              	PUSH 	EAX
   144 000000AE 66 8C D0                        	MOV 	AX,SS
   145 000000B1 8E D8                           	MOV 	DS,AX
   146 000000B3 8E C0                           	MOV 	ES,AX
   147 000000B5 E8 [00000000]                   	CALL 	_inthandler2c
   148 000000BA 58                              	POP 	EAX
   149 000000BB 61                              	POPAD
   150 000000BC 1F                              	POP 	DS
   151 000000BD 07                              	POP 	ES
   152 000000BE CF                              	IRETD
   153 000000BF                                 
   154 000000BF                                 _memtest_sub:		;unsigned int memtest_sub(unsigned int start, unsigned int end);
   155 000000BF 57                              	PUSH 	EDI
   156 000000C0 56                              	PUSH 	ESI
   157 000000C1 53                              	PUSH 	EBX
   158 000000C2 BE AA55AA55                     	MOV 	ESI, 0xaa55aa55 		;pat0 = 0xaa55aa55;
   159 000000C7 BF 55AA55AA                     	MOV 	EDI, 0x55aa55aa 		;pat1 = 0x55aa55aa;
   160 000000CC 8B 44 24 10                     	MOV 	EAX, [ESP+12+4] 		;i = start;
   161 000000D0                                 mts_loop:
   162 000000D0 89 C3                           	MOV 	EBX,EAX
   163 000000D2 81 C3 00000FFC                  	ADD 	EBX,0xffc 				;p=i+0xffc
   164 000000D8 8B 13                           	MOV 	EDX,[EBX] 				;old = *p
   165 000000DA 89 33                           	MOV 	[EBX],ESI 				;*p=pat0
   166 000000DC 83 33 FF                        	XOR 	DWORD [EBX],0xffffffff 	;*p ^= 0xffffffff
   167 000000DF 3B 3B                           	CMP 	EDI,[EBX] 				;if(*p != pat1) goto fin;
   168 000000E1 75 18                           	JNE 	mts_fin
   169 000000E3 83 33 FF                        	XOR 	DWORD [EBX],0xffffffff 	;*p ^= 0xffffffff
   170 000000E6 3B 33                           	CMP 	ESI,[EBX] 				;if(*p != pat0) goto fin;
   171 000000E8 75 11                           	JNE 	mts_fin
   172 000000EA 89 13                           	MOV 	[EBX],EDX 				;*p = old;
   173 000000EC 05 00001000                     	ADD 	EAX, 0x1000 			;i += 0x1000;
   174 000000F1 3B 44 24 14                     	CMP 	EAX,[ESP+12+8] 			;if(i <= end) goto mts_loop;
   175 000000F5                                 
   176 000000F5 76 D9                           	JBE 	mts_loop
   177 000000F7 5B                              	POP 	EBX
   178 000000F8 5E                              	POP 	ESI
   179 000000F9 5F                              	POP 	EDI
   180 000000FA C3                              	RET
   181 000000FB                                 mts_fin:
   182 000000FB 89 13                           	MOV 	[EBX],EDX 				;*p = old;
   183 000000FD 5B                              	POP 	EBX
   184 000000FE 5E                              	POP 	ESI
   185 000000FF 5F                              	POP 	EDI
   186 00000100 C3                              	RET
