优化中断处理，增加键盘输入

# --------------
# Please enter the commit message for your changes. Everything below
# this paragraph is ignored, and an empty message aborts the commit.
# Just close the window to accept your message.
warning: LF will be replaced by CRLF in 30天自制操作系统.sublime-project.
The file will have its original line endings in your working directory.
diff --git "a/30\345\244\251\350\207\252\345\210\266\346\223\215\344\275\234\347\263\273\347\273\237.sublime-project" "b/30\345\244\251\350\207\252\345\210\266\346\223\215\344\275\234\347\263\273\347\273\237.sublime-project"
new file mode 100644
index 0000000..24db303
--- /dev/null
+++ "b/30\345\244\251\350\207\252\345\210\266\346\223\215\344\275\234\347\263\273\347\273\237.sublime-project"
@@ -0,0 +1,8 @@
+{
+	"folders":
+	[
+		{
+			"path": "."
+		}
+	]
+}
diff --git "a/30\345\244\251\350\207\252\345\210\266\346\223\215\344\275\234\347\263\273\347\273\237.sublime-workspace" "b/30\345\244\251\350\207\252\345\210\266\346\223\215\344\275\234\347\263\273\347\273\237.sublime-workspace"
new file mode 100644
index 0000000..0e80c89
--- /dev/null
+++ "b/30\345\244\251\350\207\252\345\210\266\346\223\215\344\275\234\347\263\273\347\273\237.sublime-workspace"
@@ -0,0 +1,957 @@
+{
+	"auto_complete":
+	{
+		"selected_items":
+		[
+			[
+				"put",
+				"putfonts8_asc_sht"
+			],
+			[
+				"putfo",
+				"putfonts8_asc_sht"
+			],
+			[
+				"io_s",
+				"io_store_eflags"
+			],
+			[
+				"ti",
+				"timeout"
+			],
+			[
+				"time",
+				"timers"
+			],
+			[
+				"tim",
+				"timer"
+			],
+			[
+				"timers",
+				"timers0"
+			],
+			[
+				"tic",
+				"timerctl"
+			],
+			[
+				"fifo",
+				"fifo8_put"
+			],
+			[
+				"TIMERFL",
+				"TIMER_FLAGS_ALLOC"
+			],
+			[
+				"buf",
+				"buf_win"
+			],
+			[
+				"memma",
+				"memman_alloc_4k"
+			],
+			[
+				"bu",
+				"buf"
+			],
+			[
+				"scrn",
+				"scrny"
+			],
+			[
+				"sht",
+				"shtctl"
+			],
+			[
+				"sheet_re",
+				"sheet_refresh"
+			],
+			[
+				"sheet_ref",
+				"sheet_refreshsub"
+			],
+			[
+				"old_v",
+				"old_vy0"
+			],
+			[
+				"v",
+				"vx0"
+			],
+			[
+				"buf_",
+				"buf_mouse"
+			],
+			[
+				"sc",
+				"scrny"
+			],
+			[
+				"mem",
+				"memman_alloc_4k"
+			],
+			[
+				"vy",
+				"vy0"
+			],
+			[
+				"vx",
+				"vx0"
+			],
+			[
+				"sheets",
+				"sheets"
+			],
+			[
+				"sheet",
+				"sheets"
+			],
+			[
+				"SHE",
+				"SHEET_USE"
+			],
+			[
+				"men",
+				"memman_init"
+			],
+			[
+				"MEM",
+				"MEMMAN_FREES"
+			],
+			[
+				"lost",
+				"lostsize"
+			],
+			[
+				"COL",
+				"COL8_008400"
+			],
+			[
+				"m",
+				"mouse_dbuf"
+			],
+			[
+				"mou",
+				"mouse_dbuf"
+			],
+			[
+				"mouse",
+				"mouse_dbuf"
+			],
+			[
+				"fifo8",
+				"fifo8_get"
+			],
+			[
+				"in",
+				"init_keyboard"
+			],
+			[
+				"KEY",
+				"KEYCMD_SENDTO_MOUSE"
+			],
+			[
+				"PO",
+				"PORT_KEYCMD"
+			],
+			[
+				"POR",
+				"PORT_KEYDAT"
+			],
+			[
+				"KE",
+				"KEYCMD_WRITE_MODE"
+			],
+			[
+				"PORT",
+				"PORT_KEYSTA"
+			],
+			[
+				"key",
+				"keyfifo"
+			],
+			[
+				"next",
+				"next_r"
+			],
+			[
+				"asm",
+				"asm_inthandler21"
+			],
+			[
+				"ADR_B",
+				"ADR_BOOTINFO"
+			],
+			[
+				"putfont8",
+				"putfonts8_asc"
+			],
+			[
+				"OBJ",
+				"OBJS_BOOTPACK"
+			],
+			[
+				"load_",
+				"load_idtr"
+			],
+			[
+				"limit",
+				"limit_low"
+			],
+			[
+				"init",
+				"init_mouse_cursor8"
+			],
+			[
+				"COL8_0000",
+				"COL8_0000FF"
+			],
+			[
+				"r",
+				"rgb"
+			],
+			[
+				"0x0",
+				"0x03c9"
+			],
+			[
+				"to",
+				"TOOLPATH"
+			],
+			[
+				"ipl",
+				"ipl.bin"
+			],
+			[
+				"hello",
+				"helloos.img"
+			],
+			[
+				"console",
+				"console.log('fyt"
+			],
+			[
+				"p",
+				"print"
+			],
+			[
+				"text",
+				"text-decoration"
+			],
+			[
+				"teal",
+				"text-align"
+			],
+			[
+				"fon",
+				"font-size"
+			],
+			[
+				"marg",
+				"margin"
+			],
+			[
+				"Po",
+				"PORT"
+			],
+			[
+				"lis",
+				"listening"
+			],
+			[
+				"con",
+				"console"
+			],
+			[
+				"exp",
+				"exports"
+			],
+			[
+				"i",
+				"if	if"
+			],
+			[
+				"cla",
+				"callback"
+			],
+			[
+				"re",
+				"return"
+			],
+			[
+				"call",
+				"callback"
+			],
+			[
+				"fu",
+				"fun	Function"
+			],
+			[
+				"fun",
+				"fun	Function"
+			],
+			[
+				"connect",
+				"connect-flash"
+			],
+			[
+				"set",
+				"settings"
+			],
+			[
+				"express",
+				"express-session"
+			],
+			[
+				"hea",
+				"header	<header>"
+			],
+			[
+				"by",
+				"bytes1"
+			],
+			[
+				"Sys",
+				"System.out.println"
+			],
+			[
+				"get",
+				"getBytes"
+			],
+			[
+				"mar",
+				"margin-top"
+			],
+			[
+				"style",
+				"style	Attr"
+			],
+			[
+				"font",
+				"font-size"
+			],
+			[
+				"link",
+				"link	Tag"
+			],
+			[
+				"co",
+				"color"
+			],
+			[
+				"lin",
+				"line-height"
+			],
+			[
+				"tex",
+				"text-align"
+			],
+			[
+				"ba",
+				"background-color"
+			],
+			[
+				"w",
+				"width"
+			],
+			[
+				"bor",
+				"border-radius"
+			],
+			[
+				"back",
+				"background-color"
+			],
+			[
+				"Hero",
+				"HeroService"
+			],
+			[
+				"my",
+				"my-hero-detail"
+			],
+			[
+				"seled",
+				"selectedHero"
+			],
+			[
+				"sele",
+				"selectedHero"
+			],
+			[
+				"is_a",
+				"is_array"
+			],
+			[
+				"conso",
+				"console.log"
+			],
+			[
+				"recordI",
+				"recordInfoDOM"
+			],
+			[
+				"recor",
+				"recordedTime"
+			],
+			[
+				"child",
+				"first-child"
+			],
+			[
+				"te",
+				"text"
+			],
+			[
+				"z",
+				"z-index"
+			],
+			[
+				"di",
+				"div	Tag"
+			],
+			[
+				"control",
+				"controlInfos"
+			],
+			[
+				"bt",
+				"bt_info"
+			],
+			[
+				"app",
+				"append"
+			],
+			[
+				"controlI",
+				"controlImages"
+			],
+			[
+				"for",
+				"for	for (…) {…}"
+			],
+			[
+				"contro",
+				"control_bt_img"
+			],
+			[
+				"contro_bt",
+				"control_bt_nomal"
+			]
+		]
+	},
+	"buffers":
+	[
+		{
+			"file": "fyt/fifo.c",
+			"settings":
+			{
+				"buffer_size": 758,
+				"line_ending": "Windows"
+			}
+		}
+	],
+	"build_system": "",
+	"build_system_choices":
+	[
+	],
+	"build_varint": "",
+	"command_palette":
+	{
+		"height": 375.0,
+		"last_filter": "ssc",
+		"selected_items":
+		[
+			[
+				"ssc",
+				"Set Syntax: CSS"
+			],
+			[
+				"ssjs",
+				"Set Syntax: JavaScript"
+			],
+			[
+				"ssh",
+				"Set Syntax: HTML"
+			],
+			[
+				"cf",
+				"CodeFormatter: Format as Javascript Syntax"
+			],
+			[
+				"pc",
+				"Package Control: Enable Package"
+			],
+			[
+				"",
+				"Package Control: Install Package"
+			],
+			[
+				"fm",
+				"CodeFormatter: Format Code"
+			],
+			[
+				"Package Control: ",
+				"Package Control: Install Package"
+			],
+			[
+				"insta",
+				"Package Control: Install Package→安装插件"
+			],
+			[
+				"install",
+				"Package Control: Install Package→安装插件"
+			],
+			[
+				"ssj",
+				"Set Syntax: JavaScript"
+			],
+			[
+				"in",
+				"Package Control: Install Package→安装插件"
+			],
+			[
+				"i",
+				"Package Control: Install Package→安装插件"
+			]
+		],
+		"width": 386.0
+	},
+	"console":
+	{
+		"height": 176.0,
+		"history":
+		[
+			"import urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
+		]
+	},
+	"distraction_free":
+	{
+		"menu_visible": true,
+		"show_minimap": false,
+		"show_open_files": false,
+		"show_tabs": false,
+		"side_bar_visible": false,
+		"status_bar_visible": false
+	},
+	"expanded_folders":
+	[
+	],
+	"file_history":
+	[
+		"/C/Users/NaOH/Desktop/30天自制操作系统/fyt/timer.c",
+		"/C/Users/NaOH/Desktop/30天自制操作系统/fyt/naskfunc.nas",
+		"/C/Users/NaOH/Desktop/30天自制操作系统/fyt/bootpack.c",
+		"/C/Users/NaOH/Desktop/30天自制操作系统/fyt/bootpack.h",
+		"/C/Users/NaOH/Desktop/30天自制操作系统/fyt/sheet.c",
+		"/C/Program Files/Shadowsocks/pac.txt",
+		"/C/Users/NaOH/Desktop/OS/tolset/harib10c/bootpack.c",
+		"/C/Users/NaOH/Desktop/OS/tolset/harib10c/dsctbl.c",
+		"/C/Users/NaOH/Desktop/OS/tolset/harib10c/timer.c",
+		"/C/Users/NaOH/Desktop/OS/tolset/harib10b/bootpack.c",
+		"/C/Users/NaOH/Desktop/30天自制操作系统/fyt/graphic.c",
+		"/C/Users/NaOH/Desktop/30天自制操作系统/fyt/memory.c",
+		"/C/Users/NaOH/Desktop/30天自制操作系统/fyt/Makefile",
+		"/C/Users/NaOH/Desktop/30天自制操作系统/README.md",
+		"/C/Users/NaOH/Desktop/30天自制操作系统/fyt/mouse.c",
+		"/C/Users/NaOH/Desktop/30天自制操作系统/fyt/keyboard.c",
+		"/C/Users/NaOH/Desktop/30天自制操作系统/fyt/int.c",
+		"/C/Users/NaOH/Desktop/30天自制操作系统/fyt/fifo.c",
+		"/C/Users/NaOH/Desktop/OS/projects/07_day/harib04g/bootpack.c",
+		"/C/Users/NaOH/Desktop/30天自制操作系统/fyt/desctbl.c",
+		"/C/Users/NaOH/Desktop/OS/projects/07_day/harib04c/bootpack.c",
+		"/C/Users/NaOH/Desktop/OS/projects/07_day/harib04c/int.c",
+		"/C/Users/NaOH/Desktop/OS/projects/07_day/harib04c/bootpack.h",
+		"/C/Users/NaOH/Desktop/OS/tolset/harib04b/naskfunc.nas",
+		"/C/Users/NaOH/Desktop/OS/tolset/harib04b/int.c",
+		"/C/Users/NaOH/Desktop/OS/tolset/harib04b/bootpack.c",
+		"/C/Users/NaOH/Desktop/OS/tolset/harib04b/bootpack.h",
+		"/C/Users/NaOH/Desktop/OS/projects/07_day/harib04b/int.c",
+		"/C/Users/NaOH/Desktop/OS/projects/07_day/harib04b/bootpack.h",
+		"/C/Users/NaOH/Desktop/OS/projects/07_day/harib04b/bootpack.c",
+		"/C/Users/NaOH/Desktop/OS/projects/07_day/harib04a/int.c",
+		"/C/Users/NaOH/Desktop/OS/projects/07_day/harib04a/bootpack.c",
+		"/C/Users/NaOH/Desktop/OS/projects/06_day/harib03e/bootpack.c",
+		"/C/Users/NaOH/Desktop/OS/projects/06_day/harib03e/dsctbl.c",
+		"/C/Users/NaOH/Desktop/OS/projects/06_day/harib03e/int.c",
+		"/C/Users/NaOH/Desktop/OS/projects/06_day/harib03e/bootpack.h",
+		"/C/Users/NaOH/Desktop/OS/projects/06_day/harib03e/naskfunc.nas",
+		"/C/Users/NaOH/Desktop/OS/projects/06_day/harib03e/asmhead.nas",
+		"/C/Users/NaOH/Desktop/OS/projects/06_day/harib03c/Makefile",
+		"/C/Users/NaOH/Desktop/OS/projects/06_day/harib03c/bootpack.c",
+		"/C/Users/NaOH/Desktop/OS/projects/06_day/harib03c/bootpack.h",
+		"/C/Users/NaOH/Desktop/30天自制操作系统/fyt/bootpackk.h",
+		"/C/Users/NaOH/Desktop/OS/projects/06_day/harib03c/dsctbl.c",
+		"/C/Users/NaOH/Desktop/OS/projects/05_day/harib02i/naskfunc.nas",
+		"/C/Users/NaOH/Desktop/OS/projects/05_day/harib02i/bootpack.c",
+		"/C/Users/NaOH/Desktop/30dayMakeOS/05_day/bootpack.c",
+		"/C/Users/NaOH/Desktop/OS/projects/05_day/harib02g/bootpack.c",
+		"/C/Users/NaOH/Desktop/OS/projects/05_day/harib02g/Makefile",
+		"/C/Users/NaOH/Desktop/OS/projects/05_day/harib02g/naskfunc.nas",
+		"/C/Users/NaOH/Desktop/OS/projects/05_day/harib02g/asmhead.nas",
+		"/C/Users/NaOH/Desktop/30天自制操作系统/fyt/asmhead.nas",
+		"/C/Users/NaOH/Desktop/30dayMakeOS/05_day/Makefile",
+		"/C/Users/NaOH/Desktop/OS/projects/04_day/harib01h/bootpack.c",
+		"/C/Users/NaOH/Desktop/OS/projects/04_day/harib01h/naskfunc.nas",
+		"/C/Users/NaOH/Desktop/30天自制操作系统/fyt/bootpack.nas",
+		"/C/Users/NaOH/Desktop/OS/projects/04_day/harib01a/naskfunc.nas",
+		"/C/Users/NaOH/Desktop/OS/projects/03_day/harib00j/naskfunc.nas",
+		"/C/Users/NaOH/Desktop/OS/projects/03_day/harib00j/Makefile",
+		"/C/Users/NaOH/Desktop/OS/projects/03_day/harib00i/asmhead.nas",
+		"/C/Users/NaOH/Desktop/OS/projects/03_day/harib00i/Makefile",
+		"/C/Users/NaOH/Desktop/30天自制操作系统/ipl10.nas",
+		"/C/Users/NaOH/Desktop/30天自制操作系统/asmhead.nas",
+		"/C/Users/NaOH/Desktop/30天自制操作系统/Makefile",
+		"/C/Users/NaOH/Desktop/30天自制操作系统/bootpack.c",
+		"/C/Users/NaOH/Desktop/30天自制操作系统/z_tools/haribote/haribote.rul",
+		"/C/Users/NaOH/Desktop/30天自制操作系统/run.bat",
+		"/C/Users/NaOH/Desktop/OS/projects/03_day/harib00i/bootpack.c",
+		"/C/Users/NaOH/Desktop/OS/projects/03_day/harib00e/Makefile",
+		"/C/Users/NaOH/Desktop/OS/projects/03_day/harib00e/haribote.nas",
+		"/C/Users/NaOH/Desktop/OS/projects/03_day/harib00e/ipl.nas",
+		"/C/Users/NaOH/Desktop/30天自制操作系统/fyt.nas",
+		"/C/Users/NaOH/Desktop/30dayMakeOS/03_day/ipl10.nas",
+		"/C/Users/NaOH/Desktop/30dayMakeOS/03_day/Makefile",
+		"/C/Users/NaOH/Desktop/30dayMakeOS/03_day/asmhead.nas",
+		"/C/Users/NaOH/Desktop/OS/tolset/harib00g/haribote.nas",
+		"/C/Users/NaOH/Desktop/30天自制操作系统/ipl.nas",
+		"/C/Users/NaOH/Desktop/OS/projects/03_day/harib00j/asmhead.nas",
+		"/C/Users/NaOH/Desktop/OS/tolset/harib00e/Makefile",
+		"/C/Users/NaOH/Desktop/OS/tolset/harib00e/ipl.nas",
+		"/C/Users/NaOH/Desktop/OS/tolset/harib00f/ipl.nas",
+		"/C/Users/NaOH/Desktop/30天自制操作系统/helloos.img",
+		"/C/Users/NaOH/Desktop/OS/tolset/harib00d/ipl.bin",
+		"/C/Users/NaOH/Desktop/OS/tolset/harib00d/ipl.nas",
+		"/C/Users/NaOH/Desktop/30天自制操作系统/ipl.bin",
+		"/C/Users/NaOH/Desktop/OS/tolset/harib00d/Makefile",
+		"/C/Users/NaOH/Desktop/OS/tolset/harib00d/ipl.lst",
+		"/C/Users/NaOH/Desktop/OS/projects/03_day/harib00d/ipl.nas",
+		"/C/Users/NaOH/Desktop/OS/projects/03_day/harib00b/ipl.nas",
+		"/C/Users/NaOH/Desktop/OS/projects/03_day/harib00a/Makefile",
+		"/C/Users/NaOH/Desktop/OS/projects/03_day/harib00a/ipl.nas",
+		"/C/Users/NaOH/Desktop/OS/tolset/helloos5/Makefile",
+		"/C/Users/NaOH/Desktop/30dayMakeOS/02_day/ipl.nas",
+		"/C/Users/NaOH/Desktop/OS/projects/02_day/helloos5/Makefile",
+		"/C/Users/NaOH/Desktop/OS/projects/02_day/helloos5/ipl.nas",
+		"/C/Users/NaOH/Desktop/OS/tolset/helloos5/ipl.lst",
+		"/C/Users/NaOH/Desktop/30天自制操作系统/ipl.lst",
+		"/C/Users/NaOH/Desktop/30天自制操作系统/z_tools/fdimg0tw.tek",
+		"/C/Users/NaOH/Desktop/30天自制操作系统/z_tools/fdimg0at.tek",
+		"/C/Users/NaOH/Desktop/30天自制操作系统/helloos2.nas",
+		"/C/Users/NaOH/Desktop/OS/projects/02_day/helloos4/ipl.nas",
+		"/C/Users/NaOH/Desktop/OS/tolset/z_new_w/Makefile",
+		"/C/Users/NaOH/Desktop/30天自制操作系统/make.bat",
+		"/C/Users/NaOH/Desktop/OS/tolset/helloos4/ipl.lst",
+		"/C/Users/NaOH/Desktop/30dayMakeOS/02_day/Makefile",
+		"/C/Users/NaOH/Desktop/OS/tolset/helloos4/ipl.bin",
+		"/C/Users/NaOH/Desktop/OS/projects/02_day/helloos3/helloos.nas",
+		"/C/Users/NaOH/Desktop/30天自制操作系统/install.bat",
+		"/C/Users/NaOH/Desktop/30dayMakeOS/01_day/helloos.img",
+		"/C/Users/NaOH/Desktop/30dayMakeOS/01_day/helloos.nas",
+		"/G/._.Trashes",
+		"/C/Users/NaOH/Desktop/draft-cheshire-sudn-ipv4only-dot-arpa-06_2016140449_王楠.txt",
+		"/C/Users/NaOH/AppData/Local/Temp/scp15021/var/www/wlgf/Public/noVNC/css/vm.css",
+		"/C/Users/NaOH/AppData/Local/Temp/scp13783/var/www/wlgf/Public/noVNC/js/vm_canvas.js",
+		"/C/Users/NaOH/AppData/Local/Temp/scp08370/var/www/wlgf/Application/Admin/View/noVNC/vnc_canvas.html",
+		"/C/Users/NaOH/AppData/Local/Temp/scp02350/var/www/wlgf/Public/noVNC/js/vm_canvas.js",
+		"/C/Users/NaOH/AppData/Local/Temp/scp01255/var/www/wlgf/Application/Admin/View/noVNC/vnc_canvas.html",
+		"/C/Users/NaOH/AppData/Local/Temp/scp58056/var/www/wlgf/Application/Admin/Controller/VMController.class.php",
+		"/D/DM/fenci/jieba_test.py",
+		"/D/BaiduYunDownload/《音效示范·极音天碟》/07",
+		"/D/BaiduYunDownload/《音效示范·极音天碟》/梁祝.wav.baiduyun.downloading.cfg",
+		"/D/DM/news_tensite_xml.dat",
+		"/C/Users/NaOH/Desktop/jd-gui.cfg",
+		"/C/Users/NaOH/Desktop/1234.mep",
+		"/C/Users/NaOH/Desktop/mv/IMG_7821_Subtitle_Export/IMG_7821.srt",
+		"/C/Users/NaOH/Desktop/mv/IMG_7821.atpj",
+		"/C/Users/NaOH/Desktop/mv/导出/爱剪辑-lt_Subtitle_Export/爱剪辑-lt.srt",
+		"/D/nodejs_project/blog/views/header.ejs",
+		"/D/nodejs_project/blog/views/reg.ejs"
+	],
+	"find":
+	{
+		"height": 36.0
+	},
+	"find_in_files":
+	{
+		"height": 104.0,
+		"where_history":
+		[
+			""
+		]
+	},
+	"find_state":
+	{
+		"case_sensitive": false,
+		"find_history":
+		[
+			"count",
+			"memman_alloc_4k",
+			"memman_allock",
+			"menman",
+			"sheet_slide",
+			"MEMMAM",
+			"memman_alloc_4k",
+			"i ",
+			"i",
+			"hello",
+			"fin",
+			"~",
+			"。",
+			"，",
+			"‘’",
+			warning: LF will be replaced by CRLF in 30天自制操作系统.sublime-workspace.
The file will have its original line endings in your working directory.
"：",
+			"；",
+			";",
+			"DB	0x0a",
+			"名称",
+			"他们不",
+			"他们不是",
+			"他们不是负责",
+			"Table of Contents",
+			"自治",
+			"control_record_stop",
+			"router",
+			"login_submit",
+			"主页",
+			"	",
+			" ",
+			">",
+			"	",
+			" ",
+			"1",
+			"-",
+			".",
+			"1",
+			"0",
+			"1",
+			"0",
+			"1",
+			"0",
+			"-",
+			"0",
+			"1",
+			" ",
+			"	",
+			" ",
+			"	",
+			" ",
+			";\n",
+			"control_switch_panel",
+			"control_bt_slash_h",
+			"control_switch_panel",
+			"slide",
+			"control_bt_slash",
+			".control_bt_slash",
+			"fade",
+			"manual",
+			"togglec",
+			"control_switch_panel",
+			"\"<\"",
+			"boxframe_bt",
+			"nice",
+			"ctrl+alt+f",
+			"ctrl+alt+F",
+			"ctrl+alt+",
+			"ctrl+alt+f",
+			"ctrl+alt",
+			"ctr+alt",
+			"ctr+alt+f",
+			"tooltips",
+			"getip",
+			";",
+			"control_bt_nomal",
+			"control_panel_content",
+			"control_panel_switcher",
+			"7",
+			"7deg",
+			"control_panel_switcher",
+			"\n<",
+			"recordIconDOM",
+			"restartRecord",
+			"recordInterval",
+			"control_panel_record",
+			"updateTimer",
+			"startRecord",
+			"control_panel_record",
+			"control_record_status",
+			"192px",
+			"control_bt_record_icon",
+			"control_record_info",
+			"control_panel_record",
+			"control_record_info",
+			"control_panel_record",
+			"control_record_detail",
+			"//",
+			"control_panel_record",
+			"min",
+			"timeCounter",
+			"min",
+			"recordInterval",
+			"recordedTime",
+			"isRecording",
+			";",
+			"control_bt_nomal",
+			"control_bt_img",
+			"control_record_info",
+			"/Public/images/vnc_images/",
+			"text"
+		],
+		"highlight": true,
+		"in_selection": false,
+		"preserve_case": false,
+		"regex": false,
+		"replace_history":
+		[
+			"1",
+			"0",
+			"1",
+			"-",
+			".",
+			"1",
+			".",
+			"-",
+			".",
+			"-",
+			".",
+			"-",
+			".",
+			"-",
+			"1",
+			"0",
+			"1",
+			"0"
+		],
+		"reverse": false,
+		"show_context": true,
+		"use_buffer2": true,
+		"whole_word": false,
+		"wrap": true
+	},
+	"groups":
+	[
+		{
+			"selected": 0,
+			"sheets":
+			[
+				{
+					"buffer": 0,
+					"file": "fyt/fifo.c",
+					"semi_transient": false,
+					"settings":
+					{
+						"buffer_size": 758,
+						"regions":
+						{
+						},
+						"selection":
+						[
+							[
+								444,
+								444
+							]
+						],
+						"settings":
+						{
+							"origin_encoding": "UTF-8",
+							"syntax": "Packages/C++/C.sublime-syntax"
+						},
+						"translation.x": 0.0,
+						"translation.y": 54.0,
+						"zoom_level": 1.0
+					},
+					"stack_index": 0,
+					"type": "text"
+				}
+			]
+		}
+	],
+	"incremental_find":
+	{
+		"height": 26.0
+	},
+	"input":
+	{
+		"height": 40.0
+	},
+	"layout":
+	{
+		"cells":
+		[
+			[
+				0,
+				0,
+				1,
+				1
+			]
+		],
+		"cols":
+		[
+			0.0,
+			1.0
+		],
+		"rows":
+		[
+			0.0,
+			1.0
+		]
+	},
+	"menu_visible": true,
+	"output.find_results":
+	{
+		"height": 0.0
+	},
+	"pinned_build_system": "",
+	"project": "30天自制操作系统.sublime-project",
+	"replace":
+	{
+		"height": 48.0
+	},
+	"save_all_on_build": true,
+	"select_file":
+	{
+		"height": 0.0,
+		"last_filter": "",
+		"selected_items":
+		[
+			[
+				"java",
+				"F:\\HelloWorld.java"
+			]
+		],
+		"width": 0.0
+	},
+	"select_project":
+	{
+		"height": 500.0,
+		"last_filter": "",
+		"selected_items":
+		[
+		],
+		"width": 380.0
+	},
+	"select_symbol":
+	{
+		"height": 0.0,
+		"last_filter": "",
+		"selected_items":
+		[
+		],
+		"width": 0.0
+	},
+	"selected_group": 0,
+	"settings":
+	{
+	},
+	"show_minimap": true,
+	"show_open_files": true,
+	"show_tabs": true,
+	"side_bar_visible": true,
+	"side_bar_width": 172.0,
+	"status_bar_visible": true,
+	"template_settings":
+	{
+		"max_columns": 2
+	}
+}
diff --git a/fyt/asmhead.lst b/fyt/asmhead.lst
index cc9051c..12a6f53 100644
--- a/fyt/asmhead.lst
+++ b/fyt/asmhead.lst
@@ -15,134 +15,144 @@
     15 00000000                                 
     16                                          	ORG	0xc200
     17 0000C200                                 
-    18 0000C200 B0 13                           	MOV	AL,0x13 		;VGA显卡，320*200*8位彩色
-    19 0000C202 B4 00                           	MOV AH,0x00
-    20 0000C204 CD 10                           	INT	0x10
-    21 0000C206                                 
-    22 0000C206 C6 06 0FF2 08                   	MOV	BYTE [VMODE],8 	;记录画面模式
-    23 0000C20B C7 06 0FF4 0140                 	MOV	WORD [SCRNX],320
-    24 0000C211 C7 06 0FF6 00C8                 	MOV	WORD [SCRNY],200
-    25 0000C217 66 C7 06 0FF8 000A0000          	MOV	DWORD [VRAM],0x000a0000
-    26 0000C220                                 
-    27 0000C220                                 ;用BIOS取得键盘上各种LED指示灯的状态
-    28 0000C220 B4 02                           	MOV	AH,0x02
-    29 0000C222 CD 16                           	INT	0x16 			;Keyboard BIOS
-    30 0000C224 A2 0FF1                         	MOV	[LEDS],AL
-    31 0000C227                                 
-    32 0000C227                                 ;下面的部分回头再讲
-    33 0000C227                                 
-    34 0000C227                                 
-    35 0000C227                                 ; PICが一切の割り込みを受け付けないようにする
-    36 0000C227                                 ;	AT互換機の仕様では、PICの初期化をするなら、
-    37 0000C227                                 ;	こいつをCLI前にやっておかないと、たまにハングアップする
-    38 0000C227                                 ;	PICの初期化はあとでやる
-    39 0000C227                                 
-    40 0000C227 B0 FF                           		MOV		AL,0xff
-    41 0000C229 E6 21                           		OUT		0x21,AL
-    42 0000C22B 90                              		NOP						; OUT命令を連続させるとうまくいかない機種があるらしいので
-    43 0000C22C E6 A1                           		OUT		0xa1,AL
-    44 0000C22E                                 
-    45 0000C22E FA                              		CLI						; さらにCPUレベルでも割り込み禁止
-    46 0000C22F                                 
-    47 0000C22F                                 ; CPUから1MB以上のメモリにアクセスできるように、A20GATEを設定
-    48 0000C22F                                 
-    49 0000C22F E8 00B5                         		CALL	waitkbdout
-    50 0000C232 B0 D1                           		MOV		AL,0xd1
-    51 0000C234 E6 64                           		OUT		0x64,AL
-    52 0000C236 E8 00AE                         		CALL	waitkbdout
-    53 0000C239 B0 DF                           		MOV		AL,0xdf			; enable A20
-    54 0000C23B E6 60                           		OUT		0x60,AL
-    55 0000C23D E8 00A7                         		CALL	waitkbdout
-    56 0000C240                                 
-    57 0000C240                                 ; プロテクトモード移行
-    58 0000C240                                 
-    59 0000C240                                 [INSTRSET "i486p"]				; 486の命令まで使いたいという記述
-    60 0000C240                                 
-    61 0000C240 0F 01 16 C32A                   		LGDT	[GDTR0]			; 暫定GDTを設定
-    62 0000C245 0F 20 C0                        		MOV		EAX,CR0
-    63 0000C248 66 25 7FFFFFFF                  		AND		EAX,0x7fffffff	; bit31を0にする（ページング禁止のため）
-    64 0000C24E 66 83 C8 01                     		OR		EAX,0x00000001	; bit0を1にする（プロテクトモード移行のため）
-    65 0000C252 0F 22 C0                        		MOV		CR0,EAX
-    66 0000C255 EB 00                           		JMP		pipelineflush
-    67 0000C257                                 pipelineflush:
-    68 0000C257 B8 0008                         		MOV		AX,1*8			;  読み書き可能セグメント32bit
-    69 0000C25A 8E D8                           		MOV		DS,AX
-    70 0000C25C 8E C0                           		MOV		ES,AX
-    71 0000C25E 8E E0                           		MOV		FS,AX
-    72 0000C260 8E E8                           		MOV		GS,AX
-    73 0000C262 8E D0                           		MOV		SS,AX
-    74 0000C264                                 
-    75 0000C264                                 ; bootpackの転送
-    76 0000C264                                 
-    77 0000C264 66 BE 0000C330                  		MOV		ESI,bootpack	; 転送元
-    78 0000C26A 66 BF 00280000                  		MOV		EDI,BOTPAK		; 転送先
-    79 0000C270 66 B9 00020000                  		MOV		ECX,512*1024/4
-    80 0000C276 E8 0075                         		CALL	memcpy
-    81 0000C279                                 
-    82 0000C279                                 ; ついでにディスクデータも本来の位置へ転送
-    83 0000C279                                 
-    84 0000C279                                 ; まずはブートセクタから
-    85 0000C279                                 
-    86 0000C279 66 BE 00007C00                  		MOV		ESI,0x7c00		; 転送元
-    87 0000C27F 66 BF 00100000                  		MOV		EDI,DSKCAC		; 転送先
-    88 0000C285 66 B9 00000080                  		MOV		ECX,512/4
-    89 0000C28B E8 0060                         		CALL	memcpy
-    90 0000C28E                                 
-    91 0000C28E                                 ; 残り全部
-    92 0000C28E                                 
-    93 0000C28E 66 BE 00008200                  		MOV		ESI,DSKCAC0+512	; 転送元
-    94 0000C294 66 BF 00100200                  		MOV		EDI,DSKCAC+512	; 転送先
-    95 0000C29A 66 B9 00000000                  		MOV		ECX,0
-    96 0000C2A0 8A 0E 0FF0                      		MOV		CL,BYTE [CYLS]
-    97 0000C2A4 66 69 C9 00001200               		IMUL	ECX,512*18*2/4	; シリンダ数からバイト数/4に変換
-    98 0000C2AB 66 81 E9 00000080               		SUB		ECX,512/4		; IPLの分だけ差し引く
-    99 0000C2B2 E8 0039                         		CALL	memcpy
-   100 0000C2B5                                 
-   101 0000C2B5                                 ; asmheadでしなければいけないことは全部し終わったので、
-   102 0000C2B5                                 ;	あとはbootpackに任せる
-   103 0000C2B5                                 
-   104 0000C2B5                                 ; bootpackの起動
-   105 0000C2B5                                 
-   106 0000C2B5 66 BB 00280000                  		MOV		EBX,BOTPAK
-   107 0000C2BB 67 66 8B 4B 10                  		MOV		ECX,[EBX+16]
-   108 0000C2C0 66 83 C1 03                     		ADD		ECX,3			; ECX += 3;
-   109 0000C2C4 66 C1 E9 02                     		SHR		ECX,2			; ECX /= 4;
-   110 0000C2C8 74 10                           		JZ		skip			; 転送するべきものがない
-   111 0000C2CA 67 66 8B 73 14                  		MOV		ESI,[EBX+20]	; 転送元
-   112 0000C2CF 66 01 DE                        		ADD		ESI,EBX
-   113 0000C2D2 67 66 8B 7B 0C                  		MOV		EDI,[EBX+12]	; 転送先
-   114 0000C2D7 E8 0014                         		CALL	memcpy
-   115 0000C2DA                                 skip:
-   116 0000C2DA 67 66 8B 63 0C                  		MOV		ESP,[EBX+12]	; スタック初期値
-   117 0000C2DF 66 EA 0000001B 0010             		JMP		DWORD 2*8:0x0000001b
-   118 0000C2E7                                 
-   119 0000C2E7                                 waitkbdout:
-   120 0000C2E7 E4 64                           		IN		 AL,0x64
-   121 0000C2E9 24 02                           		AND		 AL,0x02
-   122 0000C2EB 75 FA                           		JNZ		waitkbdout		; ANDの結果が0でなければwaitkbdoutへ
-   123 0000C2ED C3                              		RET
-   124 0000C2EE                                 
-   125 0000C2EE                                 memcpy:
-   126 0000C2EE 67 66 8B 06                     		MOV		EAX,[ESI]
-   127 0000C2F2 66 83 C6 04                     		ADD		ESI,4
-   128 0000C2F6 67 66 89 07                     		MOV		[EDI],EAX
-   129 0000C2FA 66 83 C7 04                     		ADD		EDI,4
-   130 0000C2FE 66 83 E9 01                     		SUB		ECX,1
-   131 0000C302 75 EA                           		JNZ		memcpy			; 引き算した結果が0でなければmemcpyへ
-   132 0000C304 C3                              		RET
-   133 0000C305                                 ; memcpyはアドレスサイズプリフィクスを入れ忘れなければ、ストリング命令でも書ける
-   134 0000C305                                 
-   135 0000C305 00 00 00 00 00 00 00 00 00 00   		ALIGNB	16
+    18 0000C200                                 ;设定画面模式
+    19 0000C200 B0 13                           	MOV	AL,0x13 		;VGA显卡，320*200*8位彩色
+    20 0000C202 B4 00                           	MOV AH,0x00
+    21 0000C204 CD 10                           	INT	0x10
+    22 0000C206                                 
+    23 0000C206 C6 06 0FF2 08                   	MOV	BYTE [VMODE],8 	;记录画面模式
+    24 0000C20B C7 06 0FF4 0140                 	MOV	WORD [SCRNX],320
+    25 0000C211 C7 06 0FF6 00C8                 	MOV	WORD [SCRNY],200
+    26 0000C217 66 C7 06 0FF8 000A0000          	MOV	DWORD [VRAM],0x000a0000
+    27 0000C220                                 
+    28 0000C220                                 ;	MOV	BX,0x4101 		;VBE的640*480*8bi彩色
+    29 0000C220                                 ;	MOV	AX,0x4f02
+    30 0000C220                                 ;	INT 0x10
+    31 0000C220                                 
+    32 0000C220                                 ;	MOV	BYTE [VMODE],8 	;记录画面模式
+    33 0000C220                                 ;	MOV	WORD [SCRNX],640
+    34 0000C220                                 ;	MOV	WORD [SCRNY],480
+    35 0000C220                                 ;	MOV	DWORD [VRAM],0xe0000000
+    36 0000C220                                 
+    37 0000C220                                 ;用BIOS取得键盘上各种LED指示灯的状态
+    38 0000C220 B4 02                           	MOV	AH,0x02
+    39 0000C222 CD 16                           	INT	0x16 			;Keyboard BIOS
+    40 0000C224 A2 0FF1                         	MOV	[LEDS],AL
+    41 0000C227                                 
+    42 0000C227                                 ;下面的部分回头再讲
+    43 0000C227                                 
+    44 0000C227                                 
+    45 0000C227                                 ; PICが一切の割り込みを受け付けないようにする
+    46 0000C227                                 ;	AT互換機の仕様では、PICの初期化をするなら、
+    47 0000C227                                 ;	こいつをCLI前にやっておかないと、たまにハングアップする
+    48 0000C227                                 ;	PICの初期化はあとでやる
+    49 0000C227                                 
+    50 0000C227 B0 FF                           		MOV		AL,0xff
+    51 0000C229 E6 21                           		OUT		0x21,AL
+    52 0000C22B 90                              		NOP						; OUT命令を連続させるとうまくいかない機種があるらしいので
+    53 0000C22C E6 A1                           		OUT		0xa1,AL
+    54 0000C22E                                 
+    55 0000C22E FA                              		CLI						; さらにCPUレベルでも割り込み禁止
+    56 0000C22F                                 
+    57 0000C22F                                 ; CPUから1MB以上のメモリにアクセスできるように、A20GATEを設定
+    58 0000C22F                                 
+    59 0000C22F E8 00B5                         		CALL	waitkbdout
+    60 0000C232 B0 D1                           		MOV		AL,0xd1
+    61 0000C234 E6 64                           		OUT		0x64,AL
+    62 0000C236 E8 00AE                         		CALL	waitkbdout
+    63 0000C239 B0 DF                           		MOV		AL,0xdf			; enable A20
+    64 0000C23B E6 60                           		OUT		0x60,AL
+    65 0000C23D E8 00A7                         		CALL	waitkbdout
+    66 0000C240                                 
+    67 0000C240                                 ; プロテクトモード移行
+    68 0000C240                                 
+    69 0000C240                                 [INSTRSET "i486p"]				; 486の命令まで使いたいという記述
+    70 0000C240                                 
+    71 0000C240 0F 01 16 C32A                   		LGDT	[GDTR0]			; 暫定GDTを設定
+    72 0000C245 0F 20 C0                        		MOV		EAX,CR0
+    73 0000C248 66 25 7FFFFFFF                  		AND		EAX,0x7fffffff	; bit31を0にする（ページング禁止のため）
+    74 0000C24E 66 83 C8 01                     		OR		EAX,0x00000001	; bit0を1にする（プロテクトモード移行のため）
+    75 0000C252 0F 22 C0                        		MOV		CR0,EAX
+    76 0000C255 EB 00                           		JMP		pipelineflush
+    77 0000C257                                 pipelineflush:
+    78 0000C257 B8 0008                         		MOV		AX,1*8			;  読み書き可能セグメント32bit
+    79 0000C25A 8E D8                           		MOV		DS,AX
+    80 0000C25C 8E C0                           		MOV		ES,AX
+    81 0000C25E 8E E0                           		MOV		FS,AX
+    82 0000C260 8E E8                           		MOV		GS,AX
+    83 0000C262 8E D0                           		MOV		SS,AX
+    84 0000C264                                 
+    85 0000C264                                 ; bootpackの転送
+    86 0000C264                                 
+    87 0000C264 66 BE 0000C330                  		MOV		ESI,bootpack	; 転送元
+    88 0000C26A 66 BF 00280000                  		MOV		EDI,BOTPAK		; 転送先
+    89 0000C270 66 B9 00020000                  		MOV		ECX,512*1024/4
+    90 0000C276 E8 0075                         		CALL	memcpy
+    91 0000C279                                 
+    92 0000C279                                 ; ついでにディスクデータも本来の位置へ転送
+    93 0000C279                                 
+    94 0000C279                                 ; まずはブートセクタから
+    95 0000C279                                 
+    96 0000C279 66 BE 00007C00                  		MOV		ESI,0x7c00		; 転送元
+    97 0000C27F 66 BF 00100000                  		MOV		EDI,DSKCAC		; 転送先
+    98 0000C285 66 B9 00000080                  		MOV		ECX,512/4
+    99 0000C28B E8 0060                         		CALL	memcpy
+   100 0000C28E                                 
+   101 0000C28E                                 ; 残り全部
+   102 0000C28E                                 
+   103 0000C28E 66 BE 00008200                  		MOV		ESI,DSKCAC0+512	; 転送元
+   104 0000C294 66 BF 00100200                  		MOV		EDI,DSKCAC+512	; 転送先
+   105 0000C29A 66 B9 00000000                  		MOV		ECX,0
+   106 0000C2A0 8A 0E 0FF0                      		MOV		CL,BYTE [CYLS]
+   107 0000C2A4 66 69 C9 00001200               		IMUL	ECX,512*18*2/4	; シリンダ数からバイト数/4に変換
+   108 0000C2AB 66 81 E9 00000080               		SUB		ECX,512/4		; IPLの分だけ差し引く
+   109 0000C2B2 E8 0039                         		CALL	memcpy
+   110 0000C2B5                                 
+   111 0000C2B5                                 ; asmheadでしなければいけないことは全部し終わったので、
+   112 0000C2B5                                 ;	あとはbootpackに任せる
+   113 0000C2B5                                 
+   114 0000C2B5                                 ; bootpackの起動
+   115 0000C2B5                                 
+   116 0000C2B5 66 BB 00280000                  		MOV		EBX,BOTPAK
+   117 0000C2BB 67 66 8B 4B 10                  		MOV		ECX,[EBX+16]
+   118 0000C2C0 66 83 C1 03                     		ADD		ECX,3			; ECX += 3;
+   119 0000C2C4 66 C1 E9 02                     		SHR		ECX,2			; ECX /= 4;
+   120 0000C2C8 74 10                           		JZ		skip			; 転送するべきものがない
+   121 0000C2CA 67 66 8B 73 14                  		MOV		ESI,[EBX+20]	; 転送元
+   122 0000C2CF 66 01 DE                        		ADD		ESI,EBX
+   123 0000C2D2 67 66 8B 7B 0C                  		MOV		EDI,[EBX+12]	; 転送先
+   124 0000C2D7 E8 0014                         		CALL	memcpy
+   125 0000C2DA                                 skip:
+   126 0000C2DA 67 66 8B 63 0C                  		MOV		ESP,[EBX+12]	; スタック初期値
+   127 0000C2DF 66 EA 0000001B 0010             		JMP		DWORD 2*8:0x0000001b
+   128 0000C2E7                                 
+   129 0000C2E7                                 waitkbdout:
+   130 0000C2E7 E4 64                           		IN		 AL,0x64
+   131 0000C2E9 24 02                           		AND		 AL,0x02
+   132 0000C2EB 75 FA                           		JNZ		waitkbdout		; ANDの結果が0でなければwaitkbdoutへ
+   133 0000C2ED C3                              		RET
+   134 0000C2EE                                 
+   135 0000C2EE                                 memcpy:
+   136 0000C2EE 67 66 8B 06                     		MOV		EAX,[ESI]
+   137 0000C2F2 66 83 C6 04                     		ADD		ESI,4
+   138 0000C2F6 67 66 89 07                     		MOV		[EDI],EAX
+   139 0000C2FA 66 83 C7 04                     		ADD		EDI,4
+   140 0000C2FE 66 83 E9 01                     		SUB		ECX,1
+   141 0000C302 75 EA                           		JNZ		memcpy			; 引き算した結果が0でなければmemcpyへ
+   142 0000C304 C3                              		RET
+   143 0000C305                                 ; memcpyはアドレスサイズプリフィクスを入れ忘れなければ、ストリング命令でも書ける
+   144 0000C305                                 
+   145 0000C305 00 00 00 00 00 00 00 00 00 00   		ALIGNB	16
        0000C30F 00 
-   136 0000C310                                 GDT0:
-   137 0000C310 00 00 00 00 00 00 00 00         		RESB	8				; ヌルセレクタ
-   138 0000C318 FFFF 0000 9200 00CF             		DW		0xffff,0x0000,0x9200,0x00cf	; 読み書き可能セグメント32bit
-   139 0000C320 FFFF 0000 9A28 0047             		DW		0xffff,0x0000,0x9a28,0x0047	; 実行可能セグメント32bit（bootpack用）
-   140 0000C328                                 
-   141 0000C328 0000                            		DW		0
-   142 0000C32A                                 GDTR0:
-   143 0000C32A 0017                            		DW		8*3-1
-   144 0000C32C 0000C310                        		DD		GDT0
-   145 0000C330                                 
-   146 0000C330                                 		ALIGNB	16
-   147 0000C330                                 bootpack:
+   146 0000C310                                 GDT0:
+   147 0000C310 00 00 00 00 00 00 00 00         		RESB	8				; ヌルセレクタ
+   148 0000C318 FFFF 0000 9200 00CF             		DW		0xffff,0x0000,0x9200,0x00cf	; 読み書き可能セグメント32bit
+   149 0000C320 FFFF 0000 9A28 0047             		DW		0xffff,0x0000,0x9a28,0x0047	; 実行可能セグメント32bit（bootpack用）
+   150 0000C328                                 
+   151 0000C328 0000                            		DW		0
+   152 0000C32A                                 GDTR0:
+   153 0000C32A 0017                            		DW		8*3-1
+   154 0000C32C 0000C310                        		DD		GDT0
+   155 0000C330                                 
+   156 0000C330                                 		ALIGNB	16
+   157 0000C330                                 bootpack:
diff --git a/fyt/asmhead.nas b/fyt/asmhead.nas
index 021cadf..8244b33 100644
--- a/fyt/asmhead.nas
+++ b/fyt/asmhead.nas
@@ -15,6 +15,7 @@ VRAM 	EQU 	0x0ff8 	;图像缓冲区开始地址
 
 	ORG	0xc200
 
+;设定画面模式
 	MOV	AL,0x13 		;VGA显卡，320*200*8位彩色
 	MOV AH,0x00
 	INT	0x10
@@ -24,6 +25,15 @@ VRAM 	EQU 	0x0ff8 	;图像缓冲区开始地址
 	MOV	WORD [SCRNY],200
 	MOV	DWORD [VRAM],0x000a0000
 
+;	MOV	BX,0x4101 		;VBE的640*480*8bi彩色
+;	MOV	AX,0x4f02
+;	INT 0x10
+
+;	MOV	BYTE [VMODE],8 	;记录画面模式
+;	MOV	WORD [SCRNX],640
+;	MOV	WORD [SCRNY],480
+;	MOV	DWORD [VRAM],0xe0000000
+
 ;用BIOS取得键盘上各种LED指示灯的状态
 	MOV	AH,0x02
 	INT	0x16 			;Keyboard BIOS
diff --git a/fyt/bootpack.bim b/fyt/bootpack.bim
index d8a1f63..70ccc31 100644
Binary files a/fyt/bootpack.bim and b/fyt/bootpack.bim differ
diff --git a/fyt/bootpack.c b/fyt/bootpack.c
index 19fff6c..fa165c8 100644
--- a/fyt/bootpack.c
+++ b/fyt/bootpack.c
@@ -2,15 +2,27 @@
 #include <stdio.h>
 
 
-extern struct FIFO8 keyfifo, mousefifo;
+// extern struct FIFO8 keyfifo, mousefifo;
 extern struct TIMERCTL timerctl;
 
 void putfonts8_asc_sht(struct SHEET *sht, int x, int y, int c, int b, char *s, int l);
+void make_textbox8(struct SHEET *sht, int x0, int y0, int sx, int sy, int c);
+
+static char keytable[0x54] = {
+	0,0, '1', '2', '3', '4', '5', '6', '7', '8', '9', '0',
+	'-', '^',  0 ,  0 , 'Q', 'W', 'E', 'R', 'T', 'Y', 'U',
+	'I', 'O', 'P', '[', ']',  0 ,  0 , 'A', 'S', 'D', 'F', 
+	'G', 'H', 'J', 'K', 'L', ';', '\'', 0 ,  0 , ']', 'Z', 
+	'X', 'C', 'V', 'B', 'N', 'M', ',', '.', '/',  0 , '*', 
+	 0 , ' ',  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 , 
+	 0 ,  0 ,  0 ,  0 , '7', '8', '9', '-', '4', '5', '6', 
+	'+', '1', '2', '3', '0', '.'
+};
 
 void HariMain(void)
 {
 	struct BOOTINFO *binfo = (struct BOOTINFO *) ADR_BOOTINFO;
-	char s[40], mcursor[256], keybuf[32], mousebuf[128];
+	char s[40];
 	int mx, my, i;
 	struct MOUSE_DEC mdec;
 	// 内存测试
@@ -22,38 +34,37 @@ void HariMain(void)
 	struct SHEET *sht_back, *sht_mouse, *sht_win;
 	unsigned char *buf_back, buf_mouse[256], *buf_win;
 	// timer
-	struct FIFO8 timerfifo;
+	struct FIFO32 fifo;
+	int fifobuf[128];
 	struct TIMER *timer, *timer2, *timer3;
 	char timerbuf[8];
 
+
 	init_gdtidt();
 	init_pic();
 	io_sti(); 			/* STI执行后，IF（中断许可标志位）变为1，CPU接收中断 */
 
-	fifo8_init(&keyfifo, 32, keybuf);
-	fifo8_init(&mousefifo, 128, mousebuf);
-	
 	init_pit();
+	
+	fifo32_init(&fifo, 128, fifobuf);
+	init_keyboard(&fifo, 256);
+	enable_mouse(&fifo, 512, &mdec);
 
 	io_out8(PIC0_IMR, 0xf8); 		/*11111000 PIT和PIC1和键盘设置为许可*/
 	io_out8(PIC1_IMR, 0xef); 		/*11101111 鼠标设置为许可*/
 
-	fifo8_init(&timerfifo, 8, timerbuf);
 	timer = timer_alloc();
-	timer_init(timer, &timerfifo, 10);
+	timer_init(timer, &fifo, 10);
 	timer_settime(timer, 1000);
-	// fifo8_init(&timerfifo2, 8, timerbuf2);
+
 	timer2 = timer_alloc();
-	timer_init(timer2, &timerfifo, 3);
+	timer_init(timer2, &fifo, 3);
 	timer_settime(timer2, 300);
 	//
 	timer3 = timer_alloc();
-	timer_init(timer3, &timerfifo, 1);
+	timer_init(timer3, &fifo, 1);
 	timer_settime(timer3, 50);
 
-
-	init_keyboard();
-	enable_mouse(&mdec);
 	/*memory*/
 	memtotal = memtest_sub(0x00400000, 0xbfffffff);
 	memman_init(memman);
@@ -75,6 +86,13 @@ void HariMain(void)
 	init_mouse_cursor8(buf_mouse, 99); 		/*背景色号99*/
 	make_window8(buf_win, 160, 80, "fyt");
 	// putfonts8_asc(buf_win, 160, 24, 28, COL8_00FF00, "fyt, I love you.");
+
+	// 按键显示字符 letter
+	int cursor_x, cursor_c;
+	make_textbox8(sht_win, 8, 46, 144, 16, COL8_FFFFFF);
+	cursor_x = 8;
+	cursor_c = COL8_FFFFFF;
+	
 	sheet_slide(sht_back, 0, 0);
 	mx = (binfo->scrnx -16) / 2;
 	my = (binfo->scrny -28 -16) /2;
@@ -89,51 +107,61 @@ void HariMain(void)
 	sprintf(s, "Memory %dMB; free: %dKB.", memtotal/(1024*1024), memman_total(memman) / 1024);
 	putfonts8_asc(buf_back, binfo->scrnx, 0, 64, COL8_FFFFFF, s);
 	sheet_refresh(sht_back, 0, 0, binfo->scrnx, binfo->scrny);
+	
 
-/*
-
-	putfonts8_asc(binfo->vram, binfo->scrnx, 108, 108, COL8_00FF00, "fyt, I love you~");
-
-	memtotal = memtest_sub(0x00400000, 0xbfffffff);
-	memman_init(memman);
-	memman_free(memman, 0x00001000, 0x0009e000);
-	memman_free(memman, 0x00400000, memtotal - 0x00400000);
-
-	sprintf(s, "Memory %dMB; free: %dKB.", memtotal/(1024*1024), memman_total(memman) / 1024);
-	putfonts8_asc(binfo->vram, binfo->scrnx, 0, 64, COL8_FFFFFF, s);
-
-	//mouse
-	mx = (binfo->scrnx -16) / 2;
-	my = (binfo->scrny -28 -16) /2;
-	init_mouse_cursor8(mcursor, COL8_008484);
-	putblock8_8(binfo->vram, binfo->scrnx, 16, 16, mx, my, mcursor, 16);
-	sprintf(s, "(%d,%d)", mx, my);
-	putfonts8_asc(binfo->vram, binfo->scrnx, 16, 100, COL8_FF0000, s);
-*/
-
+	// 测试中断速度
+	int isTest = 1;
 
 	for(;;)
 	{
 		// boxfill8(buf_win,)
-
-		cnt++; 		/*测试定时器性能*/
+		// if (isTest == 1)
+		{
+			/* code */
+			cnt++; 		/*测试定时器性能*/
+		}
 		// sprintf(s, "%010d", cnt);
 		// sprintf(s, "%010d", timerctl.count);
 		// putfonts8_asc_sht(sht_win, 40, 28, COL8_FFFFFF, COL8_C6C6C6, s, 10);
 
 		io_cli();
-		if (fifo8_status(&keyfifo) + fifo8_status(&mousefifo) + fifo8_status(&timerfifo) == 0) {
-			io_sti();
-		} else {
-			if(fifo8_status(&keyfifo) != 0) {
-				i = fifo8_get(&keyfifo);
+		if (fifo32_status(&fifo) == 0) {
+			// if (isTest == 1)
+			// {
 				io_sti();
-				sprintf(s, "%02X", i);
+			// } else {
+				// io_stihlt();
+			// }
+		} else {
+			i = fifo32_get(&fifo);
+			io_sti();
+
+			if(256 <= i && i <= 511) {
+				/*键盘数据*/
+				sprintf(s, "%02X", i - 256);
 				putfonts8_asc_sht(sht_back, 0, 32, COL8_FFFFFF, COL8_008484, s, 2);
-			} else if(fifo8_status(&mousefifo) != 0) {
-				i = fifo8_get(&mousefifo);
-				io_sti();
-				if (mouse_decode(&mdec, i) != 0) {
+				if (i < 256 + 0x54)
+				{
+					if (keytable[i - 256] != 0 && cursor_x < 144)
+					{
+						s[0] = keytable[i - 256];
+						s[1] = 0;
+						putfonts8_asc_sht(sht_win, cursor_x, 46, COL8_000000, COL8_FFFFFF, s, 1);
+						cursor_x += 8;
+					}
+				}
+				if (i == 256 + 0x0e && cursor_x > 8)
+				{
+					/* 退格键 */
+					putfonts8_asc_sht(sht_win, cursor_x, 46, COL8_000000, COL8_FFFFFF, " ", 1);
+					cursor_x -= 8;
+				}
+				/*光标再显示*/
+				boxfill8(sht_win->buf, sht_win->bxsize, cursor_c, cursor_x, 46, cursor_x + 7, 61);
+				sheet_refresh(sht_win, cursor_x, 46, cursor_x + 8, 62);
+			} else if(512 <= i && i <= 767) {
+				/*鼠标数据*/
+				if (mouse_decode(&mdec, i - 512) != 0) {
 					/* 鼠标的3个字节都齐了，显示出来 */
 					sprintf(s, "[lcr %4d %4d]", mdec.x, mdec.y);
 					if((mdec.btn & 0x01) != 0) {
@@ -165,30 +193,34 @@ void HariMain(void)
 					sprintf(s, "(%3d, %3d)", mx, my);
 					putfonts8_asc_sht(sht_back, 0, 0, COL8_FFFFFF, COL8_008484, s, 10);
 					sheet_slide(sht_mouse, mx, my); 		/*包含sheet_refresh*/
+					if((mdec.btn & 0x01) != 0) {
+						/*按下左键，移动sht_win*/
+						sheet_slide(sht_win, mx - 80, my - 8);
+					}
 				}
-			} else if(fifo8_status(&timerfifo) != 0) {
-				i = fifo8_get(&timerfifo);
-				io_sti();
-				if (i == 10)
-				{
-					putfonts8_asc_sht(sht_back, 0, 80, COL8_FFFFFF, COL8_008484, "10 [sec]", 8);
-					sprintf(s, "%010d", cnt);
-					putfonts8_asc_sht(sht_win, 40, 28, COL8_FFFFFF, COL8_008484, s, 10);
-				} else if(i == 3)
+			} else if(i == 10) {
+				/*10秒定时器*/
+				putfonts8_asc_sht(sht_back, 0, 80, COL8_FFFFFF, COL8_008484, "10 [sec]", 8);
+				sprintf(s, "%010d", cnt);
+				putfonts8_asc_sht(sht_win, 40, 28, COL8_FFFFFF, COL8_008484, s, 10);
+				// isTest = 0;
+			} else if(i == 3)
+			{
+				putfonts8_asc_sht(sht_back, 0, 80+1*16, COL8_FFFFFF, COL8_008484, "3 [sec]", 7);
+				cnt = 0;
+			} else if(i <= 1){
+				/*光标用定时器*/
+				if (i != 0)
 				{
-					putfonts8_asc_sht(sht_back, 0, 80+1*16, COL8_FFFFFF, COL8_008484, "3 [sec]", 7);
-					cnt = 0;
-				}else{
-					if (i != 0) {
-						timer_init(timer3, &timerfifo, 0); 		/*设置0*/
-						boxfill8(buf_back, binfo->scrnx, COL8_FFFFFF, 8, 80+2*16, 15, 80+3*16);
-					} else {
-						timer_init(timer3, &timerfifo, 1); 		/*设置1*/
-						boxfill8(buf_back, binfo->scrnx, COL8_008484, 8, 80+2*16, 15, 80+3*16);
-					}
-					timer_settime(timer3, 50);
-					sheet_refresh(sht_back, 0, 80+2*16, 16, 80+3*16);
+					timer_init(timer3, &fifo, 0);
+					cursor_c = COL8_000000;
+				} else {
+					timer_init(timer3, &fifo, 1);
+					cursor_c = COL8_FFFFFF;
 				}
+				timer_settime(timer3, 50);
+				boxfill8(sht_win->buf, sht_win->bxsize, cursor_c, cursor_x, 46, cursor_x + 7, 61);
+				sheet_refresh(sht_win, cursor_x, 46, cursor_x+8, 62);
 			}
 		}
 	}
@@ -202,3 +234,19 @@ void putfonts8_asc_sht(struct SHEET *sht, int x, int y, int c, int b, char *s, i
 	return;
 }
 
+void make_warning: LF will be replaced by CRLF in fyt/asmhead.lst.
The file will have its original line endings in your working directory.
textbox8(struct SHEET *sht, int x0, int y0, int sx, int sy, int c)
+{
+	int x1 = x0 + sx, y1 = y0 + sy;
+	boxfill8(sht->buf, sht->bxsize, COL8_848484, x0 - 2, y0 - 3, x1 + 1, y0 - 3);
+	boxfill8(sht->buf, sht->bxsize, COL8_848484, x0 - 3, y0 - 3, x0 - 3, y1 + 1);
+	boxfill8(sht->buf, sht->bxsize, COL8_FFFFFF, x0 - 3, y1 + 2, x1 + 1, y1 + 2);
+	boxfill8(sht->buf, sht->bxsize, COL8_FFFFFF, x1 + 2, y0 - 3, x1 + 2, y1 + 2);
+	boxfill8(sht->buf, sht->bxsize, COL8_000000, x0 - 1, y0 - 2, x1 + 0, y0 - 2);
+	boxfill8(sht->buf, sht->bxsize, COL8_000000, x0 - 2, y0 - 2, x1 - 2, y1 + 0);
+	boxfill8(sht->buf, sht->bxsize, COL8_C6C6C6, x0 - 2, y1 + 1, x1 + 0, y1 + 1);
+	boxfill8(sht->buf, sht->bxsize, COL8_C6C6C6, x1 + 1, y0 - 2, x1 + 1, y1 + 1);
+	boxfill8(sht->buf, sht->bxsize, c,  		 x0 - 1, y0 - 1, x1 + 0, y1 + 0);
+	sheet_refresh(sht, x0, y0, sx, sy);
+	return;
+}
+
diff --git a/fyt/bootpack.h b/fyt/bootpack.h
index d097a0b..0b53f6d 100644
--- a/fyt/bootpack.h
+++ b/fyt/bootpack.h
@@ -86,6 +86,10 @@ struct FIFO8 {
 	unsigned char *buf;
 	int p, q, size, free, flags;
 };
+struct FIFO32 {
+	int *buf;
+	int p, q, size, free, flags;
+};
 
 #define FLAGS_OVERRUN		0x0001
 
@@ -94,12 +98,15 @@ int fifo8_put(struct FIFO8 *fifo, unsigned char data);
 int fifo8_get(struct FIFO8 *fifo);
 int fifo8_status(struct FIFO8 *fifo);
 
+void fifo32_init(struct FIFO32 *fifo, int size, int *buf);
+int fifo32_put(struct FIFO32 *fifo, int data);
+int fifo32_get(struct FIFO32 *fifo);
+int fifo32_status(struct FIFO32 *fifo);
 
 /* int.c */
 void init_pic(void);
-void inthandler21(int *esp);
 void inthandler27(int *esp);
-void inthandler2c(int *esp);
+
 #define PIC0_ICW1		0x0020
 #define PIC0_OCW2		0x0020
 #define PIC0_IMR		0x0021
@@ -129,8 +136,10 @@ struct MOUSE_DEC {
 	int x, y, btn;
 };
 void wait_KBC_sendready(void);
-void init_keyboard(void);
-void enable_mouse(struct MOUSE_DEC *mdec);
+void init_keyboard(struct FIFO32 *fifo, int data0);
+void inthandler2c(int *esp);
+void inthandler21(int *esp);
+void enable_mouse(struct FIFO32 *fifo, int data0, struct MOUSE_DEC *mdec);
 int mouse_decode(struct MOUSE_DEC *mdec, unsigned char data);
 
 /*memory.c*/
@@ -191,14 +200,15 @@ void sheet_free(struct SHEET *sht);
 #define TIMER_FLAGS_USING 	2 			/*定时器运行中*/
 
 struct TIMER {
+	struct TIMER *next;
 	unsigned int timeout, flags;
-	struct FIFO8 *fifo;
-	unsigned char data;
+	struct FIFO32 *fifo;
+	int data;
 };
 
 struct TIMERCTL {
-	unsigned int count, next, useing;
-	struct TIMER *timers[MAX_TIMER];
+	unsigned int count, next;
+	struct TIMER *t0;
 	struct TIMER timers0[MAX_TIMER];
 };
 
@@ -206,7 +216,7 @@ void init_pit(void);
 void inthandler20(int *esp);
 // void settimer(unsigned int timeout, struct FIFO8 *fifo, unsigned char data);
 struct TIMER *timer_alloc(void);
-void timer_init(struct TIMER *timer, struct FIFO8 *fifo, unsigned char data);
+void timer_init(struct TIMER *timer, struct FIFO32 *fifo, int data);
 void timer_settime(struct TIMER *timer, unsigned int timeout);
 void timer_free(struct TIMER *timer);
 
diff --git a/fyt/bootpack.hrb b/fyt/bootpack.hrb
index 8f69bb3..b8e2a20 100644
Binary files a/fyt/bootpack.hrb and b/fyt/bootpack.hrb differ
diff --git a/fyt/bootpack.lst b/fyt/bootpack.lst
index 25b59b2..2630d2b 100644
--- a/fyt/bootpack.lst
+++ b/fyt/bootpack.lst
@@ -6,584 +6,869 @@
      6 00000000                                 	EXTERN	_init_gdtidt
      7 00000000                                 	EXTERN	_init_pic
      8 00000000                                 	EXTERN	_io_sti
-     9 00000000                                 	EXTERN	_keyfifo
-    10 00000000                                 	EXTERN	_fifo8_init
-    11 00000000                                 	EXTERN	_mousefifo
-    12 00000000                                 	EXTERN	_init_pit
+     9 00000000                                 	EXTERN	_init_pit
+    10 00000000                                 	EXTERN	_fifo32_init
+    11 00000000                                 	EXTERN	_init_keyboard
+    12 00000000                                 	EXTERN	_enable_mouse
     13 00000000                                 	EXTERN	_io_out8
     14 00000000                                 	EXTERN	_timer_alloc
     15 00000000                                 	EXTERN	_timer_init
     16 00000000                                 	EXTERN	_timer_settime
-    17 00000000                                 	EXTERN	_init_keyboard
-    18 00000000                                 	EXTERN	_enable_mouse
-    19 00000000                                 	EXTERN	_memtest_sub
-    20 00000000                                 	EXTERN	_memman_init
-    21 00000000                                 	EXTERN	_memman_free
-    22 00000000                                 	EXTERN	_init_palette
-    23 00000000                                 	EXTERN	_shtctl_init
-    24 00000000                                 	EXTERN	_sheet_alloc
-    25 00000000                                 	EXTERN	_memman_alloc_4k
-    26 00000000                                 	EXTERN	_sheet_setbuf
-    27 00000000                                 	EXTERN	_init_screen8
-    28 00000000                                 	EXTERN	_init_mouse_cursor8
-    29 00000000                                 	EXTERN	_make_window8
-    30 00000000                                 	EXTERN	_sheet_slide
-    31 00000000                                 	EXTERN	_sheet_updown
-    32 00000000                                 	EXTERN	_putfonts8_asc
-    33 00000000                                 	EXTERN	_sprintf
-    34 00000000                                 	EXTERN	_memman_total
-    35 00000000                                 	EXTERN	_sheet_refresh
-    36 00000000                                 	EXTERN	_io_cli
-    37 00000000                                 	EXTERN	_fifo8_status
-    38 00000000                                 	EXTERN	_fifo8_get
-    39 00000000                                 	EXTERN	_boxfill8
-    40 00000000                                 	EXTERN	_mouse_decode
-    41 00000000                                 [FILE "bootpack.c"]
-    42                                          [SECTION .data]
-    43 00000000                                 LC0:
-    44 00000000 66 79 74 00                     	DB	"fyt",0x00
-    45 00000004                                 LC1:
-    46 00000004 66 79 74 2C 20 49 20 6C 6F 76   	DB	"fyt, I love you~",0x00
-       0000000E 65 20 79 6F 75 7E 00 
-    47 00000015                                 LC2:
-    48 00000015 28 25 64 2C 25 64 29 00         	DB	"(%d,%d)",0x00
-    49 0000001D                                 LC3:
-    50 0000001D 4D 65 6D 6F 72 79 20 25 64 4D   	DB	"Memory %dMB; free: %dKB.",0x00
-       00000027 42 3B 20 66 72 65 65 3A 20 25 
-       00000031 64 4B 42 2E 00 
-    51 00000036                                 LC9:
-    52 00000036 33 20 5B 73 65 63 5D 00         	DB	"3 [sec]",0x00
-    53 0000003E                                 LC7:
-    54 0000003E 31 30 20 5B 73 65 63 5D 00      	DB	"10 [sec]",0x00
-    55 00000047                                 LC8:
-    56 00000047 25 30 31 30 64 00               	DB	"%010d",0x00
-    57 0000004D                                 LC5:
-    58 0000004D 5B 6C 63 72 20 25 34 64 20 25   	DB	"[lcr %4d %4d]",0x00
-       00000057 34 64 5D 00 
-    59 0000005B                                 LC6:
-    60 0000005B 28 25 33 64 2C 20 25 33 64 29   	DB	"(%3d, %3d)",0x00
-       00000065 00 
-    61 00000066                                 LC4:
-    62 00000066 25 30 32 58 00                  	DB	"%02X",0x00
-    63                                          [SECTION .text]
-    64 00000000                                 	GLOBAL	_HariMain
-    65 00000000                                 _HariMain:
-    66 00000000 55                              	PUSH	EBP
-    67 00000001 89 E5                           	MOV	EBP,ESP
-    68 00000003 57                              	PUSH	EDI
-    69 00000004 56                              	PUSH	ESI
-    70 00000005 53                              	PUSH	EBX
-    71 00000006 8D B5 FFFFFCF4                  	LEA	ESI,DWORD [-780+EBP]
-    72 0000000C 81 EC 00000330                  	SUB	ESP,816
-    73 00000012 C7 85 FFFFFCE0 00000000         	MOV	DWORD [-800+EBP],0
-    74 0000001C E8 [00000000]                   	CALL	_init_gdtidt
-    75 00000021 E8 [00000000]                   	CALL	_init_pic
-    76 00000026 E8 [00000000]                   	CALL	_io_sti
-    77 0000002B 8D 85 FFFFFEA4                  	LEA	EAX,DWORD [-348+EBP]
-    78 00000031 50                              	PUSH	EAX
-    79 00000032 6A 20                           	PUSH	32
-    80 00000034 68 [00000000]                   	PUSH	_keyfifo
-    81 00000039 E8 [00000000]                   	CALL	_fifo8_init
-    82 0000003E 8D 85 FFFFFE24                  	LEA	EAX,DWORD [-476+EBP]
-    83 00000044 50                              	PUSH	EAX
-    84 00000045 68 00000080                     	PUSH	128
-    85 0000004A 68 [00000000]                   	PUSH	_mousefifo
-    86 0000004F E8 [00000000]                   	CALL	_fifo8_init
-    87 00000054 E8 [00000000]                   	CALL	_init_pit
-    88 00000059 68 000000F8                     	PUSH	248
-    89 0000005E 6A 21                           	PUSH	33
-    90 00000060 E8 [00000000]                   	CALL	_io_out8
-    91 00000065 83 C4 20                        	ADD	ESP,32
-    92 00000068 68 000000EF                     	PUSH	239
-    93 0000006D 68 000000A1                     	PUSH	161
-    94 00000072 E8 [00000000]                   	CALL	_io_out8
-    95 00000077 8D 85 FFFFFCEC                  	LEA	EAX,DWORD [-788+EBP]
-    96 0000007D 50                              	PUSH	EAX
-    97 0000007E 6A 08                           	PUSH	8
-    98 00000080 56                              	PUSH	ESI
-    99 00000081 E8 [00000000]                   	CALL	_fifo8_init
-   100 00000086 E8 [00000000]                   	CALL	_timer_alloc
-   101 0000008B 6A 0A                           	PUSH	10
-   102 0000008D 56                              	PUSH	ESI
-   103 0000008E 89 C3                           	MOV	EBX,EAX
-   104 00000090 50                              	PUSH	EAX
-   105 00000091 E8 [00000000]                   	CALL	_timer_init
-   106 00000096 83 C4 20                        	ADD	ESP,32
-   107 00000099 68 000003E8                     	PUSH	1000
-   108 0000009E 53                              	PUSH	EBX
-   109 0000009F E8 [00000000]                   	CALL	_timer_settime
-   110 000000A4 E8 [00000000]                   	CALL	_timer_alloc
-   111 000000A9 6A 03                           	PUSH	3
-   112 000000AB 56                              	PUSH	ESI
-   113 000000AC 89 C3                           	MOV	EBX,EAX
-   114 000000AE 50                              	PUSH	EAX
-   115 000000AF E8 [00000000]                   	CALL	_timer_init
-   116 000000B4 68 0000012C                     	PUSH	300
-   117 000000B9 53                              	PUSH	EBX
-   118 000000BA E8 [00000000]                   	CALL	_timer_settime
-   119 000000BF E8 [00000000]                   	CALL	_timer_alloc
-   120 000000C4 6A 01                           	PUSH	1
-   121 000000C6 56                              	PUSH	ESI
-   122 000000C7 50                              	PUSH	EAX
-   123 000000C8 89 85 FFFFFCCC                  	MOV	DWORD [-820+EBP],EAX
-   124 000000CE E8 [00000000]                   	CALL	_timer_init
-   125 000000D3 83 C4 28                        	ADD	ESP,40
-   126 000000D6 6A 32                           	PUSH	50
-   127 000000D8 FF B5 FFFFFCCC                  	PUSH	DWORD [-820+EBP]
-   128 000000DE E8 [00000000]                   	CALL	_timer_settime
-   129 000000E3 E8 [00000000]                   	CALL	_init_keyboard
-   130 000000E8 8D 85 FFFFFE14                  	LEA	EAX,DWORD [-492+EBP]
-   131 000000EE 50                              	PUSH	EAX
-   132 000000EF E8 [00000000]                   	CALL	_enable_mouse
-   133 000000F4 68 BFFFFFFF                     	PUSH	-1073741825
-   134 000000F9 68 00400000                     	PUSH	4194304
-   135 000000FE E8 [00000000]                   	CALL	_memtest_sub
-   136 00000103 68 003C0000                     	PUSH	3932160
-   137 00000108 89 85 FFFFFCE4                  	MOV	DWORD [-796+EBP],EAX
-   138 0000010E E8 [00000000]                   	CALL	_memman_init
-   139 00000113 68 0009E000                     	PUSH	647168
-   140 00000118 68 00001000                     	PUSH	4096
-   141 0000011D 68 003C0000                     	PUSH	3932160
-   142 00000122 E8 [00000000]                   	CALL	_memman_free
-   143 00000127 8B 85 FFFFFCE4                  	MOV	EAX,DWORD [-796+EBP]
-   144 0000012D 83 C4 24                        	ADD	ESP,36
-   145 00000130 2D 00400000                     	SUB	EAX,4194304
-   146 00000135 50                              	PUSH	EAX
-   147 00000136 68 00400000                     	PUSH	4194304
-   148 0000013B 68 003C0000                     	PUSH	3932160
-   149 00000140 E8 [00000000]                   	CALL	_memman_free
-   150 00000145 E8 [00000000]                   	CALL	_init_palette
-   151 0000014A 0F BF 05 00000FF6               	MOVSX	EAX,WORD [4086]
-   152 00000151 50                              	PUSH	EAX
-   153 00000152 0F BF 05 00000FF4               	MOVSX	EAX,WORD [4084]
-   154 00000159 50                              	PUSH	EAX
-   155 0000015A FF 35 00000FF8                  	PUSH	DWORD [4088]
-   156 00000160 68 003C0000                     	PUSH	3932160
-   157 00000165 E8 [00000000]                   	CALL	_shtctl_init
-   158 0000016A 89 C3                           	MOV	EBX,EAX
-   159 0000016C 50                              	PUSH	EAX
-   160 0000016D E8 [00000000]                   	CALL	_sheet_alloc
-   161 00000172 83 C4 20                        	ADD	ESP,32
-   162 00000175 53                              	PUSH	EBX
-   163 00000176 89 85 FFFFFCDC                  	MOV	DWORD [-804+EBP],EAX
-   164 0000017C E8 [00000000]                   	CALL	_sheet_alloc
-   165 00000181 53                              	PUSH	EBX
-   166 00000182 8D 9D FFFFFD14                  	LEA	EBX,DWORD [-748+EBP]
-   167 00000188 89 85 FFFFFCD8                  	MOV	DWORD [-808+EBP],EAX
-   168 0000018E E8 [00000000]                   	CALL	_sheet_alloc
-   169 00000193 0F BF 15 00000FF6               	MOVSX	EDX,WORD [4086]
-   170 0000019A 89 85 FFFFFCD4                  	MOV	DWORD [-812+EBP],EAX
-   171 000001A0 0F BF 05 00000FF4               	MOVSX	EAX,WORD [4084]
-   172 000001A7 0F AF C2                        	IMUL	EAX,EDX
-   173 000001AA 50                              	PUSH	EAX
-   174 000001AB 68 003C0000                     	PUSH	3932160
-   175 000001B0 E8 [00000000]                   	CALL	_memman_alloc_4k
-   176 000001B5 68 00003200                     	PUSH	12800
-   177 000001BA 68 003C0000                     	PUSH	3932160
-   178 000001BF 89 85 FFFFFCD0                  	MOV	DWORD [-816+EBP],EAX
-   179 000001C5 E8 [00000000]                   	CALL	_memman_alloc_4k
-   180 000001CA 6A FF                           	PUSH	-1
-   181 000001CC 89 C6                           	MOV	ESI,EAX
-   182 000001CE 0F BF 05 00000FF6               	MOVSX	EAX,WORD [4086]
-   183 000001D5 50                              	PUSH	EAX
-   184 000001D6 0F BF 05 00000FF4               	MOVSX	EAX,WORD [4084]
-   185 000001DD 50                              	PUSH	EAX
-   186 000001DE FF B5 FFFFFCD0                  	PUSH	DWORD [-816+EBP]
-   187 000001E4 FF B5 FFFFFCDC                  	PUSH	DWORD [-804+EBP]
-   188 000001EA E8 [00000000]                   	CALL	_sheet_setbuf
-   189 000001EF 83 C4 2C                        	ADD	ESP,44
-   190 000001F2 6A 63                           	PUSH	99
-   191 000001F4 6A 10                           	PUSH	16
-   192 000001F6 6A 10                           	PUSH	16
-   193 000001F8 53                              	PUSH	EBX
-   194 000001F9 FF B5 FFFFFCD8                  	PUSH	DWORD [-808+EBP]
-   195 000001FF E8 [00000000]                   	CALL	_sheet_setbuf
-   196 00000204 6A FF                           	PUSH	-1
-   197 00000206 6A 50                           	PUSH	80
-   198 00000208 68 000000A0                     	PUSH	160
-   199 0000020D 56                              	PUSH	ESI
-   200 0000020E FF B5 FFFFFCD4                  	PUSH	DWORD [-812+EBP]
-   201 00000214 E8 [00000000]                   	CALL	_sheet_setbuf
-   202 00000219 83 C4 28                        	ADD	ESP,40
-   203 0000021C 0F BF 05 00000FF6               	MOVSX	EAX,WORD [4086]
-   204 00000223 50                              	PUSH	EAX
-   205 00000224 0F BF 05 00000FF4               	MOVSX	EAX,WORD [4084]
-   206 0000022B 50                              	PUSH	EAX
-   207 0000022C FF B5 FFFFFCD0                  	PUSH	DWORD [-816+EBP]
-   208 00000232 E8 [00000000]                   	CALL	_init_screen8
-   209 00000237 6A 63                           	PUSH	99
-   210 00000239 53                              	PUSH	EBX
-   211 0000023A BB 00000002                     	MOV	EBX,2
-   212 0000023F E8 [00000000]                   	CALL	_init_mouse_cursor8
-   213 00000244 68 [00000000]                   	PUSH	LC0
-   214 00000249 6A 50                           	PUSH	80
-   215 0000024B 68 000000A0                     	PUSH	160
-   216 00000250 56                              	PUSH	ESI
-   217 00000251 E8 [00000000]                   	CALL	_make_window8
-   218 00000256 83 C4 24                        	ADD	ESP,36
-   219 00000259 6A 00                           	PUSH	0
-   220 0000025B 6A 00                           	PUSH	0
-   221 0000025D FF B5 FFFFFCDC                  	PUSH	DWORD [-804+EBP]
-   222 00000263 E8 [00000000]                   	CALL	_sheet_slide
-   223 00000268 0F BF 05 00000FF4               	MOVSX	EAX,WORD [4084]
-   224 0000026F 8D 48 F0                        	LEA	ECX,DWORD [-16+EAX]
-   225 00000272 89 C8                           	MOV	EAX,ECX
-   226 00000274 99                              	CDQ
-   227 00000275 F7 FB                           	IDIV	EBX
-   228 00000277 89 85 FFFFFCE8                  	MOV	DWORD [-792+EBP],EAX
-   229 0000027D 0F BF 05 00000FF6               	MOVSX	EAX,WORD [4086]
-   230 00000284 8D 48 D4                        	LEA	ECX,DWORD [-44+EAX]
-   231 00000287 89 C8                           	MOV	EAX,ECX
-   232 00000289 99                              	CDQ
-   233 0000028A F7 FB                           	IDIV	EBX
-   234 0000028C 50                              	PUSH	EAX
-   235 0000028D 89 C7                           	MOV	EDI,EAX
-   236 0000028F FF B5 FFFFFCE8                  	PUSH	DWORD [-792+EBP]
-   237 00000295 FF B5 FFFFFCD8                  	PUSH	DWORD [-808+EBP]
-   238 0000029B 8D 5D C4                        	LEA	EBX,DWORD [-60+EBP]
-   239 0000029E E8 [00000000]                   	CALL	_sheet_slide
-   240 000002A3 6A 48                           	PUSH	72
-   241 000002A5 6A 50                           	PUSH	80
-   242 000002A7 FF B5 FFFFFCD4                  	PUSH	DWORD [-812+EBP]
-   243 000002AD E8 [00000000]                   	CALL	_sheet_slide
-   244 000002B2 83 C4 24                        	ADD	ESP,36
-   245 000002B5 6A 00                           	PUSH	0
-   246 000002B7 FF B5 FFFFFCDC                  	PUSH	DWORD [-804+EBP]
-   247 000002BD E8 [00000000]                   	CALL	_sheet_updown
-   248 000002C2 6A 01                           	PUSH	1
-   249 000002C4 FF B5 FFFFFCD4                  	PUSH	DWORD [-812+EBP]
-   250 000002CA E8 [00000000]                   	CALL	_sheet_updown
-   251 000002CF 6A 02                           	PUSH	2
-   252 000002D1 FF B5 FFFFFCD8                  	PUSH	DWORD [-808+EBP]
-   253 000002D7 E8 [00000000]                   	CALL	_sheet_updown
-   254 000002DC 68 [00000004]                   	PUSH	LC1
-   255 000002E1 6A 02                           	PUSH	2
-   256 000002E3 68 000000A8                     	PUSH	168
-   257 000002E8 6A 6C                           	PUSH	108
-   258 000002EA 0F BF 05 00000FF4               	MOVSX	EAX,WORD [4084]
-   259 000002F1 50                              	PUSH	EAX
-   260 000002F2 FF B5 FFFFFCDC                  	PUSH	DWORD [-804+EBP]
-   261 000002F8 E8 [00000000]                   	CALL	_putfonts8_asc
-   262 000002FD 83 C4 30                        	ADD	ESP,48
-   263 00000300 57                              	PUSH	EDI
-   264 00000301 FF B5 FFFFFCE8                  	PUSH	DWORD [-792+EBP]
-   265 00000307 68 [00000015]                   	PUSH	LC2
-   266 0000030C 53                              	PUSH	EBX
-   267 0000030D E8 [00000000]                   	CALL	_sprintf
-   268 00000312 53                              	PUSH	EBX
-   269 00000313 6A 01                           	PUSH	1
-   270 00000315 6A 64                           	PUSH	100
-   271 00000317 6A 10                           	PUSH	16
-   272 00000319 0F BF 05 00000FF4               	MOVSX	EAX,WORD [4084]
-   273 00000320 50                              	PUSH	EAX
-   274 00000321 FF B5 FFFFFCD0                  	PUSH	DWORD [-816+EBP]
-   275 00000327 E8 [00000000]                   	CALL	_putfonts8_asc
-   276 0000032C 83 C4 28                        	ADD	ESP,40
-   277 0000032F 68 003C0000                     	PUSH	3932160
-   278 00000334 E8 [00000000]                   	CALL	_memman_total
-   279 00000339 C1 E8 0A                        	SHR	EAX,10
-   280 0000033C C1 AD FFFFFCE4 14               	SHR	DWORD [-796+EBP],20
-   281 00000343 89 04 24                        	MOV	DWORD [ESP],EAX
-   282 00000346 FF B5 FFFFFCE4                  	PUSH	DWORD [-796+EBP]
-   283 0000034C 68 [0000001D]                   	PUSH	LC3
-   284 00000351 53                              	PUSH	EBX
-   285 00000352 E8 [00000000]                   	CALL	_sprintf
-   286 00000357 53                              	PUSH	EBX
-   287 00000358 6A 07                           	PUSH	7
-   288 0000035A 6A 40                           	PUSH	64
-   289 0000035C 6A 00                           	PUSH	0
-   290 0000035E 0F BF 05 00000FF4               	MOVSX	EAX,WORD [4084]
-   291 00000365 50                              	PUSH	EAX
-   292 00000366 FF B5 FFFFFCD0                  	PUSH	DWORD [-816+EBP]
-   293 0000036C E8 [00000000]                   	CALL	_putfonts8_asc
-   294 00000371 83 C4 28                        	ADD	ESP,40
-   295 00000374 0F BF 05 00000FF6               	MOVSX	EAX,WORD [4086]
-   296 0000037B 50                              	PUSH	EAX
-   297 0000037C 0F BF 05 00000FF4               	MOVSX	EAX,WORD [4084]
-   298 00000383 50                              	PUSH	EAX
-   299 00000384 6A 00                           	PUSH	0
-   300 00000386 6A 00                           	PUSH	0
-   301 00000388 FF B5 FFFFFCDC                  	PUSH	DWORD [-804+EBP]
-   302 0000038E E8 [00000000]                   	CALL	_sheet_refresh
-   303 00000393 83 C4 14                        	ADD	ESP,20
-   304 00000396                                 L2:
-   305 00000396 FF 85 FFFFFCE0                  	INC	DWORD [-800+EBP]
-   306 0000039C 8D B5 FFFFFCF4                  	LEA	ESI,DWORD [-780+EBP]
-   307 000003A2 E8 [00000000]                   	CALL	_io_cli
-   308 000003A7 68 [00000000]                   	PUSH	_keyfifo
-   309 000003AC E8 [00000000]                   	CALL	_fifo8_status
-   310 000003B1 68 [00000000]                   	PUSH	_mousefifo
-   311 000003B6 89 C3                           	MOV	EBX,EAX
-   312 000003B8 E8 [00000000]                   	CALL	_fifo8_status
-   313 000003BD 56                              	PUSH	ESI
-   314 000003BE 01 C3                           	ADD	EBX,EAX
-   315 000003C0 E8 [00000000]                   	CALL	_fifo8_status
-   316 000003C5 83 C4 0C                        	ADD	ESP,12
-   317 000003C8 8D 04 18                        	LEA	EAX,DWORD [EAX+EBX*1]
-   318 000003CB 85 C0                           	TEST	EAX,EAX
-   319 000003CD 0F 84 00000292                  	JE	L28
-   320 000003D3 68 [00000000]                   	PUSH	_keyfifo
-   321 000003D8 E8 [00000000]                   	CALL	_fifo8_status
-   322 000003DD 5B                              	POP	EBX
-   323 000003DE 85 C0                           	TEST	EAX,EAX
-   324 000003E0 0F 85 00000241                  	JNE	L29
-   325 000003E6 68 [00000000]                   	PUSH	_mousefifo
-   326 000003EB E8 [00000000]                   	CALL	_fifo8_status
-   327 000003F0 59                              	POP	ECX
-   328 000003F1 85 C0                           	TEST	EAX,EAX
-   329 000003F3 0F 85 00000116                  	JNE	L30
-   330 000003F9 56                              	PUSH	ESI
-   331 000003FA E8 [00000000]                   	CALL	_fifo8_status
-   332 000003FF 5A                              	POP	EDX
-   333 00000400 85 C0                           	TEST	EAX,EAX
-   334 00000402 74 92                           	JE	L2
-   335 00000404 56                              	PUSH	ESI
-   336 00000405 E8 [00000000]                   	CALL	_fifo8_get
-   337 0000040A 89 C3                           	MOV	EBX,EAX
-   338 0000040C E8 [00000000]                   	CALL	_io_sti
-   339 00000411 58                              	POP	EAX
-   340 00000412 83 FB 0A                        	CMP	EBX,10
-   341 00000415 0F 84 000000A8                  	JE	L31
-   342 0000041B 83 FB 03                        	CMP	EBX,3
-   343 0000041E 74 7D                           	JE	L32
-   344 00000420 85 DB                           	TEST	EBX,EBX
-   345 00000422 74 5C                           	JE	L24
-   346 00000424 6A 00                           	PUSH	0
-   347 00000426 56                              	PUSH	ESI
-   348 00000427 FF B5 FFFFFCCC                  	PUSH	DWORD [-820+EBP]
-   349 0000042D E8 [00000000]                   	CALL	_timer_init
-   350 00000432 68 00000080                     	PUSH	128
-   351 00000437 6A 0F                           	PUSH	15
-   352 00000439 6A 70                           	PUSH	112
-   353 0000043B 6A 08                           	PUSH	8
-   354 0000043D 6A 07                           	PUSH	7
-   355 0000043F                                 L27:
-   356 0000043F 0F BF 05 00000FF4               	MOVSX	EAX,WORD [4084]
-   357 00000446 50                              	PUSH	EAX
-   358 00000447 FF B5 FFFFFCD0                  	PUSH	DWORD [-816+EBP]
-   359 0000044D E8 [00000000]                   	CALL	_boxfill8
-   360 00000452 83 C4 28                        	ADD	ESP,40
-   361 00000455 6A 32                           	PUSH	50
-   362 00000457 FF B5 FFFFFCCC                  	PUSH	DWORD [-820+EBP]
-   363 0000045D E8 [00000000]                   	CALL	_timer_settime
-   364 00000462 68 00000080                     	PUSH	128
-   365 00000467 6A 10                           	PUSH	16
-   366 00000469 6A 70                           	PUSH	112
-   367 0000046B 6A 00                           	PUSH	0
-   368 0000046D FF B5 FFFFFCDC                  	PUSH	DWORD [-804+EBP]
-   369 00000473 E8 [00000000]                   	CALL	_sheet_refresh
-   370 00000478                                 L26:
-   371 00000478 83 C4 1C                        	ADD	ESP,28
-   372 0000047B E9 FFFFFF16                     	JMP	L2
-   373 00000480                                 L24:
-   374 00000480 6A 01                           	PUSH	1
-   375 00000482 56                              	PUSH	ESI
-   376 00000483 FF B5 FFFFFCCC                  	PUSH	DWORD [-820+EBP]
-   377 00000489 E8 [00000000]                   	CALL	_timer_init
-   378 0000048E 68 00000080                     	PUSH	128
-   379 00000493 6A 0F                           	PUSH	15
-   380 00000495 6A 70                           	PUSH	112
-   381 00000497 6A 08                           	PUSH	8
-   382 00000499 6A 0E                           	PUSH	14
-   383 0000049B EB A2                           	JMP	L27
-   384 0000049D                                 L32:
-   385 0000049D 6A 07                           	PUSH	7
-   386 0000049F 68 [00000036]                   	PUSH	LC9
-   387 000004A4 6A 0E                           	PUSH	14
-   388 000004A6 6A 07                           	PUSH	7
-   389 000004A8 6A 60                           	PUSH	96
-   390 000004AA 6A 00                           	PUSH	0
-   391 000004AC FF B5 FFFFFCDC                  	PUSH	DWORD [-804+EBP]
-   392 000004B2 E8 000001B8                     	CALL	_putfonts8_asc_sht
-   393 000004B7 C7 85 FFFFFCE0 00000000         	MOV	DWORD [-800+EBP],0
-   394 000004C1 EB B5                           	JMP	L26
-   395 000004C3                                 L31:
-   396 000004C3 6A 08                           	PUSH	8
-   397 000004C5 8D 5D C4                        	LEA	EBX,DWORD [-60+EBP]
-   398 000004C8 68 [0000003E]                   	PUSH	LC7
-   399 000004CD 6A 0E                           	PUSH	14
-   400 000004CF 6A 07                           	PUSH	7
-   401 000004D1 6A 50                           	PUSH	80
-   402 000004D3 6A 00                           	PUSH	0
-   403 000004D5 FF B5 FFFFFCDC                  	PUSH	DWORD [-804+EBP]
-   404 000004DB E8 0000018F                     	CALL	_putfonts8_asc_sht
-   405 000004E0 FF B5 FFFFFCE0                  	PUSH	DWORD [-800+EBP]
-   406 000004E6 68 [00000047]                   	PUSH	LC8
-   407 000004EB 53                              	PUSH	EBX
-   408 000004EC E8 [00000000]                   	CALL	_sprintf
-   409 000004F1 83 C4 28                        	ADD	ESP,40
-   410 000004F4 6A 0A                           	PUSH	10
-   411 000004F6 53                              	PUSH	EBX
-   412 000004F7 6A 0E                           	PUSH	14
-   413 000004F9 6A 07                           	PUSH	7
-   414 000004FB 6A 1C                           	PUSH	28
-   415 000004FD 6A 28                           	PUSH	40
-   416 000004FF FF B5 FFFFFCD4                  	PUSH	DWORD [-812+EBP]
-   417 00000505 E8 00000165                     	CALL	_putfonts8_asc_sht
-   418 0000050A E9 FFFFFF69                     	JMP	L26
-   419 0000050F                                 L30:
-   420 0000050F 68 [00000000]                   	PUSH	_mousefifo
-   421 00000514 E8 [00000000]                   	CALL	_fifo8_get
-   422 00000519 89 C3                           	MOV	EBX,EAX
-   423 0000051B E8 [00000000]                   	CALL	_io_sti
-   424 00000520 0F B6 C3                        	MOVZX	EAX,BL
-   425 00000523 50                              	PUSH	EAX
-   426 00000524 8D 85 FFFFFE14                  	LEA	EAX,DWORD [-492+EBP]
-   427 0000052A 50                              	PUSH	EAX
-   428 0000052B E8 [00000000]                   	CALL	_mouse_decode
-   429 00000530 83 C4 0C                        	ADD	ESP,12
-   430 00000533 85 C0                           	TEST	EAX,EAX
-   431 00000535 0F 84 FFFFFE5B                  	JE	L2
-   432 0000053B FF B5 FFFFFE1C                  	PUSH	DWORD [-484+EBP]
-   433 00000541 FF B5 FFFFFE18                  	PUSH	DWORD [-488+EBP]
-   434 00000547 68 [0000004D]                   	PUSH	LC5
-   435 0000054C 8D 5D C4                        	LEA	EBX,DWORD [-60+EBP]
-   436 0000054F 53                              	PUSH	EBX
-   437 00000550 E8 [00000000]                   	CALL	_sprintf
-   438 00000555 83 C4 10                        	ADD	ESP,16
-   439 00000558 8B 85 FFFFFE20                  	MOV	EAX,DWORD [-480+EBP]
-   440 0000055E A9 00000001                     	TEST	EAX,1
-   441 00000563 74 04                           	JE	L11
-   442 00000565 C6 45 C5 4C                     	MOV	BYTE [-59+EBP],76
-   443 00000569                                 L11:
-   444 00000569 A9 00000002                     	TEST	EAX,2
-   445 0000056E 74 04                           	JE	L12
-   446 00000570 C6 45 C7 52                     	MOV	BYTE [-57+EBP],82
-   447 00000574                                 L12:
-   448 00000574 83 E0 04                        	AND	EAX,4
-   449 00000577 74 04                           	JE	L13
-   450 00000579 C6 45 C6 43                     	MOV	BYTE [-58+EBP],67
-   451 0000057D                                 L13:
-   452 0000057D 6A 0F                           	PUSH	15
-   453 0000057F 53                              	PUSH	EBX
-   454 00000580 6A 0E                           	PUSH	14
-   455 00000582 6A 07                           	PUSH	7
-   456 00000584 6A 20                           	PUSH	32
-   457 00000586 6A 20                           	PUSH	32
-   458 00000588 FF B5 FFFFFCDC                  	PUSH	DWORD [-804+EBP]
-   459 0000058E E8 000000DC                     	CALL	_putfonts8_asc_sht
-   460 00000593 8B 85 FFFFFE18                  	MOV	EAX,DWORD [-488+EBP]
-   461 00000599 03 BD FFFFFE1C                  	ADD	EDI,DWORD [-484+EBP]
-   462 0000059F 83 C4 1C                        	ADD	ESP,28
-   463 000005A2 01 85 FFFFFCE8                  	ADD	DWORD [-792+EBP],EAX
-   464 000005A8 78 71                           	JS	L33
-   465 000005AA                                 L14:
-   466 000005AA 85 FF                           	TEST	EDI,EDI
-   467 000005AC 78 69                           	JS	L34
-   468 000005AE                                 L15:
-   469 000005AE 0F BF 05 00000FF4               	MOVSX	EAX,WORD [4084]
-   470 000005B5 48                              	DEC	EAX
-   471 000005B6 39 85 FFFFFCE8                  	CMP	DWORD [-792+EBP],EAX
-   472 000005BC 7E 06                           	JLE	L16
-   473 000005BE 89 85 FFFFFCE8                  	MOV	DWORD [-792+EBP],EAX
-   474 000005C4                                 L16:
-   475 000005C4 0F BF 05 00000FF6               	MOVSX	EAX,WORD [4086]
-   476 000005CB 48                              	DEC	EAX
-   477 000005CC 39 C7                           	CMP	EDI,EAX
-   478 000005CE 7E 02                           	JLE	L17
-   479 000005D0 89 C7                           	MOV	EDI,EAX
-   480 000005D2                                 L17:
-   481 000005D2 57                              	PUSH	EDI
-   482 000005D3 FF B5 FFFFFCE8                  	PUSH	DWORD [-792+EBP]
-   483 000005D9 68 [0000005B]                   	PUSH	LC6
-   484 000005DE 53                              	PUSH	EBX
-   485 000005DF E8 [00000000]                   	CALL	_sprintf
-   486 000005E4 6A 0A                           	PUSH	10
-   487 000005E6 53                              	PUSH	EBX
-   488 000005E7 6A 0E                           	PUSH	14
-   489 000005E9 6A 07                           	PUSH	7
-   490 000005EB 6A 00                           	PUSH	0
-   491 000005ED 6A 00                           	PUSH	0
-   492 000005EF FF B5 FFFFFCDC                  	PUSH	DWORD [-804+EBP]
-   493 000005F5 E8 00000075                     	CALL	_putfonts8_asc_sht
-   494 000005FA 83 C4 2C                        	ADD	ESP,44
-   495 000005FD 57                              	PUSH	EDI
-   496 000005FE FF B5 FFFFFCE8                  	PUSH	DWORD [-792+EBP]
-   497 00000604 FF B5 FFFFFCD8                  	PUSH	DWORD [-808+EBP]
-   498 0000060A E8 [00000000]                   	CALL	_sheet_slide
-   499 0000060F 83 C4 0C                        	ADD	ESP,12
-   500 00000612 E9 FFFFFD7F                     	JMP	L2
-   501 00000617                                 L34:
-   502 00000617 31 FF                           	XOR	EDI,EDI
-   503 00000619 EB 93                           	JMP	L15
-   504 0000061B                                 L33:
-   505 0000061B C7 85 FFFFFCE8 00000000         	MOV	DWORD [-792+EBP],0
-   506 00000625 EB 83                           	JMP	L14
-   507 00000627                                 L29:
-   508 00000627 68 [00000000]                   	PUSH	_keyfifo
-   509 0000062C E8 [00000000]                   	CALL	_fifo8_get
-   510 00000631 89 C3                           	MOV	EBX,EAX
-   511 00000633 E8 [00000000]                   	CALL	_io_sti
-   512 00000638 53                              	PUSH	EBX
-   513 00000639 8D 5D C4                        	LEA	EBX,DWORD [-60+EBP]
-   514 0000063C 68 [00000066]                   	PUSH	LC4
-   515 00000641 53                              	PUSH	EBX
-   516 00000642 E8 [00000000]                   	CALL	_sprintf
-   517 00000647 6A 02                           	PUSH	2
-   518 00000649 53                              	PUSH	EBX
-   519 0000064A 6A 0E                           	PUSH	14
-   520 0000064C 6A 07                           	PUSH	7
-   521 0000064E 6A 20                           	PUSH	32
-   522 00000650 6A 00                           	PUSH	0
-   523 00000652 FF B5 FFFFFCDC                  	PUSH	DWORD [-804+EBP]
-   524 00000658 E8 00000012                     	CALL	_putfonts8_asc_sht
-   525 0000065D 83 C4 2C                        	ADD	ESP,44
-   526 00000660 E9 FFFFFD31                     	JMP	L2
-   527 00000665                                 L28:
-   528 00000665 E8 [00000000]                   	CALL	_io_sti
-   529 0000066A E9 FFFFFD27                     	JMP	L2
-   530 0000066F                                 	GLOBAL	_putfonts8_asc_sht
-   531 0000066F                                 _putfonts8_asc_sht:
-   532 0000066F 55                              	PUSH	EBP
-   533 00000670 89 E5                           	MOV	EBP,ESP
-   534 00000672 57                              	PUSH	EDI
-   535 00000673 56                              	PUSH	ESI
-   536 00000674 53                              	PUSH	EBX
-   537 00000675 83 EC 0C                        	SUB	ESP,12
-   538 00000678 8B 45 08                        	MOV	EAX,DWORD [8+EBP]
-   539 0000067B 8B 7D 10                        	MOV	EDI,DWORD [16+EBP]
-   540 0000067E 89 45 F0                        	MOV	DWORD [-16+EBP],EAX
-   541 00000681 8B 5D 14                        	MOV	EBX,DWORD [20+EBP]
-   542 00000684 8B 45 0C                        	MOV	EAX,DWORD [12+EBP]
-   543 00000687 89 45 EC                        	MOV	DWORD [-20+EBP],EAX
-   544 0000068A 8B 45 1C                        	MOV	EAX,DWORD [28+EBP]
-   545 0000068D 89 45 E8                        	MOV	DWORD [-24+EBP],EAX
-   546 00000690 8D 47 0F                        	LEA	EAX,DWORD [15+EDI]
-   547 00000693 50                              	PUSH	EAX
-   548 00000694 8B 45 EC                        	MOV	EAX,DWORD [-20+EBP]
-   549 00000697 8B 75 20                        	MOV	ESI,DWORD [32+EBP]
-   550 0000069A 0F BE DB                        	MOVSX	EBX,BL
-   551 0000069D 8D 34 F0                        	LEA	ESI,DWORD [EAX+ESI*8]
-   552 000006A0 8D 46 FF                        	LEA	EAX,DWORD [-1+ESI]
-   553 000006A3 50                              	PUSH	EAX
-   554 000006A4 57                              	PUSH	EDI
-   555 000006A5 FF 75 EC                        	PUSH	DWORD [-20+EBP]
-   556 000006A8 0F B6 45 18                     	MOVZX	EAX,BYTE [24+EBP]
-   557 000006AC 50                              	PUSH	EAX
-   558 000006AD 8B 45 F0                        	MOV	EAX,DWORD [-16+EBP]
-   559 000006B0 FF 70 04                        	PUSH	DWORD [4+EAX]
-   560 000006B3 FF 30                           	PUSH	DWORD [EAX]
-   561 000006B5 E8 [00000000]                   	CALL	_boxfill8
-   562 000006BA FF 75 E8                        	PUSH	DWORD [-24+EBP]
-   563 000006BD 53                              	PUSH	EBX
-   564 000006BE 57                              	PUSH	EDI
-   565 000006BF FF 75 EC                        	PUSH	DWORD [-20+EBP]
-   566 000006C2 8B 45 F0                        	MOV	EAX,DWORD [-16+EBP]
-   567 000006C5 FF 70 04                        	PUSH	DWORD [4+EAX]
-   568 000006C8 FF 30                           	PUSH	DWORD [EAX]
-   569 000006CA E8 [00000000]                   	CALL	_putfonts8_asc
-   570 000006CF 89 7D 10                        	MOV	DWORD [16+EBP],EDI
-   571 000006D2 8D 47 10                        	LEA	EAX,DWORD [16+EDI]
-   572 000006D5 89 75 14                        	MOV	DWORD [20+EBP],ESI
-   573 000006D8 89 45 18                        	MOV	DWORD [24+EBP],EAX
-   574 000006DB 83 C4 34                        	ADD	ESP,52
-   575 000006DE 8B 45 EC                        	MOV	EAX,DWORD [-20+EBP]
-   576 000006E1 89 45 0C                        	MOV	DWORD [12+EBP],EAX
-   577 000006E4 8B 45 F0                        	MOV	EAX,DWORD [-16+EBP]
-   578 000006E7 89 45 08                        	MOV	DWORD [8+EBP],EAX
-   579 000006EA 8D 65 F4                        	LEA	ESP,DWORD [-12+EBP]
-   580 000006ED 5B                              	POP	EBX
-   581 000006EE 5E                              	POP	ESI
-   582 000006EF 5F                              	POP	EDI
-   583 000006F0 5D                              	POP	EBP
-   584 000006F1 E9 [00000000]                   	JMP	_sheet_refresh
+    17 00000000                                 	EXTERN	_memtest_sub
+    18 00000000                                 	EXTERN	_memman_init
+    19 00000000                                 	EXTERN	_memman_free
+    20 00000000                                 	EXTERN	_init_palette
+    21 00000000                                 	EXTERN	_shtctl_init
+    22 00000000                                 	EXTERN	_sheet_alloc
+    23 00000000                                 	EXTERN	_memman_alloc_4k
+    24 00000000                                 	EXTERN	_sheet_setbuf
+    25 00000000                                 	EXTERN	_init_screen8
+    26 00000000                                 	EXTERN	_init_mouse_cursor8
+    27 00000000                                 	EXTERN	_make_window8
+    28 00000000                                 	EXTERN	_sheet_slide
+    29 00000000                                 	EXTERN	_sheet_updown
+    30 00000000                                 	EXTERN	_putfonts8_asc
+    31 00000000                                 	EXTERN	_sprintf
+    32 00000000                                 	EXTERN	_memman_total
+    33 00000000                                 	EXTERN	_sheet_refresh
+    34 00000000                                 	EXTERN	_io_cli
+    35 00000000                                 	EXTERN	_fifo32_status
+    36 00000000                                 	EXTERN	_fifo32_get
+    37 00000000                                 	EXTERN	_boxfill8
+    38 00000000                                 	EXTERN	_mouse_decode
+    39 00000000                                 	EXTERN	_keytable
+    40 00000000                                 [FILE "bootpack.c"]
+    41                                          [SECTION .data]
+    42 00000000                                 _keytable:
+    43 00000000 00                              	DB	0
+    44 00000001 00                              	DB	0
+    45 00000002 31                              	DB	49
+    46 00000003 32                              	DB	50
+    47 00000004 33                              	DB	51
+    48 00000005 34                              	DB	52
+    49 00000006 35                              	DB	53
+    50 00000007 36                              	DB	54
+    51 00000008 37                              	DB	55
+    52 00000009 38                              	DB	56
+    53 0000000A 39                              	DB	57
+    54 0000000B 30                              	DB	48
+    55 0000000C 2D                              	DB	45
+    56 0000000D 5E                              	DB	94
+    57 0000000E 00                              	DB	0
+    58 0000000F 00                              	DB	0
+    59 00000010 51                              	DB	81
+    60 00000011 57                              	DB	87
+    61 00000012 45                              	DB	69
+    62 00000013 52                              	DB	82
+    63 00000014 54                              	DB	84
+    64 00000015 59                              	DB	89
+    65 00000016 55                              	DB	85
+    66 00000017 49                              	DB	73
+    67 00000018 4F                              	DB	79
+    68 00000019 50                              	DB	80
+    69 0000001A 5B                              	DB	91
+    70 0000001B 5D                              	DB	93
+    71 0000001C 00                              	DB	0
+    72 0000001D 00                              	DB	0
+    73 0000001E 41                              	DB	65
+    74 0000001F 53                              	DB	83
+    75 00000020 44                              	DB	68
+    76 00000021 46                              	DB	70
+    77 00000022 47                              	DB	71
+    78 00000023 48                              	DB	72
+    79 00000024 4A                              	DB	74
+    80 00000025 4B                              	DB	75
+    81 00000026 4C                              	DB	76
+    82 00000027 3B                              	DB	59
+    83 00000028 27                              	DB	39
+    84 00000029 00                              	DB	0
+    85 0000002A 00                              	DB	0
+    86 0000002B 5D                              	DB	93
+    87 0000002C 5A                              	DB	90
+    88 0000002D 58                              	DB	88
+    89 0000002E 43                              	DB	67
+    90 0000002F 56                              	DB	86
+    91 00000030 42                              	DB	66
+    92 00000031 4E                              	DB	78
+    93 00000032 4D                              	DB	77
+    94 00000033 2C                              	DB	44
+    95 00000034 2E                              	DB	46
+    96 00000035 2F                              	DB	47
+    97 00000036 00                              	DB	0
+    98 00000037 2A                              	DB	42
+    99 00000038 00                              	DB	0
+   100 00000039 20                              	DB	32
+   101 0000003A 00                              	DB	0
+   102 0000003B 00                              	DB	0
+   103 0000003C 00                              	DB	0
+   104 0000003D 00                              	DB	0
+   105 0000003E 00                              	DB	0
+   106 0000003F 00                              	DB	0
+   107 00000040 00                              	DB	0
+   108 00000041 00                              	DB	0
+   109 00000042 00                              	DB	0
+   110 00000043 00                              	DB	0
+   111 00000044 00                              	DB	0
+   112 00000045 00                              	DB	0
+   113 00000046 00                              	DB	0
+   114 00000047 37                              	DB	55
+   115 00000048 38                              	DB	56
+   116 00000049 39                              	DB	57
+   117 0000004A 2D                              	DB	45
+   118 0000004B 34                              	DB	52
+   119 0000004C 35                              	DB	53
+   120 0000004D 36                              	DB	54
+   121 0000004E 2B                              	DB	43
+   122 0000004F 31                              	DB	49
+   123 00000050 32                              	DB	50
+   124 00000051 33                              	DB	51
+   125 00000052 30                              	DB	48
+   126 00000053 2E                              	DB	46
+   127 00000054                                 LC0:
+   128 00000054 66 79 74 00                     	DB	"fyt",0x00
+   129 00000058                                 LC1:
+   130 00000058 66 79 74 2C 20 49 20 6C 6F 76   	DB	"fyt, I love you~",0x00
+       00000062 65 20 79 6F 75 7E 00 
+   131 00000069                                 LC2:
+   132 00000069 28 25 64 2C 25 64 29 00         	DB	"(%d,%d)",0x00
+   133 00000071                                 LC3:
+   134 00000071 4D 65 6D 6F 72 79 20 25 64 4D   	DB	"Memory %dMB; free: %dKB.",0x00
+       0000007B 42 3B 20 66 72 65 65 3A 20 25 
+       00000085 64 4B 42 2E 00 
+   135 0000008A                                 LC10:
+   136 0000008A 33 20 5B 73 65 63 5D 00         	DB	"3 [sec]",0x00
+   137 00000092                                 LC8:
+   138 00000092 31 30 20 5B 73 65 63 5D 00      	DB	"10 [sec]",0x00
+   139 0000009B                                 LC9:
+   140 0000009B 25 30 31 30 64 00               	DB	"%010d",0x00
+   141 000000A1                                 LC6:
+   142 000000A1 5B 6C 63 72 20 25 34 64 20 25   	DB	"[lcr %4d %4d]",0x00
+       000000AB 34 64 5D 00 
+   143 000000AF                                 LC7:
+   144 000000AF 28 25 33 64 2C 20 25 33 64 29   	DB	"(%3d, %3d)",0x00
+       000000B9 00 
+   145 000000BA                                 LC4:
+   146 000000BA 25 30 32 58 00                  	DB	"%02X",0x00
+   147 000000BF                                 LC5:
+   148 000000BF 20 00                           	DB	" ",0x00
+   149                                          [SECTION .text]
+   150 00000000                                 	GLOBAL	_HariMain
+   151 00000000                                 _HariMain:
+   152 00000000 55                              	PUSH	EBP
+   153 00000001 89 E5                           	MOV	EBP,ESP
+   154 00000003 57                              	PUSH	EDI
+   155 00000004 56                              	PUSH	ESI
+   156 00000005 53                              	PUSH	EBX
+   157 00000006 8D B5 FFFFFE94                  	LEA	ESI,DWORD [-364+EBP]
+   158 0000000C 81 EC 00000390                  	SUB	ESP,912
+   159 00000012 C7 85 FFFFFC84 00000000         	MOV	DWORD [-892+EBP],0
+   160 0000001C E8 [00000000]                   	CALL	_init_gdtidt
+   161 00000021 E8 [00000000]                   	CALL	_init_pic
+   162 00000026 E8 [00000000]                   	CALL	_io_sti
+   163 0000002B E8 [00000000]                   	CALL	_init_pit
+   164 00000030 8D 85 FFFFFC94                  	LEA	EAX,DWORD [-876+EBP]
+   165 00000036 50                              	PUSH	EAX
+   166 00000037 68 00000080                     	PUSH	128
+   167 0000003C 56                              	PUSH	ESI
+   168 0000003D E8 [00000000]                   	CALL	_fifo32_init
+   169 00000042 68 00000100                     	PUSH	256
+   170 00000047 56                              	PUSH	ESI
+   171 00000048 E8 [00000000]                   	CALL	_init_keyboard
+   172 0000004D 8D 45 B4                        	LEA	EAX,DWORD [-76+EBP]
+   173 00000050 50                              	PUSH	EAX
+   174 00000051 68 00000200                     	PUSH	512
+   175 00000056 56                              	PUSH	ESI
+   176 00000057 E8 [00000000]                   	CALL	_enable_mouse
+   177 0000005C 83 C4 20                        	ADD	ESP,32
+   178 0000005F 68 000000F8                     	PUSH	248
+   179 00000064 6A 21                           	PUSH	33
+   180 00000066 E8 [00000000]                   	CALL	_io_out8
+   181 0000006B 68 000000EF                     	PUSH	239
+   182 00000070 68 000000A1                     	PUSH	161
+   183 00000075 E8 [00000000]                   	CALL	_io_out8
+   184 0000007A E8 [00000000]                   	CALL	_timer_alloc
+   185 0000007F 6A 0A                           	PUSH	10
+   186 00000081 56                              	PUSH	ESI
+   187 00000082 89 C3                           	MOV	EBX,EAX
+   188 00000084 50                              	PUSH	EAX
+   189 00000085 E8 [00000000]                   	CALL	_timer_init
+   190 0000008A 68 000003E8                     	PUSH	1000
+   191 0000008F 53                              	PUSH	EBX
+   192 00000090 E8 [00000000]                   	CALL	_timer_settime
+   193 00000095 83 C4 24                        	ADD	ESP,36
+   194 00000098 E8 [00000000]                   	CALL	_timer_alloc
+   195 0000009D 6A 03                           	PUSH	3
+   196 0000009F 89 C3                           	MOV	EBX,EAX
+   197 000000A1 56                              	PUSH	ESI
+   198 000000A2 50                              	PUSH	EAX
+   199 000000A3 E8 [00000000]                   	CALL	_timer_init
+   200 000000A8 68 0000012C                     	PUSH	300
+   201 000000AD 53                              	PUSH	EBX
+   202 000000AE E8 [00000000]                   	CALL	_timer_settime
+   203 000000B3 E8 [00000000]                   	CALL	_timer_alloc
+   204 000000B8 6A 01                           	PUSH	1
+   205 000000BA 56                              	PUSH	ESI
+   206 000000BB 50                              	PUSH	EAX
+   207 000000BC 89 85 FFFFFC74                  	MOV	DWORD [-908+EBP],EAX
+   208 000000C2 E8 [00000000]                   	CALL	_timer_init
+   209 000000C7 83 C4 20                        	ADD	ESP,32
+   210 000000CA 6A 32                           	PUSH	50
+   211 000000CC FF B5 FFFFFC74                  	PUSH	DWORD [-908+EBP]
+   212 000000D2 E8 [00000000]                   	CALL	_timer_settime
+   213 000000D7 68 BFFFFFFF                     	PUSH	-1073741825
+   214 000000DC 68 00400000                     	PUSH	4194304
+   215 000000E1 E8 [00000000]                   	CALL	_memtest_sub
+   216 000000E6 68 003C0000                     	PUSH	3932160
+   217 000000EB 89 85 FFFFFC88                  	MOV	DWORD [-888+EBP],EAX
+   218 000000F1 E8 [00000000]                   	CALL	_memman_init
+   219 000000F6 68 0009E000                     	PUSH	647168
+   220 000000FB 68 00001000                     	PUSH	4096
+   221 00000100 68 003C0000                     	PUSH	3932160
+   222 00000105 E8 [00000000]                   	CALL	_memman_free
+   223 0000010A 8B 85 FFFFFC88                  	MOV	EAX,DWORD [-888+EBP]
+   224 00000110 83 C4 20                        	ADD	ESP,32
+   225 00000113 2D 00400000                     	SUB	EAX,4194304
+   226 00000118 50                              	PUSH	EAX
+   227 00000119 68 00400000                     	PUSH	4194304
+   228 0000011E 68 003C0000                     	PUSH	3932160
+   229 00000123 E8 [00000000]                   	CALL	_memman_free
+   230 00000128 E8 [00000000]                   	CALL	_init_palette
+   231 0000012D 0F BF 05 00000FF6               	MOVSX	EAX,WORD [4086]
+   232 00000134 50                              	PUSH	EAX
+   233 00000135 0F BF 05 00000FF4               	MOVSX	EAX,WORD [4084]
+   234 0000013C 50                              	PUSH	EAX
+   235 0000013D FF 35 00000FF8                  	PUSH	DWORD [4088]
+   236 00000143 68 003C0000                     	PUSH	3932160
+   237 00000148 E8 [00000000]                   	CALL	_shtctl_init
+   238 0000014D 89 C3                           	MOV	EBX,EAX
+   239 0000014F 50                              	PUSH	EAX
+   240 00000150 E8 [00000000]                   	CALL	_sheet_alloc
+   241 00000155 83 C4 20                        	ADD	ESP,32
+   242 00000158 53                              	PUSH	EBX
+   243 00000159 89 85 FFFFFC80                  	MOV	DWORD [-896+EBP],EAX
+   244 0000015F E8 [00000000]                   	CALL	_sheet_alloc
+   245 00000164 53                              	PUSH	EBX
+   246 00000165 8D 9D FFFFFEB4                  	LEA	EBX,DWORD [-332+EBP]
+   247 0000016B 89 85 FFFFFC7C                  	MOV	DWORD [-900+EBP],EAX
+   248 00000171 E8 [00000000]                   	CALL	_sheet_alloc
+   249 00000176 0F BF 15 00000FF6               	MOVSX	EDX,WORD [4086]
+   250 0000017D 89 85 FFFFFC78                  	MOV	DWORD [-904+EBP],EAX
+   251 00000183 0F BF 05 00000FF4               	MOVSX	EAX,WORD [4084]
+   252 0000018A 0F AF C2                        	IMUL	EAX,EDX
+   253 0000018D 50                              	PUSH	EAX
+   254 0000018E 68 003C0000                     	PUSH	3932160
+   255 00000193 E8 [00000000]                   	CALL	_memman_alloc_4k
+   256 00000198 68 00003200                     	PUSH	12800
+   257 0000019D 68 003C0000                     	PUSH	3932160
+   258 000001A2 89 C7                           	MOV	EDI,EAX
+   259 000001A4 E8 [00000000]                   	CALL	_memman_alloc_4k
+   260 000001A9 6A FF                           	PUSH	-1
+   261 000001AB 89 C6                           	MOV	ESI,EAX
+   262 000001AD 0F BF 05 00000FF6               	MOVSX	EAX,WORD [4086]
+   263 000001B4 50                              	PUSH	EAX
+   264 000001B5 0F BF 05 00000FF4               	MOVSX	EAX,WORD [4084]
+   265 000001BC 50                              	PUSH	EAX
+   266 000001BD 57                              	PUSH	EDI
+   267 000001BE FF B5 FFFFFC80                  	PUSH	DWORD [-896+EBP]
+   268 000001C4 E8 [00000000]                   	CALL	_sheet_setbuf
+   269 000001C9 83 C4 2C                        	ADD	ESP,44
+   270 000001CC 6A 63                           	PUSH	99
+   271 000001CE 6A 10                           	PUSH	16
+   272 000001D0 6A 10                           	PUSH	16
+   273 000001D2 53                              	PUSH	EBX
+   274 000001D3 FF B5 FFFFFC7C                  	PUSH	DWORD [-900+EBP]
+   275 000001D9 E8 [00000000]                   	CALL	_sheet_setbuf
+   276 000001DE 6A FF                           	PUSH	-1
+   277 000001E0 6A 50                           	PUSH	80
+   278 000001E2 68 000000A0                     	PUSH	160
+   279 000001E7 56                              	PUSH	ESI
+   280 000001E8 FF B5 FFFFFC78                  	PUSH	DWORD [-904+EBP]
+   281 000001EE E8 [00000000]                   	CALL	_sheet_setbuf
+   282 000001F3 83 C4 28                        	ADD	ESP,40
+   283 000001F6 0F BF 05 00000FF6               	MOVSX	EAX,WORD [4086]
+   284 000001FD 50                              	PUSH	EAX
+   285 000001FE 0F BF 05 00000FF4               	MOVSX	EAX,WORD [4084]
+   286 00000205 50                              	PUSH	EAX
+   287 00000206 57                              	PUSH	EDI
+   288 00000207 E8 [00000000]                   	CALL	_init_screen8
+   289 0000020C 6A 63                           	PUSH	99
+   290 0000020E 53                              	PUSH	EBX
+   291 0000020F BB 00000002                     	MOV	EBX,2
+   292 00000214 E8 [00000000]                   	CALL	_init_mouse_cursor8
+   293 00000219 68 [00000054]                   	PUSH	LC0
+   294 0000021E 6A 50                           	PUSH	80
+   295 00000220 68 000000A0                     	PUSH	160
+   296 00000225 56                              	PUSH	ESI
+   297 00000226 E8 [00000000]                   	CALL	_make_window8
+   298 0000022B 83 C4 24                        	ADD	ESP,36
+   299 0000022E 6A 07                           	PUSH	7
+   300 00000230 6A 10                           	PUSH	16
+   301 00000232 68 00000090                     	PUSH	144
+   302 00000237 6A 2E                           	PUSH	46
+   303 00000239 6A 08                           	PUSH	8
+   304 0000023B FF B5 FFFFFC78                  	PUSH	DWORD [-904+EBP]
+   305 00000241 E8 0000059E                     	CALL	_make_textbox8
+   306 00000246 6A 00                           	PUSH	0
+   307 00000248 6A 00                           	PUSH	0
+   308 0000024A FF B5 FFFFFC80                  	PUSH	DWORD [-896+EBP]
+   309 00000250 C7 85 FFFFFC6C 00000008         	MOV	DWORD [-916+EBP],8
+   310 0000025A C7 85 FFFFFC68 00000007         	MOV	DWORD [-920+EBP],7
+   311 00000264 E8 [00000000]                   	CALL	_sheet_slide
+   312 00000269 83 C4 24                        	ADD	ESP,36
+   313 0000026C 0F BF 05 00000FF4               	MOVSX	EAX,WORD [4084]
+   314 00000273 8D 48 F0                        	LEA	ECX,DWORD [-16+EAX]
+   315 00000276 89 C8                           	MOV	EAX,ECX
+   316 00000278 99                              	CDQ
+   317 00000279 F7 FB                           	IDIV	EBX
+   318 0000027B 89 85 FFFFFC90                  	MOV	DWORD [-880+EBP],EAX
+   319 00000281 0F BF 05 00000FF6               	MOVSX	EAX,WORD [4086]
+   320 00000288 8D 48 D4                        	LEA	ECX,DWORD [-44+EAX]
+   321 0000028B 89 C8                           	MOV	EAX,ECX
+   322 0000028D 99                              	CDQ
+   323 0000028E F7 FB                           	IDIV	EBX
+   324 00000290 50                              	PUSH	EAX
+   325 00000291 89 85 FFFFFC8C                  	MOV	DWORD [-884+EBP],EAX
+   326 00000297 FF B5 FFFFFC90                  	PUSH	DWORD [-880+EBP]
+   327 0000029D FF B5 FFFFFC7C                  	PUSH	DWORD [-900+EBP]
+   328 000002A3 8D 5D C4                        	LEA	EBX,DWORD [-60+EBP]
+   329 000002A6 E8 [00000000]                   	CALL	_sheet_slide
+   330 000002AB 6A 48                           	PUSH	72
+   331 000002AD 6A 50                           	PUSH	80
+   332 000002AF FF B5 FFFFFC78                  	PUSH	DWORD [-904+EBP]
+   333 000002B5 E8 [00000000]                   	CALL	_sheet_slide
+   334 000002BA 6A 00                           	PUSH	0
+   335 000002BC FF B5 FFFFFC80                  	PUSH	DWORD [-896+EBP]
+   336 000002C2 E8 [00000000]                   	CALL	_sheet_updown
+   337 000002C7 83 C4 20                        	ADD	ESP,32
+   338 000002CA 6A 01                           	PUSH	1
+   339 000002CC FF B5 FFFFFC78                  	PUSH	DWORD [-904+EBP]
+   340 000002D2 E8 [00000000]                   	CALL	_sheet_updown
+   341 000002D7 6A 02                           	PUSH	2
+   342 000002D9 FF B5 FFFFFC7C                  	PUSH	DWORD [-900+EBP]
+   343 000002DF E8 [00000000]                   	CALL	_sheet_updown
+   344 000002E4 68 [00000058]                   	PUSH	LC1
+   345 000002E9 6A 02                           	PUSH	2
+   346 000002EB 68 000000A8                     	PUSH	168
+   347 000002F0 6A 6C                           	PUSH	108
+   348 000002F2 0F BF 05 00000FF4               	MOVSX	EAX,WORD [4084]
+   349 000002F9 50                              	PUSH	EAX
+   350 000002FA FF B5 FFFFFC80                  	PUSH	DWORD [-896+EBP]
+   351 00000300 E8 [00000000]                   	CALL	_putfonts8_asc
+   352 00000305 83 C4 28                        	ADD	ESP,40
+   353 00000308 FF B5 FFFFFC8C                  	PUSH	DWORD [-884+EBP]
+   354 0000030E FF B5 FFFFFC90                  	PUSH	DWORD [-880+EBP]
+   355 00000314 68 [00000069]                   	PUSH	LC2
+   356 00000319 53                              	PUSH	EBX
+   357 0000031A E8 [00000000]                   	CALL	_sprintf
+   358 0000031F 53                              	PUSH	EBX
+   359 00000320 6A 01                           	PUSH	1
+   360 00000322 6A 64                           	PUSH	100
+   361 00000324 6A 10                           	PUSH	16
+   362 00000326 0F BF 05 00000FF4               	MOVSX	EAX,WORD [4084]
+   363 0000032D 50                              	PUSH	EAX
+   364 0000032E 57                              	PUSH	EDI
+   365 0000032F E8 [00000000]                   	CALL	_putfonts8_asc
+   366 00000334 83 C4 28                        	ADD	ESP,40
+   367 00000337 68 003C0000                     	PUSH	3932160
+   368 0000033C E8 [00000000]                   	CALL	_memman_total
+   369 00000341 C1 E8 0A                        	SHR	EAX,10
+   370 00000344 C1 AD FFFFFC88 14               	SHR	DWORD [-888+EBP],20
+   371 0000034B 89 04 24                        	MOV	DWORD [ESP],EAX
+   372 0000034E FF B5 FFFFFC88                  	PUSH	DWORD [-888+EBP]
+   373 00000354 68 [00000071]                   	PUSH	LC3
+   374 00000359 53                              	PUSH	EBX
+   375 0000035A E8 [00000000]                   	CALL	_sprintf
+   376 0000035F 53                              	PUSH	EBX
+   377 00000360 6A 07                           	PUSH	7
+   378 00000362 6A 40                           	PUSH	64
+   379 00000364 6A 00                           	PUSH	0
+   380 00000366 0F BF 05 00000FF4               	MOVSX	EAX,WORD [4084]
+   381 0000036D 50                              	PUSH	EAX
+   382 0000036E 57                              	PUSH	EDI
+   383 0000036F E8 [00000000]                   	CALL	_putfonts8_asc
+   384 00000374 83 C4 28                        	ADD	ESP,40
+   385 00000377 0F BF 05 00000FF6               	MOVSX	EAX,WORD [4086]
+   386 0000037E 50                              	PUSH	EAX
+   387 0000037F 0F BF 05 00000FF4               	MOVSX	EAX,WORD [4084]
+   388 00000386 50                              	PUSH	EAX
+   389 00000387 6A 00                           	PUSH	0
+   390 00000389 6A 00                           	PUSH	0
+   391 0000038B FF B5 FFFFFC80                  	PUSH	DWORD [-896+EBP]
+   392 00000391                                 L30:
+   393 00000391 E8 [00000000]                   	CALL	_sheet_refresh
+   394 00000396 83 C4 14                        	ADD	ESP,20
+   395 00000399                                 L2:
+   396 00000399 8D B5 FFFFFE94                  	LEA	ESI,DWORD [-364+EBP]
+   397 0000039F FF 85 FFFFFC84                  	INC	DWORD [-892+EBP]
+   398 000003A5 E8 [00000000]                   	CALL	_io_cli
+   399 000003AA 56                              	PUSH	ESI
+   400 000003AB E8 [00000000]                   	CALL	_fifo32_status
+   401 000003B0 5A                              	POP	EDX
+   402 000003B1 85 C0                           	TEST	EAX,EAX
+   403 000003B3 0F 84 0000039A                  	JE	L33
+   404 000003B9 56                              	PUSH	ESI
+   405 000003BA E8 [00000000]                   	CALL	_fifo32_get
+   406 000003BF 89 C3                           	MOV	EBX,EAX
+   407 000003C1 E8 [00000000]                   	CALL	_io_sti
+   408 000003C6 5F                              	POP	EDI
+   409 000003C7 8D 83 FFFFFF00                  	LEA	EAX,DWORD [-256+EBX]
+   410 000003CD 3D 000000FF                     	CMP	EAX,255
+   411 000003D2 0F 86 00000280                  	JBE	L34
+   412 000003D8 8D 83 FFFFFE00                  	LEA	EAX,DWORD [-512+EBX]
+   413 000003DE 3D 000000FF                     	CMP	EAX,255
+   414 000003E3 0F 86 00000119                  	JBE	L35
+   415 000003E9 83 FB 0A                        	CMP	EBX,10
+   416 000003EC 0F 84 000000C7                  	JE	L36
+   417 000003F2 83 FB 03                        	CMP	EBX,3
+   418 000003F5 0F 84 00000092                  	JE	L37
+   419 000003FB 83 FB 01                        	CMP	EBX,1
+   420 000003FE 7F 99                           	JG	L2
+   421 00000400 85 DB                           	TEST	EBX,EBX
+   422 00000402 74 6F                           	JE	L28
+   423 00000404 6A 00                           	PUSH	0
+   424 00000406 56                              	PUSH	ESI
+   425 00000407 FF B5 FFFFFC74                  	PUSH	DWORD [-908+EBP]
+   426 0000040D E8 [00000000]                   	CALL	_timer_init
+   427 00000412 C7 85 FFFFFC68 00000000         	MOV	DWORD [-920+EBP],0
+   428 0000041C                                 L32:
+   429 0000041C 83 C4 0C                        	ADD	ESP,12
+   430 0000041F 6A 32                           	PUSH	50
+   431 00000421 FF B5 FFFFFC74                  	PUSH	DWORD [-908+EBP]
+   432 00000427 E8 [00000000]                   	CALL	_timer_settime
+   433 0000042C 8B 9D FFFFFC78                  	MOV	EBX,DWORD [-904+EBP]
+   434 00000432 8B 85 FFFFFC6C                  	MOV	EAX,DWORD [-916+EBP]
+   435 00000438 6A 3D                           	PUSH	61
+   436 0000043A 83 C0 07                        	ADD	EAX,7
+   437 0000043D 50                              	PUSH	EAX
+   438 0000043E 6A 2E                           	PUSH	46
+   439 00000440 FF B5 FFFFFC6C                  	PUSH	DWORD [-916+EBP]
+   440 00000446 FF B5 FFFFFC68                  	PUSH	DWORD [-920+EBP]
+   441 0000044C FF 73 04                        	PUSH	DWORD [4+EBX]
+   442 0000044F FF 33                           	PUSH	DWORD [EBX]
+   443 00000451 E8 [00000000]                   	CALL	_boxfill8
+   444 00000456 8B 85 FFFFFC6C                  	MOV	EAX,DWORD [-916+EBP]
+   445 0000045C 83 C4 24                        	ADD	ESP,36
+   446 0000045F 83 C0 08                        	ADD	EAX,8
+   447 00000462 6A 3E                           	PUSH	62
+   448 00000464 50                              	PUSH	EAX
+   449 00000465 6A 2E                           	PUSH	46
+   450 00000467 FF B5 FFFFFC6C                  	PUSH	DWORD [-916+EBP]
+   451 0000046D 53                              	PUSH	EBX
+   452 0000046E E9 FFFFFF1E                     	JMP	L30
+   453 00000473                                 L28:
+   454 00000473 6A 01                           	PUSH	1
+   455 00000475 56                              	PUSH	ESI
+   456 00000476 FF B5 FFFFFC74                  	PUSH	DWORD [-908+EBP]
+   457 0000047C E8 [00000000]                   	CALL	_timer_init
+   458 00000481 C7 85 FFFFFC68 00000007         	MOV	DWORD [-920+EBP],7
+   459 0000048B EB 8F                           	JMP	L32
+   460 0000048D                                 L37:
+   461 0000048D 6A 07                           	PUSH	7
+   462 0000048F 68 [0000008A]                   	PUSH	LC10
+   463 00000494 6A 0E                           	PUSH	14
+   464 00000496 6A 07                           	PUSH	7
+   465 00000498 6A 60                           	PUSH	96
+   466 0000049A 6A 00                           	PUSH	0
+   467 0000049C FF B5 FFFFFC80                  	PUSH	DWORD [-896+EBP]
+   468 000004A2 E8 000002B6                     	CALL	_putfonts8_asc_sht
+   469 000004A7 C7 85 FFFFFC84 00000000         	MOV	DWORD [-892+EBP],0
+   470 000004B1                                 L31:
+   471 000004B1 83 C4 1C                        	ADD	ESP,28
+   472 000004B4 E9 FFFFFEE0                     	JMP	L2
+   473 000004B9                                 L36:
+   474 000004B9 6A 08                           	PUSH	8
+   475 000004BB 8D 5D C4                        	LEA	EBX,DWORD [-60+EBP]
+   476 000004BE 68 [00000092]                   	PUSH	LC8
+   477 000004C3 6A 0E                           	PUSH	14
+   478 000004C5 6A 07                           	PUSH	7
+   479 000004C7 6A 50                           	PUSH	80
+   480 000004C9 6A 00                           	PUSH	0
+   481 000004CB FF B5 FFFFFC80                  	PUSH	DWORD [-896+EBP]
+   482 000004D1 E8 00000287                     	CALL	_putfonts8_asc_sht
+   483 000004D6 FF B5 FFFFFC84                  	PUSH	DWORD [-892+EBP]
+   484 000004DC 68 [0000009B]                   	PUSH	LC9
+   485 000004E1 53                              	PUSH	EBX
+   486 000004E2 E8 [00000000]                   	CALL	_sprintf
+   487 000004E7 83 C4 28                        	ADD	ESP,40
+   488 000004EA 6A 0A                           	PUSH	10
+   489 000004EC 53                              	PUSH	EBX
+   490 000004ED 6A 0E                           	PUSH	14
+   491 000004EF 6A 07                           	PUSH	7
+   492 000004F1 6A 1C                           	PUSH	28
+   493 000004F3 6A 28                           	PUSH	40
+   494 000004F5 FF B5 FFFFFC78                  	PUSH	DWORD [-904+EBP]
+   495 000004FB E8 0000025D                     	CALL	_putfonts8_asc_sht
+   496 00000500 EB AF                           	JMP	L31
+   497 00000502                                 L35:
+   498 00000502 0F B6 C3                        	MOVZX	EAX,BL
+   499 00000505 50                              	PUSH	EAX
+   500 00000506 8D 45 B4                        	LEA	EAX,DWORD [-76+EBP]
+   501 00000509 50                              	PUSH	EAX
+   502 0000050A E8 [00000000]                   	CALL	_mouse_decode
+   503 0000050F 5A                              	POP	EDX
+   504 00000510 59                              	POP	ECX
+   505 00000511 85 C0                           	TEST	EAX,EAX
+   506 00000513 0F 84 FFFFFE80                  	JE	L2
+   507 00000519 FF 75 BC                        	PUSH	DWORD [-68+EBP]
+   508 0000051C FF 75 B8                        	PUSH	DWORD [-72+EBP]
+   509 0000051F 68 [000000A1]                   	PUSH	LC6
+   510 00000524 8D 5D C4                        	LEA	EBX,DWORD [-60+EBP]
+   511 00000527 53                              	PUSH	EBX
+   512 00000528 E8 [00000000]                   	CALL	_sprintf
+   513 0000052D 83 C4 10                        	ADD	ESP,16
+   514 00000530 8B 45 C0                        	MOV	EAX,DWORD [-64+EBP]
+   515 00000533 A9 00000001                     	TEST	EAX,1
+   516 00000538 74 04                           	JE	L14
+   517 0000053A C6 45 C5 4C                     	MOV	BYTE [-59+EBP],76
+   518 0000053E                                 L14:
+   519 0000053E A9 00000002                     	TEST	EAX,2
+   520 00000543 74 04                           	JE	L15
+   521 00000545 C6 45 C7 52                     	MOV	BYTE [-57+EBP],82
+   522 00000549                                 L15:
+   523 00000549 83 E0 04                        	AND	EAX,4
+   524 0000054C 74 04                           	JE	L16
+   525 0000054E C6 45 C6 43                     	MOV	BYTE [-58+EBP],67
+   526 00000552                                 L16:
+   527 00000552 6A 0F                           	PUSH	15
+   528 00000554 53                              	PUSH	EBX
+   529 00000555 6A 0E                           	PUSH	14
+   530 00000557 6A 07                           	PUSH	7
+   531 00000559 6A 20                           	PUSH	32
+   532 0000055B 6A 20                           	PUSH	32
+   533 0000055D FF B5 FFFFFC80                  	PUSH	DWORD [-896+EBP]
+   534 00000563 E8 000001F5                     	CALL	_putfonts8_asc_sht
+   535 00000568 8B 55 B8                        	MOV	EDX,DWORD [-72+EBP]
+   536 0000056B 8B 45 BC                        	MOV	EAX,DWORD [-68+EBP]
+   537 0000056E 83 C4 1C                        	ADD	ESP,28
+   538 00000571 01 85 FFFFFC8C                  	ADD	DWORD [-884+EBP],EAX
+   539 00000577 01 95 FFFFFC90                  	ADD	DWORD [-880+EBP],EDX
+   540 0000057D 0F 88 000000C6                  	JS	L38
+   541 00000583                                 L17:
+   542 00000583 83 BD FFFFFC8C 00               	CMP	DWORD [-884+EBP],0
+   543 0000058A 0F 88 000000AA                  	JS	L39
+   544 00000590                                 L18:
+   545 00000590 0F BF 05 00000FF4               	MOVSX	EAX,WORD [4084]
+   546 00000597 48                              	DEC	EAX
+   547 00000598 39 85 FFFFFC90                  	CMP	DWORD [-880+EBP],EAX
+   548 0000059E 7E 06                           	JLE	L19
+   549 000005A0 89 85 FFFFFC90                  	MOV	DWORD [-880+EBP],EAX
+   550 000005A6                                 L19:
+   551 000005A6 0F BF 05 00000FF6               	MOVSX	EAX,WORD [4086]
+   552 000005AD 48                              	DEC	EAX
+   553 000005AE 39 85 FFFFFC8C                  	CMP	DWORD [-884+EBP],EAX
+   554 000005B4 7E 06                           	JLE	L20
+   555 000005B6 89 85 FFFFFC8C                  	MOV	DWORD [-884+EBP],EAX
+   556 000005BC                                 L20:
+   557 000005BC FF B5 FFFFFC8C                  	PUSH	DWORD [-884+EBP]
+   558 000005C2 FF B5 FFFFFC90                  	PUSH	DWORD [-880+EBP]
+   559 000005C8 68 [000000AF]                   	PUSH	LC7
+   560 000005CD 53                              	PUSH	EBX
+   561 000005CE E8 [00000000]                   	CALL	_sprintf
+   562 000005D3 6A 0A                           	PUSH	10
+   563 000005D5 53                              	PUSH	EBX
+   564 000005D6 6A 0E                           	PUSH	14
+   565 000005D8 6A 07                           	PUSH	7
+   566 000005DA 6A 00                           	PUSH	0
+   567 000005DC 6A 00                           	PUSH	0
+   568 000005DE FF B5 FFFFFC80                  	PUSH	DWORD [-896+EBP]
+   569 000005E4 E8 00000174                     	CALL	_putfonts8_asc_sht
+   570 000005E9 83 C4 2C                        	ADD	ESP,44
+   571 000005EC FF B5 FFFFFC8C                  	PUSH	DWORD [-884+EBP]
+   572 000005F2 FF B5 FFFFFC90                  	PUSH	DWORD [-880+EBP]
+   573 000005F8 FF B5 FFFFFC7C                  	PUSH	DWORD [-900+EBP]
+   574 000005FE E8 [00000000]                   	CALL	_sheet_slide
+   575 00000603 83 C4 0C                        	ADD	ESP,12
+   576 00000606 F7 45 C0 00000001               	TEST	DWORD [-64+EBP],1
+   577 0000060D 0F 84 FFFFFD86                  	JE	L2
+   578 00000613 8B 85 FFFFFC8C                  	MOV	EAX,DWORD [-884+EBP]
+   579 00000619 83 E8 08                        	SUB	EAX,8
+   580 0000061C 50                              	PUSH	EAX
+   581 0000061D 8B 85 FFFFFC90                  	MOV	EAX,DWORD [-880+EBP]
+   582 00000623 83 E8 50                        	SUB	EAX,80
+   583 00000626 50                              	PUSH	EAX
+   584 00000627 FF B5 FFFFFC78                  	PUSH	DWORD [-904+EBP]
+   585 0000062D E8 [00000000]                   	CALL	_sheet_slide
+   586 00000632 83 C4 0C                        	ADD	ESP,12
+   587 00000635 E9 FFFFFD5F                     	JMP	L2
+   588 0000063A                                 L39:
+   589 0000063A C7 85 FFFFFC8C 00000000         	MOV	DWORD [-884+EBP],0
+   590 00000644 E9 FFFFFF47                     	JMP	L18
+   591 00000649                                 L38:
+   592 00000649 C7 85 FFFFFC90 00000000         	MOV	DWORD [-880+EBP],0
+   593 00000653 E9 FFFFFF2B                     	JMP	L17
+   594 00000658                                 L34:
+   595 00000658 50                              	PUSH	EAX
+   596 00000659 8D 75 C4                        	LEA	ESI,DWORD [-60+EBP]
+   597 0000065C 68 [000000BA]                   	PUSH	LC4
+   598 00000661 56                              	PUSH	ESI
+   599 00000662 E8 [00000000]                   	CALL	_sprintf
+   600 00000667 6A 02                           	PUSH	2
+   601 00000669 56                              	PUSH	ESI
+   602 0000066A 6A 0E                           	PUSH	14
+   603 0000066C 6A 07                           	PUSH	7
+   604 0000066E 6A 20                           	PUSH	32
+   605 00000670 6A 00                           	PUSH	0
+   606 00000672 FF B5 FFFFFC80                  	PUSH	DWORD [-896+EBP]
+   607 00000678 E8 000000E0                     	CALL	_putfonts8_asc_sht
+   608 0000067D 83 C4 28                        	ADD	ESP,40
+   609 00000680 81 FB 00000153                  	CMP	EBX,339
+   610 00000686 7F 41                           	JG	L8
+   611 00000688 8A 83 [FFFFFF00]                	MOV	AL,BYTE [_keytable-256+EBX]
+   612 0000068E 84 C0                           	TEST	AL,AL
+   613 00000690 74 37                           	JE	L8
+   614 00000692 81 BD FFFFFC6C 0000008F         	CMP	DWORD [-916+EBP],143
+   615 0000069C 7F 2B                           	JG	L8
+   616 0000069E 6A 01                           	PUSH	1
+   617 000006A0 88 45 C4                        	MOV	BYTE [-60+EBP],AL
+   618 000006A3 56                              	PUSH	ESI
+   619 000006A4 6A 07                           	PUSH	7
+   620 000006A6 6A 00                           	PUSH	0
+   621 000006A8 6A 2E                           	PUSH	46
+   622 000006AA FF B5 FFFFFC6C                  	PUSH	DWORD [-916+EBP]
+   623 000006B0 FF B5 FFFFFC78                  	PUSH	DWORD [-904+EBP]
+   624 000006B6 C6 45 C5 00                     	MOV	BYTE [-59+EBP],0
+   625 000006BA E8 0000009E                     	CALL	_putfonts8_asc_sht
+   626 000006BF 83 C4 1C                        	ADD	ESP,28
+   627 000006C2 83 85 FFFFFC6C 08               	ADD	DWORD [-916+EBP],8
+   628 000006C9                                 L8:
+   629 000006C9 81 FB 0000010E                  	CMP	EBX,270
+   630 000006CF 74 4C                           	JE	L40
+   631 000006D1                                 L10:
+   632 000006D1 8B 85 FFFFFC6C                  	MOV	EAX,DWORD [-916+EBP]
+   633 000006D7 6A 3D                           	PUSH	61
+   634 000006D9 83 C0 07                        	ADD	EAX,7
+   635 000006DC 8B 9D FFFFFC78                  	MOV	EBX,DWORD [-904+EBP]
+   636 000006E2 50                              	PUSH	EAX
+   637 000006E3 6A 2E                           	PUSH	46
+   638 000006E5 FF B5 FFFFFC6C                  	PUSH	DWORD [-916+EBP]
+   639 000006EB FF B5 FFFFFC68                  	PUSH	DWORD [-920+EBP]
+   640 000006F1 FF 73 04                        	PUSH	DWORD [4+EBX]
+   641 000006F4 FF 33                           	PUSH	DWORD [EBX]
+   642 000006F6 E8 [00000000]                   	CALL	_boxfill8
+   643 000006FB 8B 85 FFFFFC6C                  	MOV	EAX,DWORD [-916+EBP]
+   644 00000701 6A 3E                           	PUSH	62
+   645 00000703 83 C0 08                        	ADD	EAX,8
+   646 00000706 50                              	PUSH	EAX
+   647 00000707 6A 2E                           	PUSH	46
+   648 00000709 FF B5 FFFFFC6C                  	PUSH	DWORD [-916+EBP]
+   649 0000070F 53                              	PUSH	EBX
+   650 00000710 E8 [00000000]                   	CALL	_sheet_refresh
+   651 00000715 83 C4 30                        	ADD	ESP,48
+   652 00000718 E9 FFFFFC7C                     	JMP	L2
+   653 0000071D                                 L40:
+   654 0000071D 83 BD FFFFFC6C 08               	CMP	DWORD [-916+EBP],8
+   655 00000724 7E AB                           	JLE	L10
+   656 00000726 6A 01                           	PUSH	1
+   657 00000728 68 [000000BF]                   	PUSH	LC5
+   658 0000072D 6A 07                           	PUSH	7
+   659 0000072F 6A 00                           	PUSH	0
+   660 00000731 6A 2E                           	PUSH	46
+   661 00000733 FF B5 FFFFFC6C                  	PUSH	DWORD [-916+EBP]
+   662 00000739 FF B5 FFFFFC78                  	PUSH	DWORD [-904+EBP]
+   663 0000073F E8 00000019                     	CALL	_putfonts8_asc_sht
+   664 00000744 83 C4 1C                        	ADD	ESP,28
+   665 00000747 83 AD FFFFFC6C 08               	SUB	DWORD [-916+EBP],8
+   666 0000074E E9 FFFFFF7E                     	JMP	L10
+   667 00000753                                 L33:
+   668 00000753 E8 [00000000]                   	CALL	_io_sti
+   669 00000758 E9 FFFFFC3C                     	JMP	L2
+   670 0000075D                                 	GLOBAL	_putfonts8_asc_sht
+   671 0000075D                                 _putfonts8_asc_sht:
+   672 0000075D 55                              	PUSH	EBP
+   673 0000075E 89 E5                           	MOV	EBP,ESP
+   674 00000760 57                              	PUSH	EDI
+   675 00000761 56                              	PUSH	ESI
+   676 00000762 53                              	PUSH	EBX
+   677 00000763 83 EC 0C                        	SUB	ESP,12
+   678 00000766 8B 45 08                        	MOV	EAX,DWORD [8+EBP]
+   679 00000769 8B 7D 10                        	MOV	EDI,DWORD [16+EBP]
+   680 0000076C 89 45 F0                        	MOV	DWORD [-16+EBP],EAX
+   681 0000076F 8B 5D 14                        	MOV	EBX,DWORD [20+EBP]
+   682 00000772 8B 45 0C                        	MOV	EAX,DWORD [12+EBP]
+   683 00000775 89 45 EC                        	MOV	DWORD [-20+EBP],EAX
+   684 00000778 8B 45 1C                        	MOV	EAX,DWORD [28+EBP]
+   685 0000077B 89 45 E8                        	MOV	DWORD [-24+EBP],EAX
+   686 0000077E 8D 47 0F                        	LEA	EAX,DWORD [15+EDI]
+   687 00000781 50                              	PUSH	EAX
+   688 00000782 8B 45 EC                        	MOV	EAX,DWORD [-20+EBP]
+   689 00000785 8B 75 20                        	MOV	ESI,DWORD [32+EBP]
+   690 00000788 0F BE DB                        	MOVSX	EBX,BL
+   691 0000078B 8D 34 F0                        	LEA	ESI,DWORD [EAX+ESI*8]
+   692 0000078E 8D 46 FF                        	LEA	EAX,DWORD [-1+ESI]
+   693 00000791 50                              	PUSH	EAX
+   694 00000792 57                              	PUSH	EDI
+   695 00000793 FF 75 EC                        	PUSH	DWORD [-20+EBP]
+   696 00000796 0F B6 45 18                     	MOVZX	EAX,BYTE [24+EBP]
+   697 0000079A 50                              	PUSH	EAX
+   698 0000079B 8B 45 F0                        	MOV	EAX,DWORD [-16+EBP]
+   699 0000079E FF 70 04                        	PUSH	DWORD [4+EAX]
+   700 000007A1 FF 30                           	PUSH	DWORD [EAX]
+   701 000007A3 E8 [00000000]                   	CALL	_boxfill8
+   702 000007A8 FF 75 E8                        	PUSH	DWORD [-24+EBP]
+   703 000007AB 53                              	PUSH	EBX
+   704 000007AC 57                              	PUSH	EDI
+   705 000007AD FF 75 EC                        	PUSH	DWORD [-20+EBP]
+   706 000007B0 8B 45 F0                        	MOV	EAX,DWORD [-16+EBP]
+   707 000007B3 FF 70 04                        	PUSH	DWORD [4+EAX]
+   708 000007B6 FF 30                           	PUSH	DWORD [EAX]
+   709 000007B8 E8 [00000000]                   	CALL	_putfonts8_asc
+   710 000007BD 89 7D 10                        	MOV	DWORD [16+EBP],EDI
+   711 000007C0 8D 47 10                        	LEA	EAX,DWORD [16+EDI]
+   712 000007C3 89 75 14                        	MOV	DWORD [20+EBP],ESI
+   713 000007C6 89 45 18                        	MOV	DWORD [24+EBP],EAX
+   714 000007C9 83 C4 34                        	ADD	ESP,52
+   715 000007CC 8B 45 EC                        	MOV	EAX,DWORD [-20+EBP]
+   716 000007CF 89 45 0C                        	MOV	DWORD [12+EBP],EAX
+   717 000007D2 8B 45 F0                        	MOV	EAX,DWORD [-16+EBP]
+   718 000007D5 89 45 08                        	MOV	DWORD [8+EBP],EAX
+   719 000007D8 8D 65 F4                        	LEA	ESP,DWORD [-12+EBP]
+   720 000007DB 5B                              	POP	EBX
+   721 000007DC 5E                              	POP	ESI
+   722 000007DD 5F                              	POP	EDI
+   723 000007DE 5D                              	POP	EBP
+   724 000007DF E9 [00000000]                   	JMP	_sheet_refresh
+   725 000007E4                                 	GLOBAL	_make_textbox8
+   726 000007E4                                 _make_textbox8:
+   727 000007E4 55                              	PUSH	EBP
+   728 000007E5 89 E5                           	MOV	EBP,ESP
+   729 000007E7 57                              	PUSH	EDI
+   730 000007E8 56                              	PUSH	ESI
+   731 000007E9 53                              	PUSH	EBX
+   732 000007EA 83 EC 30                        	SUB	ESP,48
+   733 000007ED 8B 45 0C                        	MOV	EAX,DWORD [12+EBP]
+   734 000007F0 8B 75 08                        	MOV	ESI,DWORD [8+EBP]
+   735 000007F3 89 45 F0                        	MOV	DWORD [-16+EBP],EAX
+   736 000007F6 8B 45 10                        	MOV	EAX,DWORD [16+EBP]
+   737 000007F9 89 45 EC                        	MOV	DWORD [-20+EBP],EAX
+   738 000007FC 8B 45 14                        	MOV	EAX,DWORD [20+EBP]
+   739 000007FF 89 45 E8                        	MOV	DWORD [-24+EBP],EAX
+   740 00000802 8B 7D EC                        	MOV	EDI,DWORD [-20+EBP]
+   741 00000805 8B 45 18                        	MOV	EAX,DWORD [24+EBP]
+   742 00000808 83 EF 03                        	SUB	EDI,3
+   743 0000080B 89 45 E4                        	MOV	DWORD [-28+EBP],EAX
+   744 0000080E 8B 45 1C                        	MOV	EAX,DWORD [28+EBP]
+   745 00000811 89 45 E0                        	MOV	DWORD [-32+EBP],EAX
+   746 00000814 8B 45 F0                        	MOV	EAX,DWORD [-16+EBP]
+   747 00000817 03 45 E8                        	ADD	EAX,DWORD [-24+EBP]
+   748 0000081A 89 45 DC                        	MOV	DWORD [-36+EBP],EAX
+   749 0000081D 8B 45 EC                        	MOV	EAX,DWORD [-20+EBP]
+   750 00000820 03 45 E4                        	ADD	EAX,DWORD [-28+EBP]
+   751 00000823 89 45 D8                        	MOV	DWORD [-40+EBP],EAX
+   752 00000826 57                              	PUSH	EDI
+   753 00000827 8B 45 DC                        	MOV	EAX,DWORD [-36+EBP]
+   754 0000082A 40                              	INC	EAX
+   755 0000082B 89 45 D4                        	MOV	DWORD [-44+EBP],EAX
+   756 0000082E 50                              	PUSH	EAX
+   757 0000082F 57                              	PUSH	EDI
+   758 00000830 8B 45 F0                        	MOV	EAX,DWORD [-16+EBP]
+   759 00000833 83 E8 02                        	SUB	EAX,2
+   760 00000836 89 45 D0                        	MOV	DWORD [-48+EBP],EAX
+   761 00000839 50                              	PUSH	EAX
+   762 0000083A 6A 0F                           	PUSH	15
+   763 0000083C FF 76 04                        	PUSH	DWORD [4+ESI]
+   764 0000083F FF 36                           	PUSH	DWORD [ESI]
+   765 00000841 E8 [00000000]                   	CALL	_boxfill8
+   766 00000846 8B 45 D8                        	MOV	EAX,DWORD [-40+EBP]
+   767 00000849 40                              	INC	EAX
+   768 0000084A 89 45 CC                        	MOV	DWORD [-52+EBP],EAX
+   769 0000084D 50                              	PUSH	EAX
+   770 0000084E 8B 45 F0                        	MOV	EAX,DWORD [-16+EBP]
+   771 00000851 83 E8 03                        	SUB	EAX,3
+   772 00000854 89 45 C8                        	MOV	DWORD [-56+EBP],EAX
+   773 00000857 50                              	PUSH	EAX
+   774 00000858 57                              	PUSH	EDI
+   775 00000859 50                              	PUSH	EAX
+   776 0000085A 6A 0F                           	PUSH	15
+   777 0000085C FF 76 04                        	PUSH	DWORD [4+ESI]
+   778 0000085F FF 36                           	PUSH	DWORD [ESI]
+   779 00000861 E8 [00000000]                   	CALL	_boxfill8
+   780 00000866 8B 5D D8                        	MOV	EBX,DWORD [-40+EBP]
+   781 00000869 83 C4 38                        	ADD	ESP,56
+   782 0000086C 83 C3 02                        	ADD	EBX,2
+   783 0000086F 53                              	PUSH	EBX
+   784 00000870 FF 75 D4                        	PUSH	DWORD [-44+EBP]
+   785 00000873 53                              	PUSH	EBX
+   786 00000874 FF 75 C8                        	PUSH	DWORD [-56+EBP]
+   787 00000877 6A 07                           	PUSH	7
+   788 00000879 FF 76 04                        	PUSH	DWORD [4+ESI]
+   789 0000087C FF 36                           	PUSH	DWORD [ESI]
+   790 0000087E E8 [00000000]                   	CALL	_boxfill8
+   791 00000883 53                              	PUSH	EBX
+   792 00000884 8B 45 DC                        	MOV	EAX,DWORD [-36+EBP]
+   793 00000887 83 C0 02                        	ADD	EAX,2
+   794 0000088A 50                              	PUSH	EAX
+   795 0000088B 57                              	PUSH	EDI
+   796 0000088C 50                              	PUSH	EAX
+   797 0000088D 6A 07                           	PUSH	7
+   798 0000088F FF 76 04                        	PUSH	DWORD [4+ESI]
+   799 00000892 FF 36                           	PUSH	DWORD [ESI]
+   800 00000894 E8 [00000000]                   	CALL	_boxfill8
+   801 00000899 8B 5D EC                        	MOV	EBX,DWORD [-20+EBP]
+   802 0000089C 83 C4 38                        	ADD	ESP,56
+   803 0000089F 83 EB 02                        	SUB	EBX,2
+   804 000008A2 53                              	PUSH	EBX
+   805 000008A3 FF 75 DC                        	PUSH	DWORD [-36+EBP]
+   806 000008A6 53                              	PUSH	EBX
+   807 000008A7 8B 45 F0                        	MOV	EAX,DWORD [-16+EBP]
+   808 000008AA 48                              	DEC	EAX
+   809 000008AB 89 45 C4                        	MOV	DWORD [-60+EBP],EAX
+   810 000008AE 50                              	PUSH	EAX
+   811 000008AF 6A 00                           	PUSH	0
+   812 000008B1 FF 76 04                        	PUSH	DWORD [4+ESI]
+   813 000008B4 FF 36                           	PUSH	DWORD [ESI]
+   814 000008B6 E8 [00000000]                   	CALL	_boxfill8
+   815 000008BB FF 75 D8                        	PUSH	DWORD [-40+EBP]
+   816 000008BE 8B 45 DC                        	MOV	EAX,DWORD [-36+EBP]
+   817 000008C1 83 E8 02                        	SUB	EAX,2
+   818 000008C4 50                              	PUSH	EAX
+   819 000008C5 53                              	PUSH	EBX
+   820 000008C6 FF 75 D0                        	PUSH	DWORD [-48+EBP]
+   821 000008C9 6A 00                           	PUSH	0
+   822 000008CB FF 76 04                        	PUSH	DWORD [4+ESI]
+   823 000008CE FF 36                           	PUSH	DWORD [ESI]
+   824 000008D0 E8 [00000000]                   	CALL	_boxfill8
+   825 000008D5 83 C4 38                        	ADD	ESP,56
+   826 000008D8 FF 75 CC                        	PUSH	DWORD [-52+EBP]
+   827 000008DB FF 75 DC                        	PUSH	DWORD [-36+EBP]
+   828 000008DE FF 75 CC                        	PUSH	DWORD [-52+EBP]
+   829 000008E1 FF 75 D0                        	PUSH	DWORD [-48+EBP]
+   830 000008E4 6A 08                           	PUSH	8
+   831 000008E6 FF 76 04                        	PUSH	DWORD [4+ESI]
+   832 000008E9 FF 36                           	PUSH	DWORD [ESI]
+   833 000008EB E8 [00000000]                   	CALL	_boxfill8
+   834 000008F0 FF 75 CC                        	PUSH	DWORD [-52+EBP]
+   835 000008F3 FF 75 D4                        	PUSH	DWORD [-44+EBP]
+   836 000008F6 53                              	PUSH	EBX
+   837 000008F7 FF 75 D4                        	PUSH	DWORD [-44+EBP]
+   838 000008FA 6A 08                           	PUSH	8
+   839 000008FC FF 76 04                        	PUSH	DWORD [4+ESI]
+   840 000008FF FF 36                           	PUSH	DWORD [ESI]
+   841 00000901 E8 [00000000]                   	CALL	_boxfill8
+   842 00000906 83 C4 38                        	ADD	ESP,56
+   843 00000909 FF 75 D8                        	PUSH	DWORD [-40+EBP]
+   844 0000090C FF 75 DC                        	PUSH	DWORD [-36+EBP]
+   845 0000090F 8B 45 EC                        	MOV	EAX,DWORD [-20+EBP]
+   846 00000912 48                              	DEC	EAX
+   847 00000913 50                              	PUSH	EAX
+   848 00000914 FF 75 C4                        	PUSH	DWORD [-60+EBP]
+   849 00000917 0F B6 45 E0                     	MOVZX	EAX,BYTE [-32+EBP]
+   850 0000091B 50                              	PUSH	EAX
+   851 0000091C FF 76 04                        	PUSH	DWORD [4+ESI]
+   852 0000091F FF 36                           	PUSH	DWORD [ESI]
+   853 00000921 E8 [00000000]                   	CALL	_boxfill8
+   854 00000926 89 75 08                        	MOV	DWORD [8+EBP],ESI
+   855 00000929 8B 45 E4                        	MOV	EAX,DWORD [-28+EBP]
+   856 0000092C 83 C4 1C                        	ADD	ESP,28
+   857 0000092F 89 45 18                        	MOV	DWORD [24+EBP],EAX
+   858 00000932 8B 45 E8                        	MOV	EAX,DWORD [-24+EBP]
+   859 00000935 89 45 14                        	MOV	DWORD [20+EBP],EAX
+   860 00000938 8B 45 EC                        	MOV	EAX,DWORD [-20+EBP]
+   861 0000093B 89 45 10                        	MOV	DWORD [16+EBP],EAX
+   862 0000093E 8B 45 F0                        	MOV	EAX,DWORD [-16+EBP]
+   863 00000941 89 45 0C                        	MOV	DWORD [12+EBP],EAX
+   864 00000944 8D 65 F4                        	LEA	ESP,DWORD [-12+EBP]
+   865 00000947 5B                              	POP	EBX
+   866 00000948 5E                              	POP	ESI
+   867 00000949 5F                              	POP	EDI
+   868 0000094A 5D                              	POP	EBP
+   869 0000094B E9 [00000000]                   	JMP	_sheet_refresh
diff --git a/fyt/bootpack.map b/fyt/bootpack.map
index 8981c9e..6ed0abc 100644
--- a/fyt/bootpack.map
+++ b/fyt/bootpack.map
@@ -1,95 +1,99 @@
-text size :   8171(0x01FEB)
-data size :  14844(0x039FC)
+text size :   8904(0x022C8)
+data size :  14892(0x03A2C)
 bss  size :      0(0x00000)
 
 0x00000000 : (.text)
 0x00000024 : (.text)
 0x00000024 : _HariMain
-0x00000693 : _putfonts8_asc_sht
-0x0000071A : (.text)
-0x0000071A : _io_hlt
-0x0000071C : _io_cli
-0x0000071E : _io_sti
-0x00000720 : _io_stihlt
-0x00000723 : _io_in8
-0x0000072E : _io_in16
-0x0000073A : _io_in32
-0x00000740 : _io_out8
-0x0000074A : _io_out16
-0x00000755 : _io_out32
-0x0000075F : _io_load_eflags
-0x00000762 : _io_store_eflags
-0x00000769 : _load_gdtr
-0x00000779 : _load_idtr
-0x00000789 : _write_mem8
-0x00000794 : _asm_inthandler21
-0x000007AB : _asm_inthandler27
-0x000007C2 : _asm_inthandler2c
-0x000007D9 : _asm_inthandler20
-0x000007F0 : _memtest_sub
-0x00000832 : _init_palette
-0x00000832 : (.text)
-0x00000845 : _init_screen8
-0x000009D0 : _set_palette
-0x00000A58 : _boxfill8
-0x00000AA9 : _putfont8
-0x00000B2F : _putfonts8_asc
-0x00000B7E : _init_mouse_cursor8
-0x00000BDB : _putblock8_8
-0x00000C31 : _make_window8
-0x00000D9D : _init_gdtidt
-0x00000D9D : (.text)
-0x00000E91 : _set_segmdesc
-0x00000EDB : _set_gatedesc
-0x00000F07 : _init_pic
-0x00000F07 : (.text)
-0x00000F9C : _inthandler21
-0x00000FBF : _inthandler2c
-0x00000FEE : _inthandler27
-0x00000FFC : _fifo8_init
-0x00000FFC : (.text)
-0x00001027 : _fifo8_put
-0x00001065 : _fifo8_get
-0x000010A0 : _fifo8_status
-0x000010AE : (.text)
-0x000010AE : _wait_KBC_sendready
-0x000010C0 : _init_keyboard
-0x000010E1 : _enable_mouse
-0x000010E1 : (.text)
-0x0000110F : _mouse_decode
-0x000011AD : _memman_init
-0x000011AD : (.text)
-0x000011D0 : _memman_total
-0x000011ED : _memman_alloc
-0x00001250 : _memman_free
-0x00001336 : _memman_alloc_4k
-0x0000134F : _memman_free_4k
-0x00001368 : _shtctl_init
-0x00001368 : (.text)
-0x000013EC : _sheet_alloc
-0x0000141F : _sheet_setbuf
-0x0000143E : _sheet_updown
-0x00001586 : _sheet_refresh
-0x000015C0 : _sheet_refreshsub
-0x00001723 : _sheet_slide
-0x000017CF : _sheet_free
-0x000017F2 : _sheet_refreshmap
-0x0000194F : _init_pit
-0x0000194F : (.text)
-0x000019AA : _timer_alloc
-0x000019D3 : _timer_free
-0x000019E2 : _timer_init
-0x000019F6 : _timer_settime
-0x00001A7E : _inthandler20
-0x00001B29 : (.text)
-0x00001B29 : _HariStartup
-0x00001B32 : _sprintf
-0x00001B32 : (.text)
-0x00001B46 : (.text)
-0x00001B82 : _strtoul0
-0x00001C55 : (.text)
-0x00001C7D : _vsprintf
-0x00000000 : (.data)
+0x00000781 : _putfonts8_asc_sht
+0x00000808 : _make_textbox8
+0x00000974 : (.text)
+0x00000974 : _io_hlt
+0x00000976 : _io_cli
+0x00000978 : _io_sti
+0x0000097A : _io_stihlt
+0x0000097D : _io_in8
+0x00000988 : _io_in16
+0x00000994 : _io_in32
+0x0000099A : _io_out8
+0x000009A4 : _io_out16
+0x000009AF : _io_out32
+0x000009B9 : _io_load_eflags
+0x000009BC : _io_store_eflags
+0x000009C3 : _load_gdtr
+0x000009D3 : _load_idtr
+0x000009E3 : _write_mem8
+0x000009EE : _asm_inthandler21
+0x00000A05 : _asm_inthandler27
+0x00000A1C : _asm_inthandler2c
+0x00000A33 : _asm_inthandler20
+0x00000A4A : _memtest_sub
+0x00000A8C : _init_palette
+0x00000A8C : (.text)
+0x00000A9F : _init_screen8
+0x00000C2A : _set_palette
+0x00000CB2 : _boxfill8
+0x00000D03 : _putfont8
+0x00000D89 : _putfonts8_asc
+0x00000DD8 : _init_mouse_cursor8
+0x00000E35 : _putblock8_8
+0x00000E8B : _make_window8
+0x00000FF7 : _init_gdtidt
+0x00000FF7 : (.text)
+0x000010EB : _set_segmdesc
+0x00001135 : _set_gatedesc
+0x00001161 : _init_pic
+0x00001161 : (.text)
+0x000011F6 : _inthandler27
+0x00001204 : (.text)
+0x00001204 : _fifo8_init
+0x0000122F : _fifo8_put
+0x0000126D : _fifo8_get
+0x000012A8 : _fifo8_status
+0x000012B6 : _fifo32_init
+0x000012E1 : _fifo32_put
+0x0000131F : _fifo32_get
+0x00001359 : _fifo32_status
+0x00001367 : (.text)
+0x00001367 : _wait_KBC_sendready
+0x00001379 : _init_keyboard
+0x000013B5 : _inthandler21
+0x000013DC : _inthandler2c
+0x000013DC : (.text)
+0x0000140F : _enable_mouse
+0x0000144D : _mouse_decode
+0x000014EB : _memman_init
+0x000014EB : (.text)
+0x0000150E : _memman_total
+0x0000152B : _memman_alloc
+0x0000158E : _memman_free
+0x00001674 : _memman_alloc_4k
+0x0000168D : _memman_free_4k
+0x000016A6 : _shtctl_init
+0x000016A6 : (.text)
+0x0000172A : _sheet_alloc
+0x0000175D : _sheet_setbuf
+0x0000177C : _sheet_updown
+0x000018C4 : _sheet_refresh
+0x000018FE : _sheet_refreshsub
+0x00001A61 : _sheet_slide
+0x00001B0D : _sheet_free
+0x00001B30 : _sheet_refreshmap
+0x00001C8D : _init_pit
+0x00001C8D : (.text)
+0x00001CFC : _timer_alloc
+0x00001D25 : _timer_free
+0x00001D34 : _timer_init
+0x00001D48 : _timer_settime
+0x00001DAB : _inthandler20
+0x00001E06 : (.text)
+0x00001E06 : _HariStartup
+0x00001E0F : _sprintf
+0x00001E0F : (.text)
+0x00001E23 : (.text)
+0x00001E5F : _strtoul0
+0x00001F32 : (.text)
+0x00001F5A : _vsprintf
 0x00000000 : (.data)
 0x00000000 : (.data)
 0x00000000 : (.data)
@@ -100,15 +104,18 @@ bss  size :      0(0x00000)
 0x00000000 : (.data)
 0x00000000 : (.data)
 0x00310000 : (.data)
-0x00310070 : (.data)
-0x00310070 : _hankaku
-0x00311070 : (.data)
-0x00311280 : _keyfifo
-0x00311280 : (.data)
-0x003112A0 : _mousefifo
-0x003112C0 : (.data)
-0x003112C0 : _timerctl
-0x003139DC : (.data)
+0x003100C8 : (.data)
+0x003100C8 : _hankaku
+0x003110C8 : (.data)
+0x003112D8 : (.data)
+0x003112D8 : _keyfifo
+0x003112DC : _keydata0
+0x003112E0 : (.data)
+0x003112E0 : _mousefifo
+0x003112E4 : _mousedata0
+0x003112F0 : (.data)
+0x003112F0 : _timerctl
+0x00313A0C : (.data)
 0x00000000 : (.bss)
 0x00000000 : (.bss)
 0x00000000 : (.bss)
diff --git a/fyt/bootpack.obj b/fyt/bootpack.obj
index d8d1ef3..28a5614 100644
Binary files a/fyt/bootpack.obj and b/fyt/bootpack.obj differ
diff --git a/fyt/fifo.c b/fyt/fifo.c
index 5896508..50abeb1 100644
--- a/fyt/fifo.c
+++ b/fyt/fifo.c
@@ -46,3 +46,54 @@ int fifo8_status(struct FIFO8 *fifo)
 {
 	return fifo->size - fifo->free;
 }
+
+void fifo32_init(struct FIFO32 *fifo, int size, int *buf)
+{
+	fifo->size = size;
+	fifo->buf = buf;
+	fifo->free = size;
+	fifo->flags = 0;
+	fifo->p = 0;		/*写入位置*/
+	fifo->q = 0; 		/*读取位置*/
+	return;
+}
+
+int fifo32_put(struct FIFO32 *fifo, int data)
+{
+	if (fifo->free == 0)
+	{
+		/* 没有空余空间 */
+		fifo->flags |= FLAGS_OVERRUN;
+		return -1;
+	}
+	fifo->buf[fifo->p] = data;
+	fifo->p++;
+	if (fifo->p == fifo->size)
+	{
+			fifo->p = 0;
+	}
+	fifo->free--;
+	return 0;
+}
+
+int fifo32_get(struct FIFO32 *fifo)
+{
+	int data;
+	if (fifo->free == fifo->size)
+	{
+		return -1;
+	}
+	data = fifo->buf[fifo->q];
+	fifo->q++;
+	if (fifo->q == fifo->size)
+	{
+		fifo->q = 0;
+	}
+	fifo->free++;
+	return data;
+}
+
+int fifo32_status(struct FIFO32 *fifo)
+{
+	return fifo->size - fifo->free;
+}
diff --git a/fyt/fifo.lst b/fyt/fifo.lst
index e4a41a0..7f46247 100644
--- a/fyt/fifo.lst
+++ b/fyt/fifo.lst
@@ -91,3 +91,89 @@
     91 000000AB 8B 42 0C                        	MOV	EAX,DWORD [12+EDX]
     92 000000AE 2B 42 10                        	SUB	EAX,DWORD [16+EDX]
     93 000000B1 C3                              	RET
+    94 000000B2                                 	GLOBAL	_fifo32_init
+    95 000000B2                                 _fifo32_init:
+    96 000000B2 55                              	PUSH	EBP
+    97 000000B3 89 E5                           	MOV	EBP,ESP
+    98 000000B5 8B 45 08                        	MOV	EAX,DWORD [8+EBP]
+    99 000000B8 8B 4D 0C                        	MOV	ECX,DWORD [12+EBP]
+   100 000000BB 8B 55 10                        	MOV	EDX,DWORD [16+EBP]
+   101 000000BE 89 48 0C                        	MOV	DWORD [12+EAX],ECX
+   102 000000C1 89 10                           	MOV	DWORD [EAX],EDX
+   103 000000C3 89 48 10                        	MOV	DWORD [16+EAX],ECX
+   104 000000C6 C7 40 14 00000000               	MOV	DWORD [20+EAX],0
+   105 000000CD C7 40 04 00000000               	MOV	DWORD [4+EAX],0
+   106 000000D4 C7 40 08 00000000               	MOV	DWORD [8+EAX],0
+   107 000000DB 5D                              	POP	EBP
+   108 000000DC C3                              	RET
+   109 000000DD                                 	GLOBAL	_fifo32_put
+   110 000000DD                                 _fifo32_put:
+   111 000000DD 55                              	PUSH	EBP
+   112 000000DE 89 E5                           	MOV	EBP,ESP
+   113 000000E0 53                              	PUSH	EBX
+   114 000000E1 8B 5D 08                        	MOV	EBX,DWORD [8+EBP]
+   115 000000E4 83 7B 10 00                     	CMP	DWORD [16+EBX],0
+   116 000000E8 75 0A                           	JNE	L13
+   117 000000EA 83 4B 14 01                     	OR	DWORD [20+EBX],1
+   118 000000EE 83 C8 FF                        	OR	EAX,-1
+   119 000000F1                                 L12:
+   120 000000F1 5B                              	POP	EBX
+   121 000000F2 5D                              	POP	EBP
+   122 000000F3 C3                              	RET
+   123 000000F4                                 L13:
+   124 000000F4 8B 4B 04                        	MOV	ECX,DWORD [4+EBX]
+   125 000000F7 8B 13                           	MOV	EDX,DWORD [EBX]
+   126 000000F9 8B 45 0C                        	MOV	EAX,DWORD [12+EBP]
+   127 000000FC 89 04 8A                        	MOV	DWORD [EDX+ECX*4],EAX
+   128 000000FF 8B 43 04                        	MOV	EAX,DWORD [4+EBX]
+   129 00000102 40                              	INC	EAX
+   130 00000103 89 43 04                        	MOV	DWORD [4+EBX],EAX
+   131 00000106 3B 43 0C                        	CMP	EAX,DWORD [12+EBX]
+   132 00000109 74 07                           	JE	L15
+   133 0000010B                                 L14:
+   134 0000010B FF 4B 10                        	DEC	DWORD [16+EBX]
+   135 0000010E 31 C0                           	XOR	EAX,EAX
+   136 00000110 EB DF                           	JMP	L12
+   137 00000112                                 L15:
+   138 00000112 C7 43 04 00000000               	MOV	DWORD [4+EBX],0
+   139 00000119 EB F0                           	JMP	L14
+   140 0000011B                                 	GLOBAL	_fifo32_get
+   141 0000011B                                 _fifo32_get:
+   142 0000011B 55                              	PUSH	EBP
+   143 0000011C 83 C8 FF                        	OR	EAX,-1
+   144 0000011F 89 E5                           	MOV	EBP,ESP
+   145 00000121 56                              	PUSH	ESI
+   146 00000122 53                              	PUSH	EBX
+   147 00000123 8B 4D 08                        	MOV	ECX,DWORD [8+EBP]
+   148 00000126 8B 71 10                        	MOV	ESI,DWORD [16+ECX]
+   149 00000129 8B 59 0C                        	MOV	EBX,DWORD [12+ECX]
+   150 0000012C 39 DE                           	CMP	ESI,EBX
+   151 0000012E 74 18                           	JE	L16
+   152 00000130 8B 41 08                        	MOV	EAX,DWORD [8+ECX]
+   153 00000133 8B 11                           	MOV	EDX,DWORD [ECX]
+   154 00000135 8B 14 82                        	MOV	EDX,DWORD [EDX+EAX*4]
+   155 00000138 40                              	INC	EAX
+   156 00000139 89 41 08                        	MOV	DWORD [8+ECX],EAX
+   157 0000013C 39 D8                           	CMP	EAX,EBX
+   158 0000013E 74 0C                           	JE	L19
+   159 00000140                                 L18:
+   160 00000140 8D 46 01                        	LEA	EAX,DWORD [1+ESI]
+   161 00000143 89 41 10                        	MOV	DWORD [16+ECX],EAX
+   162 00000146 89 D0                           	MOV	EAX,EDX
+   163 00000148                                 L16:
+   164 00000148 5B                              	POP	EBX
+   165 00000149 5E                              	POP	ESI
+   166 0000014A 5D                              	POP	EBP
+   167 0000014B C3                              	RET
+   168 0000014C                                 L19:
+   169 0000014C C7 41 08 00000000               	MOV	DWORD [8+ECX],0
+   170 00000153 EB EB                           	JMP	L18
+   171 00000155                                 	GLOBAL	_fifo32_status
+   172 00000155                                 _fifo32_status:
+   173 00000155 55                              	PUSH	EBP
+   174 00000156 89 E5                           	MOV	EBP,ESP
+   175 00000158 8B 55 08                        	MOV	EDX,DWORD [8+EBP]
+   176 0000015B 5D                              	POP	EBP
+   177 0000015C 8B 42 0C                        	MOV	EAX,DWORD [12+EDX]
+   178 0000015F 2B 42 10                        	SUB	EAX,DWORD [16+EDX]
+   179 00000162 C3                              	RET
diff --git a/fyt/fifo.obj b/fyt/fifo.obj
index 652db15..33793ca 100644
Binary files a/fyt/fifo.obj and b/fyt/fifo.obj differ
diff --git a/fyt/haribote.img b/fyt/haribote.img
index f8bc629..997ff84 100644
Binary files a/fyt/haribote.img and b/fyt/haribote.img differ
diff --git a/fyt/haribote.sys b/fyt/haribote.sys
index dc96f86..5c4d5c8 100644
Binary files a/fyt/haribote.sys and b/fyt/haribote.sys differ
diff --git a/fyt/int.c b/fyt/int.c
index 02c8dfa..94d7935 100644
--- a/fyt/int.c
+++ b/fyt/int.c
@@ -4,6 +4,7 @@
 /* PIC的初始化 */
 void init_pic(void)
 {
+
 	io_out8(PIC0_IMR, 0xff);		/*禁止所有中断*/
 	io_out8(PIC1_IMR, 0xff);
 
@@ -23,29 +24,6 @@ void init_pic(void)
 	return;
 }
 
-struct FIFO8 keyfifo, mousefifo;
-
-// 键盘中断
-void inthandler21(int *exp)
-{
-	unsigned char data;
-	io_out8(PIC0_OCW2, 0x61); 		/* 通知PIC: "IRQ-01已受理完毕" */
-	data = io_in8(PORT_KEYDAT);
-
-	fifo8_put(&keyfifo, data);
-
-	return;
-}
-
-void inthandler2c(int *exp)
-{
-	unsigned char data;
-	io_out8(PIC1_OCW2, 0x64);		/* 通知PIC1: "IRQ-12已受理完毕" */
-	io_out8(PIC0_OCW2, 0x62);		/* 通知PIC0: "IRQ-02已受理完毕" */
-	data = io_in8(PORT_KEYDAT);
-	fifo8_put(&mousefifo, data);
-	return;
-}
 
 void inthandler27(int *esp)
 /* PIC0からの不完全割り込み対策 */
diff --git a/fyt/int.lst b/fyt/int.lst
index d78c20a..e1a1dc8 100644
--- a/fyt/int.lst
+++ b/fyt/int.lst
@@ -4,107 +4,58 @@
      4 00000000                                 [OPTION 1]
      5 00000000                                 [BITS 32]
      6 00000000                                 	EXTERN	_io_out8
-     7 00000000                                 	EXTERN	_io_in8
-     8 00000000                                 	EXTERN	_fifo8_put
-     9 00000000                                 [FILE "int.c"]
-    10                                          [SECTION .text]
-    11 00000000                                 	GLOBAL	_init_pic
-    12 00000000                                 _init_pic:
-    13 00000000 55                              	PUSH	EBP
-    14 00000001 89 E5                           	MOV	EBP,ESP
-    15 00000003 68 000000FF                     	PUSH	255
-    16 00000008 6A 21                           	PUSH	33
-    17 0000000A E8 [00000000]                   	CALL	_io_out8
-    18 0000000F 68 000000FF                     	PUSH	255
-    19 00000014 68 000000A1                     	PUSH	161
-    20 00000019 E8 [00000000]                   	CALL	_io_out8
-    21 0000001E 6A 11                           	PUSH	17
-    22 00000020 6A 20                           	PUSH	32
-    23 00000022 E8 [00000000]                   	CALL	_io_out8
-    24 00000027 6A 20                           	PUSH	32
-    25 00000029 6A 21                           	PUSH	33
-    26 0000002B E8 [00000000]                   	CALL	_io_out8
-    27 00000030 83 C4 20                        	ADD	ESP,32
-    28 00000033 6A 04                           	PUSH	4
-    29 00000035 6A 21                           	PUSH	33
-    30 00000037 E8 [00000000]                   	CALL	_io_out8
-    31 0000003C 6A 01                           	PUSH	1
-    32 0000003E 6A 21                           	PUSH	33
-    33 00000040 E8 [00000000]                   	CALL	_io_out8
-    34 00000045 6A 11                           	PUSH	17
-    35 00000047 68 000000A0                     	PUSH	160
-    36 0000004C E8 [00000000]                   	CALL	_io_out8
-    37 00000051 6A 28                           	PUSH	40
-    38 00000053 68 000000A1                     	PUSH	161
-    39 00000058 E8 [00000000]                   	CALL	_io_out8
-    40 0000005D 83 C4 20                        	ADD	ESP,32
-    41 00000060 6A 02                           	PUSH	2
-    42 00000062 68 000000A1                     	PUSH	161
-    43 00000067 E8 [00000000]                   	CALL	_io_out8
-    44 0000006C 6A 01                           	PUSH	1
-    45 0000006E 68 000000A1                     	PUSH	161
-    46 00000073 E8 [00000000]                   	CALL	_io_out8
-    47 00000078 68 000000FB                     	PUSH	251
-    48 0000007D 6A 21                           	PUSH	33
-    49 0000007F E8 [00000000]                   	CALL	_io_out8
-    50 00000084 68 000000FF                     	PUSH	255
-    51 00000089 68 000000A1                     	PUSH	161
-    52 0000008E E8 [00000000]                   	CALL	_io_out8
-    53 00000093 C9                              	LEAVE
-    54 00000094 C3                              	RET
-    55 00000095                                 	GLOBAL	_inthandler21
-    56 00000095                                 _inthandler21:
-    57 00000095 55                              	PUSH	EBP
-    58 00000096 89 E5                           	MOV	EBP,ESP
-    59 00000098 6A 61                           	PUSH	97
-    60 0000009A 6A 20                           	PUSH	32
-    61 0000009C E8 [00000000]                   	CALL	_io_out8
-    62 000000A1 6A 60                           	PUSH	96
-    63 000000A3 E8 [00000000]                   	CALL	_io_in8
-    64 000000A8 0F B6 C0                        	MOVZX	EAX,AL
-    65 000000AB 50                              	PUSH	EAX
-    66 000000AC 68 [00000000]                   	PUSH	_keyfifo
-    67 000000B1 E8 [00000000]                   	CALL	_fifo8_put
-    68 000000B6 C9                              	LEAVE
-    69 000000B7 C3                              	RET
-    70 000000B8                                 	GLOBAL	_inthandler2c
-    71 000000B8                                 _inthandler2c:
-    72 000000B8 55                              	PUSH	EBP
-    73 000000B9 89 E5                           	MOV	EBP,ESP
-    74 000000BB 6A 64                           	PUSH	100
-    75 000000BD 68 000000A0                     	PUSH	160
-    76 000000C2 E8 [00000000]                   	CALL	_io_out8
-    77 000000C7 6A 62                           	PUSH	98
-    78 000000C9 6A 20                           	PUSH	32
-    79 000000CB E8 [00000000]                   	CALL	_io_out8
-    80 000000D0 6A 60                           	PUSH	96
-    81 000000D2 E8 [00000000]                   	CALL	_io_in8
-    82 000000D7 0F B6 C0                        	MOVZX	EAX,AL
-    83 000000DA 50                              	PUSH	EAX
-    84 000000DB 68 [00000020]                   	PUSH	_mousefifo
-    85 000000E0 E8 [00000000]                   	CALL	_fifo8_put
-    86 000000E5 C9                              	LEAVE
-    87 000000E6 C3                              	RET
-    88 000000E7                                 	GLOBAL	_inthandler27
-    89 000000E7                                 _inthandler27:
-    90 000000E7 55                              	PUSH	EBP
-    91 000000E8 89 E5                           	MOV	EBP,ESP
-    92 000000EA 6A 67                           	PUSH	103
-    93 000000EC 6A 20                           	PUSH	32
-    94 000000EE E8 [00000000]                   	CALL	_io_out8
-    95 000000F3 C9                              	LEAVE
-    96 000000F4 C3                              	RET
-    97 000000F5                                 	GLOBAL	_keyfifo
-    98                                          [SECTION .data]
-    99 00000000                                 	ALIGNB	16
-   100 00000000                                 _keyfifo:
-   101 00000000 00 00 00 00 00 00 00 00 00 00   	RESB	24
-       0000000A 00 00 00 00 00 00 00 00 00 00 
-       00000014 00 00 00 00 
-   102 00000018                                 	GLOBAL	_mousefifo
-   103                                          [SECTION .data]
-   104 00000018 00 00 00 00 00 00 00 00         	ALIGNB	16
-   105 00000020                                 _mousefifo:
-   106 00000020 00 00 00 00 00 00 00 00 00 00   	RESB	24
-       0000002A 00 00 00 00 00 00 00 00 00 00 
-       00000034 00 00 00 00 
+     7 00000000                                 [FILE "int.c"]
+     8                                          [SECTION .text]
+     9 00000000                                 	GLOBAL	_init_pic
+    10 00000000                                 _init_pic:
+    11 00000000 55                              	PUSH	EBP
+    12 00000001 89 E5                           	MOV	EBP,ESP
+    13 00000003 68 000000FF                     	PUSH	255
+    14 00000008 6A 21                           	PUSH	33
+    15 0000000A E8 [00000000]                   	CALL	_io_out8
+    16 0000000F 68 000000FF                     	PUSH	255
+    17 00000014 68 000000A1                     	PUSH	161
+    18 00000019 E8 [00000000]                   	CALL	_io_out8
+    19 0000001E 6A 11                           	PUSH	17
+    20 00000020 6A 20                           	PUSH	32
+    21 00000022 E8 [00000000]                   	CALL	_io_out8
+    22 00000027 6A 20                           	PUSH	32
+    23 00000029 6A 21                           	PUSH	33
+    24 0000002B E8 [00000000]                   	CALL	_io_out8
+    25 00000030 83 C4 20                        	ADD	ESP,32
+    26 00000033 6A 04                           	PUSH	4
+    27 00000035 6A 21                           	PUSH	33
+    28 00000037 E8 [00000000]                   	CALL	_io_out8
+    29 0000003C 6A 01                           	PUSH	1
+    30 0000003E 6A 21                           	PUSH	33
+    31 00000040 E8 [00000000]                   	CALL	_io_out8
+    32 00000045 6A 11                           	PUSH	17
+    33 00000047 68 000000A0                     	PUSH	160
+    34 0000004C E8 [00000000]                   	CALL	_io_out8
+    35 00000051 6A 28                           	PUSH	40
+    36 00000053 68 000000A1                     	PUSH	161
+    37 00000058 E8 [00000000]                   	CALL	_io_out8
+    38 0000005D 83 C4 20                        	ADD	ESP,32
+    39 00000060 6A 02                           	PUSH	2
+    40 00000062 68 000000A1                     	PUSH	161
+    41 00000067 E8 [00000000]                   	CALL	_io_out8
+    42 0000006C 6A 01                           	PUSH	1
+    43 0000006E 68 000000A1                     	PUSH	161
+    44 00000073 E8 [00000000]                   	CALL	_io_out8
+    45 00000078 68 000000FB                     	PUSH	251
+    46 0000007D 6A 21                           	PUSH	33
+    47 0000007F E8 [00000000]                   	CALL	_io_out8
+    48 00000084 68 000000FF                     	PUSH	255
+    49 00000089 68 000000A1                     	PUSH	161
+    50 0000008E E8 [00000000]                   	CALL	_io_out8
+    51 00000093 C9                              	LEAVE
+    52 00000094 C3                              	RET
+    53 00000095                                 	GLOBAL	_inthandler27
+    54 00000095                                 _inthandler27:
+    55 00000095 55                              	PUSH	EBP
+    56 00000096 89 E5                           	MOV	EBP,ESP
+    57 00000098 6A 67                           	PUSH	103
+    58 0000009A 6A 20                           	PUSH	32
+    59 0000009C E8 [00000000]                   	CALL	_io_out8
+    60 000000A1 C9                              	LEAVE
+    61 000000A2 C3                              	RET
diff --git a/fyt/int.obj b/fyt/int.obj
index dcccb3b..f4cfd0c 100644
Binary files a/fyt/int.obj and b/fyt/int.obj differ
diff --git a/fyt/keyboard.c b/fyt/keyboard.c
index 7fdf91a..60b622b 100644
--- a/fyt/keyboard.c
+++ b/fyt/keyboard.c
@@ -1,5 +1,9 @@
 #include "bootpack.h"
 /*KeyBoard Controller*/
+
+struct FIFO32 *keyfifo;
+int keydata0;
+
 void wait_KBC_sendready(void)
 {
 	for (;;)
@@ -11,11 +15,27 @@ void wait_KBC_sendready(void)
 	}
 }
 
-void init_keyboard(void)
+void init_keyboard(struct FIFO32 *fifo, int data0)
 {
+	/*将fifo缓冲区中的信息保存到全局变量里*/
+	keyfifo = fifo;
+	keydata0 = data0;
+	/*键盘控制器的初始化*/
 	wait_KBC_sendready();
 	io_out8(PORT_KEYCMD, KEYCMD_WRITE_MODE);
 	wait_KBC_sendready();
 	io_out8(PORT_KEYDAT, KBC_MODE);
 	return;
+}
+
+// 键盘中断
+void inthandler21(int *exp)
+{
+	int data;
+	io_out8(PIC0_OCW2, 0x61); 		/* 通知PIC: "IRQ-01已受理完毕" */
+	data = io_in8(PORT_KEYDAT);
+
+	fifo32_put(keyfifo, data + keydata0);
+
+	return;
 }
\ No newline at end of file
diff --git a/fyt/keyboard.lst b/fyt/keyboard.lst
index 57fd010..22cb0c7 100644
--- a/fyt/keyboard.lst
+++ b/fyt/keyboard.lst
@@ -5,31 +5,62 @@
      5 00000000                                 [BITS 32]
      6 00000000                                 	EXTERN	_io_in8
      7 00000000                                 	EXTERN	_io_out8
-     8 00000000                                 [FILE "keyboard.c"]
-     9                                          [SECTION .text]
-    10 00000000                                 	GLOBAL	_wait_KBC_sendready
-    11 00000000                                 _wait_KBC_sendready:
-    12 00000000 55                              	PUSH	EBP
-    13 00000001 89 E5                           	MOV	EBP,ESP
-    14 00000003                                 L2:
-    15 00000003 6A 64                           	PUSH	100
-    16 00000005 E8 [00000000]                   	CALL	_io_in8
-    17 0000000A 5A                              	POP	EDX
-    18 0000000B 83 E0 02                        	AND	EAX,2
-    19 0000000E 75 F3                           	JNE	L2
-    20 00000010 C9                              	LEAVE
-    21 00000011 C3                              	RET
-    22 00000012                                 	GLOBAL	_init_keyboard
-    23 00000012                                 _init_keyboard:
-    24 00000012 55                              	PUSH	EBP
-    25 00000013 89 E5                           	MOV	EBP,ESP
-    26 00000015 E8 FFFFFFE6                     	CALL	_wait_KBC_sendready
-    27 0000001A 6A 60                           	PUSH	96
-    28 0000001C 6A 64                           	PUSH	100
-    29 0000001E E8 [00000000]                   	CALL	_io_out8
-    30 00000023 E8 FFFFFFD8                     	CALL	_wait_KBC_sendready
-    31 00000028 6A 47                           	PUSH	71
+     8 00000000                                 	EXTERN	_fifo32_put
+     9 00000000                                 [FILE "keyboard.c"]
+    10                                          [SECTION .text]
+    11 00000000                                 	GLOBAL	_wait_KBC_sendready
+    12 00000000                                 _wait_KBC_sendready:
+    13 00000000 55                              	PUSH	EBP
+    14 00000001 89 E5                           	MOV	EBP,ESP
+    15 00000003                                 L2:
+    16 00000003 6A 64                           	PUSH	100
+    17 00000005 E8 [00000000]                   	CALL	_io_in8
+    18 0000000A 5A                              	POP	EDX
+    19 0000000B 83 E0 02                        	AND	EAX,2
+    20 0000000E 75 F3                           	JNE	L2
+    21 00000010 C9                              	LEAVE
+    22 00000011 C3                              	RET
+    23 00000012                                 	GLOBAL	_init_keyboard
+    24 00000012                                 _init_keyboard:
+    25 00000012 55                              	PUSH	EBP
+    26 00000013 89 E5                           	MOV	EBP,ESP
+    27 00000015 8B 45 08                        	MOV	EAX,DWORD [8+EBP]
+    28 00000018 A3 [00000000]                   	MOV	DWORD [_keyfifo],EAX
+    29 0000001D 8B 45 0C                        	MOV	EAX,DWORD [12+EBP]
+    30 00000020 A3 [00000004]                   	MOV	DWORD [_keydata0],EAX
+    31 00000025 E8 FFFFFFD6                     	CALL	_wait_KBC_sendready
     32 0000002A 6A 60                           	PUSH	96
-    33 0000002C E8 [00000000]                   	CALL	_io_out8
-    34 00000031 C9                              	LEAVE
-    35 00000032 C3                              	RET
+    33 0000002C 6A 64                           	PUSH	100
+    34 0000002E E8 [00000000]                   	CALL	_io_out8
+    35 00000033 E8 FFFFFFC8                     	CALL	_wait_KBC_sendready
+    36 00000038 59                              	POP	ECX
+    37 00000039 58                              	POP	EAX
+    38 0000003A C7 45 0C 00000047               	MOV	DWORD [12+EBP],71
+    39 00000041 C7 45 08 00000060               	MOV	DWORD [8+EBP],96
+    40 00000048 C9                              	LEAVE
+    41 00000049 E9 [00000000]                   	JMP	_io_out8
+    42 0000004E                                 	GLOBAL	_inthandler21
+    43 0000004E                                 _inthandler21:
+    44 0000004E 55                              	PUSH	EBP
+    45 0000004F 89 E5                           	MOV	EBP,ESP
+    46 00000051 6A 61                           	PUSH	97
+    47 00000053 6A 20                           	PUSH	32
+    48 00000055 E8 [00000000]                   	CALL	_io_out8
+    49 0000005A 6A 60                           	PUSH	96
+    50 0000005C E8 [00000000]                   	CALL	_io_in8
+    51 00000061 03 05 [00000004]                	ADD	EAX,DWORD [_keydata0]
+    52 00000067 50                              	PUSH	EAX
+    53 00000068 FF 35 [00000000]                	PUSH	DWORD [_keyfifo]
+    54 0000006E E8 [00000000]                   	CALL	_fifo32_put
+    55 00000073 C9                              	LEAVE
+    56 00000074 C3                              	RET
+    57 00000075                                 	GLOBAL	_keyfifo
+    58                                          [SECTION .data]
+    59 00000000                                 	ALIGNB	4
+    60 00000000                                 _keyfifo:
+    61 00000000 00 00 00 00                     	RESB	4
+    62 00000004                                 	GLOBAL	_keydata0
+    63                                          [SECTION .data]
+    64 00000004                                 	ALIGNB	4
+    65 00000004                                 _keydata0:
+    66 00000004 00 00 00 00                     	RESB	4
diff --git a/fyt/keyboard.obj b/fyt/keyboard.obj
index 86f24e2..1671be2 100644
Binary files a/fyt/keyboard.obj and b/fyt/keyboard.obj differ
diff --git a/fyt/mouse.c b/fyt/mouse.c
index 82ef8c6..8b919a0 100644
--- a/fyt/mouse.c
+++ b/fyt/mouse.c
@@ -1,11 +1,29 @@
 #include "bootpack.h"
 
-void enable_mouse(struct MOUSE_DEC *mdec)
+struct FIFO32 *mousefifo;
+int mousedata0;
+
+/*鼠标中断*/
+void inthandler2c(int *exp)
+{
+	int data;
+	io_out8(PIC1_OCW2, 0x64);		/* 通知PIC1: "IRQ-12已受理完毕" */
+	io_out8(PIC0_OCW2, 0x62);		/* 通知PIC0: "IRQ-02已受理完毕" */
+	data = io_in8(PORT_KEYDAT);
+	fifo32_put(mousefifo, data+ mousedata0);
+	return;
+}
+
+void enable_mouse(struct FIFO32 *fifo, int data0, struct MOUSE_DEC *mdec)
 {
+	mousefifo = fifo;
+	mousedata0 = data0;
+
 	wait_KBC_sendready();
 	io_out8(PORT_KEYCMD, KEYCMD_SENDTO_MOUSE);
 	wait_KBC_sendready();
 	io_out8(PORT_KEYDAT, MOUSECMD_ENABLE);
+	
 	mdec->phase = 0;
 	return;
 }
diff --git a/fyt/mouse.lst b/fyt/mouse.lst
index 84a93d4..8a94ffa 100644
--- a/fyt/mouse.lst
+++ b/fyt/mouse.lst
@@ -3,94 +3,128 @@
      3 00000000                                 [OPTIMIZE 1]
      4 00000000                                 [OPTION 1]
      5 00000000                                 [BITS 32]
-     6 00000000                                 	EXTERN	_wait_KBC_sendready
-     7 00000000                                 	EXTERN	_io_out8
-     8 00000000                                 [FILE "mouse.c"]
-     9                                          [SECTION .text]
-    10 00000000                                 	GLOBAL	_enable_mouse
-    11 00000000                                 _enable_mouse:
-    12 00000000 55                              	PUSH	EBP
-    13 00000001 89 E5                           	MOV	EBP,ESP
-    14 00000003 E8 [00000000]                   	CALL	_wait_KBC_sendready
-    15 00000008 68 000000D4                     	PUSH	212
-    16 0000000D 6A 64                           	PUSH	100
-    17 0000000F E8 [00000000]                   	CALL	_io_out8
-    18 00000014 E8 [00000000]                   	CALL	_wait_KBC_sendready
-    19 00000019 68 000000F4                     	PUSH	244
-    20 0000001E 6A 60                           	PUSH	96
-    21 00000020 E8 [00000000]                   	CALL	_io_out8
-    22 00000025 8B 45 08                        	MOV	EAX,DWORD [8+EBP]
-    23 00000028 C6 40 03 00                     	MOV	BYTE [3+EAX],0
-    24 0000002C C9                              	LEAVE
-    25 0000002D C3                              	RET
-    26 0000002E                                 	GLOBAL	_mouse_decode
-    27 0000002E                                 _mouse_decode:
-    28 0000002E 55                              	PUSH	EBP
-    29 0000002F 89 E5                           	MOV	EBP,ESP
-    30 00000031 56                              	PUSH	ESI
-    31 00000032 53                              	PUSH	EBX
-    32 00000033 8B 55 08                        	MOV	EDX,DWORD [8+EBP]
-    33 00000036 8B 4D 0C                        	MOV	ECX,DWORD [12+EBP]
-    34 00000039 89 CE                           	MOV	ESI,ECX
-    35 0000003B 8A 42 03                        	MOV	AL,BYTE [3+EDX]
-    36 0000003E 84 C0                           	TEST	AL,AL
-    37 00000040 75 11                           	JNE	L3
-    38 00000042 80 F9 FA                        	CMP	CL,-6
-    39 00000045 74 06                           	JE	L12
-    40 00000047                                 L11:
-    41 00000047 31 C0                           	XOR	EAX,EAX
-    42 00000049                                 L2:
-    43 00000049 5B                              	POP	EBX
-    44 0000004A 5E                              	POP	ESI
-    45 0000004B 5D                              	POP	EBP
-    46 0000004C C3                              	RET
-    47 0000004D                                 L12:
-    48 0000004D C6 42 03 01                     	MOV	BYTE [3+EDX],1
-    49 00000051 EB F4                           	JMP	L11
-    50 00000053                                 L3:
-    51 00000053 3C 01                           	CMP	AL,1
-    52 00000055 74 61                           	JE	L13
-    53 00000057 3C 02                           	CMP	AL,2
-    54 00000059 74 54                           	JE	L14
-    55 0000005B 3C 03                           	CMP	AL,3
-    56 0000005D 74 05                           	JE	L15
-    57 0000005F 83 C8 FF                        	OR	EAX,-1
-    58 00000062 EB E5                           	JMP	L2
-    59 00000064                                 L15:
-    60 00000064 8A 1A                           	MOV	BL,BYTE [EDX]
-    61 00000066 81 E6 000000FF                  	AND	ESI,255
-    62 0000006C 89 D8                           	MOV	EAX,EBX
-    63 0000006E 88 4A 02                        	MOV	BYTE [2+EDX],CL
-    64 00000071 83 E0 07                        	AND	EAX,7
-    65 00000074 89 72 08                        	MOV	DWORD [8+EDX],ESI
-    66 00000077 89 42 0C                        	MOV	DWORD [12+EDX],EAX
-    67 0000007A 88 D8                           	MOV	AL,BL
-    68 0000007C 0F B6 4A 01                     	MOVZX	ECX,BYTE [1+EDX]
-    69 00000080 83 E0 10                        	AND	EAX,16
-    70 00000083 89 4A 04                        	MOV	DWORD [4+EDX],ECX
-    71 00000086 C6 42 03 01                     	MOV	BYTE [3+EDX],1
-    72 0000008A 84 C0                           	TEST	AL,AL
-    73 0000008C 74 09                           	JE	L9
-    74 0000008E 81 C9 FFFFFF00                  	OR	ECX,-256
-    75 00000094 89 4A 04                        	MOV	DWORD [4+EDX],ECX
-    76 00000097                                 L9:
-    77 00000097 83 E3 20                        	AND	EBX,32
-    78 0000009A 84 DB                           	TEST	BL,BL
-    79 0000009C 74 07                           	JE	L10
-    80 0000009E 81 4A 08 FFFFFF00               	OR	DWORD [8+EDX],-256
-    81 000000A5                                 L10:
-    82 000000A5 F7 5A 08                        	NEG	DWORD [8+EDX]
-    83 000000A8 B8 00000001                     	MOV	EAX,1
-    84 000000AD EB 9A                           	JMP	L2
-    85 000000AF                                 L14:
-    86 000000AF 88 4A 01                        	MOV	BYTE [1+EDX],CL
-    87 000000B2 C6 42 03 03                     	MOV	BYTE [3+EDX],3
-    88 000000B6 EB 8F                           	JMP	L11
-    89 000000B8                                 L13:
-    90 000000B8 83 E6 C8                        	AND	ESI,-56
-    91 000000BB 89 F0                           	MOV	EAX,ESI
-    92 000000BD 3C 08                           	CMP	AL,8
-    93 000000BF 75 86                           	JNE	L11
-    94 000000C1 88 0A                           	MOV	BYTE [EDX],CL
-    95 000000C3 C6 42 03 02                     	MOV	BYTE [3+EDX],2
-    96 000000C7 E9 FFFFFF7B                     	JMP	L11
+     6 00000000                                 	EXTERN	_io_out8
+     7 00000000                                 	EXTERN	_io_in8
+     8 00000000                                 	EXTERN	_fifo32_put
+     9 00000000                                 	EXTERN	_wait_KBC_sendready
+    10 00000000                                 [FILE "mouse.c"]
+    11                                          [SECTION .text]
+    12 00000000                                 	GLOBAL	_inthandler2c
+    13 00000000                                 _inthandler2c:
+    14 00000000 55                              	PUSH	EBP
+    15 00000001 89 E5                           	MOV	EBP,ESP
+    16 00000003 6A 64                           	PUSH	100
+    17 00000005 68 000000A0                     	PUSH	160
+    18 0000000A E8 [00000000]                   	CALL	_io_out8
+    19 0000000F 6A 62                           	PUSH	98
+    20 00000011 6A 20                           	PUSH	32
+    21 00000013 E8 [00000000]                   	CALL	_io_out8
+    22 00000018 6A 60                           	PUSH	96
+    23 0000001A E8 [00000000]                   	CALL	_io_in8
+    24 0000001F 03 05 [00000004]                	ADD	EAX,DWORD [_mousedata0]
+    25 00000025 50                              	PUSH	EAX
+    26 00000026 FF 35 [00000000]                	PUSH	DWORD [_mousefifo]
+    27 0000002C E8 [00000000]                   	CALL	_fifo32_put
+    28 00000031 C9                              	LEAVE
+    29 00000032 C3                              	RET
+    30 00000033                                 	GLOBAL	_enable_mouse
+    31 00000033                                 _enable_mouse:
+    32 00000033 55                              	PUSH	EBP
+    33 00000034 89 E5                           	MOV	EBP,ESP
+    34 00000036 8B 45 08                        	MOV	EAX,DWORD [8+EBP]
+    35 00000039 A3 [00000000]                   	MOV	DWORD [_mousefifo],EAX
+    36 0000003E 8B 45 0C                        	MOV	EAX,DWORD [12+EBP]
+    37 00000041 A3 [00000004]                   	MOV	DWORD [_mousedata0],EAX
+    38 00000046 E8 [00000000]                   	CALL	_wait_KBC_sendready
+    39 0000004B 68 000000D4                     	PUSH	212
+    40 00000050 6A 64                           	PUSH	100
+    41 00000052 E8 [00000000]                   	CALL	_io_out8
+    42 00000057 E8 [00000000]                   	CALL	_wait_KBC_sendready
+    43 0000005C 68 000000F4                     	PUSH	244
+    44 00000061 6A 60                           	PUSH	96
+    45 00000063 E8 [00000000]                   	CALL	_io_out8
+    46 00000068 8B 45 10                        	MOV	EAX,DWORD [16+EBP]
+    47 0000006B C6 40 03 00                     	MOV	BYTE [3+EAX],0
+    48 0000006F C9                              	LEAVE
+    49 00000070 C3                              	RET
+    50 00000071                                 	GLOBAL	_mouse_decode
+    51 00000071                                 _mouse_decode:
+    52 00000071 55                              	PUSH	EBP
+    53 00000072 89 E5                           	MOV	EBP,ESP
+    54 00000074 56                              	PUSH	ESI
+    55 00000075 53                              	PUSH	EBX
+    56 00000076 8B 55 08                        	MOV	EDX,DWORD [8+EBP]
+    57 00000079 8B 4D 0C                        	MOV	ECX,DWORD [12+EBP]
+    58 0000007C 89 CE                           	MOV	ESI,ECX
+    59 0000007E 8A 42 03                        	MOV	AL,BYTE [3+EDX]
+    60 00000081 84 C0                           	TEST	AL,AL
+    61 00000083 75 11                           	JNE	L4
+    62 00000085 80 F9 FA                        	CMP	CL,-6
+    63 00000088 74 06                           	JE	L13
+    64 0000008A                                 L12:
+    65 0000008A 31 C0                           	XOR	EAX,EAX
+    66 0000008C                                 L3:
+    67 0000008C 5B                              	POP	EBX
+    68 0000008D 5E                              	POP	ESI
+    69 0000008E 5D                              	POP	EBP
+    70 0000008F C3                              	RET
+    71 00000090                                 L13:
+    72 00000090 C6 42 03 01                     	MOV	BYTE [3+EDX],1
+    73 00000094 EB F4                           	JMP	L12
+    74 00000096                                 L4:
+    75 00000096 3C 01                           	CMP	AL,1
+    76 00000098 74 61                           	JE	L14
+    77 0000009A 3C 02                           	CMP	AL,2
+    78 0000009C 74 54                           	JE	L15
+    79 0000009E 3C 03                           	CMP	AL,3
+    80 000000A0 74 05                           	JE	L16
+    81 000000A2 83 C8 FF                        	OR	EAX,-1
+    82 000000A5 EB E5                           	JMP	L3
+    83 000000A7                                 L16:
+    84 000000A7 8A 1A                           	MOV	BL,BYTE [EDX]
+    85 000000A9 81 E6 000000FF                  	AND	ESI,255
+    86 000000AF 89 D8                           	MOV	EAX,EBX
+    87 000000B1 88 4A 02                        	MOV	BYTE [2+EDX],CL
+    88 000000B4 83 E0 07                        	AND	EAX,7
+    89 000000B7 89 72 08                        	MOV	DWORD [8+EDX],ESI
+    90 000000BA 89 42 0C                        	MOV	DWORD [12+EDX],EAX
+    91 000000BD 88 D8                           	MOV	AL,BL
+    92 000000BF 0F B6 4A 01                     	MOVZX	ECX,BYTE [1+EDX]
+    93 000000C3 83 E0 10                        	AND	EAX,16
+    94 000000C6 89 4A 04                        	MOV	DWORD [4+EDX],ECX
+    95 000000C9 C6 42 03 01                     	MOV	BYTE [3+EDX],1
+    96 000000CD 84 C0                           	TEST	AL,AL
+    97 000000CF 74 09                           	JE	L10
+    98 000000D1 81 C9 FFFFFF00                  	OR	ECX,-256
+    99 000000D7 89 4A 04                        	MOV	DWORD [4+EDX],ECX
+   100 000000DA                                 L10:
+   101 000000DA 83 E3 20                        	AND	EBX,32
+   102 000000DD 84 DB                           	TEST	BL,BL
+   103 000000DF 74 07                           	JE	L11
+   104 000000E1 81 4A 08 FFFFFF00               	OR	DWORD [8+EDX],-256
+   105 000000E8                                 L11:
+   106 000000E8 F7 5A 08                        	NEG	DWORD [8+EDX]
+   107 000000EB B8 00000001                     	MOV	EAX,1
+   108 000000F0 EB 9A                           	JMP	L3
+   109 000000F2                                 L15:
+   110 000000F2 88 4A 01                        	MOV	BYTE [1+EDX],CL
+   111 000000F5 C6 42 03 03                     	MOV	BYTE [3+EDX],3
+   112 000000F9 EB 8F                           	JMP	L12
+   113 000000FB                                 L14:
+   114 000000FB 83 E6 C8                        	AND	ESI,-56
+   115 000000FE 89 F0                           	MOV	EAX,ESI
+   116 00000100 3C 08                           	CMP	AL,8
+   117 00000102 75 86                           	JNE	L12
+   118 00000104 88 0A                           	MOV	BYTE [EDX],CL
+   119 00000106 C6 42 03 02                     	MOV	BYTE [3+EDX],2
+   120 0000010A E9 FFFFFF7B                     	JMP	L12
+   121 0000010F                                 	GLOBAL	_mousefifo
+   122                                          [SECTION .data]
+   123 00000000                                 	ALIGNB	4
+   124 00000000                                 _mousefifo:
+   125 00000000 00 00 00 00                     	RESB	4
+   126 00000004                                 	GLOBAL	_mousedata0
+   127                                          [SECTION .data]
+   128 00000004                                 	ALIGNB	4
+   129 00000004                                 _mousedata0:
+   130 00000004 00 00 00 00                     	RESB	4
diff --git a/fyt/mouse.obj b/fyt/mouse.obj
index df7c517..df6b76d 100644
Binary files a/fyt/mouse.obj and b/fyt/mouse.obj differ
diff --git a/fyt/timer.c b/fyt/timer.c
index eda2a63..d7c6d7f 100644
--- a/fyt/timer.c
+++ b/fyt/timer.c
@@ -5,17 +5,23 @@ struct TIMERCTL timerctl;
 void init_pit(void)
 {
 	int i;
+	struct TIMER *t;
 	io_out8(PIT_CTRL, 0x34);
 	/*11932 = 0x9c2e*/
 	io_out8(PIT_CNT0, 0x9c);
 	io_out8(PIT_CNT0, 0x2e);
 	timerctl.count = 0;
-	timerctl.next = 0xffffffff;
-	timerctl.useing = 0;
-	for (i = 0; i < MAX_TIMER; i++)
+	for (i = 0; i < MAX_TIMER; ++i)
 	{
-		timerctl.timers0[i].flags = 0;
+		timerctl.timers0[i].flags = 0; 		/*没有使用*/
 	}
+	t = timer_alloc(); 				/*引入哨兵*/
+	t->timeout = 0xffffffff;
+	t->flags = TIMER_FLAGS_USING;
+	t->next = 0; 					/*哨兵插入末尾*/
+	timerctl.t0 = t;
+	timerctl.next = 0xffffffff; 	/*设置下一个超时时刻为哨兵*/
+	
 	return;
 }
 
@@ -39,7 +45,7 @@ void timer_free(struct TIMER *timer)
 	return;
 }
 
-void timer_init(struct TIMER *timer, struct FIFO8 *fifo, unsigned char data)
+void timer_init(struct TIMER *timer, struct FIFO32 *fifo, int data)
 {
 	timer->fifo = fifo;
 	timer->data = data;
@@ -48,65 +54,75 @@ void timer_init(struct TIMER *timer, struct FIFO8 *fifo, unsigned char data)
 
 void timer_settime(struct TIMER *timer, unsigned int timeout)
 {
-	int e, i, j;
+	int e;
+	struct TIMER *t, *s;
+
 	timer->timeout = timeout + timerctl.count;
 	timer->flags = TIMER_FLAGS_USING;
 	e = io_load_eflags();
 	io_cli();
-	/*搜索注册位置*/
-	for (i = 0; i < timerctl.useing; i++)	
+
+	t = timerctl.t0;
+	if (timer->timeout <= t->timeout)
 	{
-		if (timerctl.timers[i]->timeout >= timer->timeout)
-		{
-			break;
-		}
+		/*插入最前面的情况下*/
+		timerctl.t0 = timer;
+		timer->next = t; 		/*下面是t*/
+		timerctl.next = timer->timeout;
+		io_store_eflags(e);
+		return;
 	}
-	/*i号之后的全部后移一位*/
-	for (j = timerctl.useing; j > i; j--)
+	/*搜索插入位置*/
+	for (;;)	
 	{
-		timerctl.timers[j] = timerctl.timers[j-1];
+		s = t;
+		t = t->next;
+		if (t == 0)
+		{
+			break; 		/*最后面*/
+		}
+
+		if (timer->timeout <= t->timeout)
+		{
+			/*插入到s和t之间时*/
+			s->next = timer; 		/*s的下一个是timer*/
+			timer->next = t; 		/*timer的下一个是t*/
+			io_store_eflags(e);
+			return;
+		}
 	}
-	timerctl.useing++;
-	/*插入到空位上*/
-	timerctl.timwarning: LF will be replaced by CRLF in fyt/bootpack.lst.
The file will have its original line endings in your working directory.
ers[i] = timer;
-	timerctl.next = timerctl.timers[0]->timeout;
-	io_store_eflags(e);
 	return;
 }
 
 
 void inthandler20(int *esp)
 {
-	int i, j;
-	io_out8(PIC0_OCW2, 0x60); 			/*把IRQ-00信号接收结束的信息通知给PIC*/
+	int i;
+	struct TIMER *timer;
+	io_out8(PIC0_OCW2, 0x60);
 	timerctl.count++;
 	if (timerctl.next > timerctl.count)
 	{
 		/*还不到下一个时刻*/
 		return;
 	}
-	for (i = 0; i < timerctl.useing; i++)
+	timer = timerctl.t0;
+	for (;;)
 	{
 		/*timers的定时器都处于动作中，所以不确定flags*/
-		if(timerctl.timers[i]->timeout > timerctl.count)
+		if(timer->timeout > timerctl.count)
 		{
 			break;
 		}
 		/*超时*/
-		timerctl.timers[i]->flags = TIMER_FLAGS_ALLOC;
-		fifo8_put(timerctl.timers[i]->fifo, timerctl.timers[i]->data);
-	}
-	/*正好有i个定时器超时了。其余的进行移位*/
-	timerctl.useing -= i;
-	for (j = 0; j < timerctl.useing; j++)
-	{
-		timerctl.timers[j] = timerctl.timers[i + j];
-	}
-	if (timerctl.useing > 0)
-	{
-		timerctl.next = timerctl.timers[0]->timeout;
-	} else {
-		timerctl.next = 0xffffffff;
+		timer->flags = TIMER_FLAGS_ALLOC;
+		fifo32_put(timer->fifo, timer->data);
+		timer = timer->next; 		/*下一定时器的地址赋给timer*/
 	}
+
+	/*timerctl.next的设定*/
+	timerctl.t0 = timer;
+	timerctl.next = timerctl.t0->timeout;
+	
 	return;
 }
diff --git a/fyt/timer.lst b/fyt/timer.lst
index a8fe9ec..71386e2 100644
--- a/fyt/timer.lst
+++ b/fyt/timer.lst
@@ -7,7 +7,7 @@
      7 00000000                                 	EXTERN	_io_load_eflags
      8 00000000                                 	EXTERN	_io_cli
      9 00000000                                 	EXTERN	_io_store_eflags
-    10 00000000                                 	EXTERN	_fifo8_put
+    10 00000000                                 	EXTERN	_fifo32_put
     11 00000000                                 [FILE "timer.c"]
     12                                          [SECTION .text]
     13 00000000                                 	GLOBAL	_init_pit
@@ -25,180 +25,143 @@
     25 0000001C E8 [00000000]                   	CALL	_io_out8
     26 00000021 BA [00002710]                   	MOV	EDX,_timerctl+10000
     27 00000026 C7 05 [00000000] 00000000       	MOV	DWORD [_timerctl],0
-    28 00000030 C7 05 [00000004] FFFFFFFF       	MOV	DWORD [_timerctl+4],-1
-    29 0000003A C7 05 [00000008] 00000000       	MOV	DWORD [_timerctl+8],0
-    30 00000044 83 C4 18                        	ADD	ESP,24
-    31 00000047 B8 [000007E0]                   	MOV	EAX,_timerctl+2016
-    32 0000004C                                 L6:
-    33 0000004C C7 00 00000000                  	MOV	DWORD [EAX],0
-    34 00000052 83 C0 10                        	ADD	EAX,16
-    35 00000055 39 D0                           	CMP	EAX,EDX
-    36 00000057 7E F3                           	JLE	L6
-    37 00000059 C9                              	LEAVE
-    38 0000005A C3                              	RET
-    39 0000005B                                 	GLOBAL	_timer_alloc
-    40 0000005B                                 _timer_alloc:
-    41 0000005B 55                              	PUSH	EBP
-    42 0000005C 31 D2                           	XOR	EDX,EDX
-    43 0000005E 89 E5                           	MOV	EBP,ESP
-    44 00000060 B8 [000007DC]                   	MOV	EAX,_timerctl+2012
-    45 00000065                                 L15:
-    46 00000065 83 78 04 00                     	CMP	DWORD [4+EAX],0
-    47 00000069 74 10                           	JE	L18
-    48 0000006B 42                              	INC	EDX
-    49 0000006C 83 C0 10                        	ADD	EAX,16
-    50 0000006F 81 FA 000001F3                  	CMP	EDX,499
-    51 00000075 7E EE                           	JLE	L15
-    52 00000077 31 C0                           	XOR	EAX,EAX
-    53 00000079                                 L9:
-    54 00000079 5D                              	POP	EBP
-    55 0000007A C3                              	RET
-    56 0000007B                                 L18:
-    57 0000007B C7 40 04 00000001               	MOV	DWORD [4+EAX],1
-    58 00000082 EB F5                           	JMP	L9
-    59 00000084                                 	GLOBAL	_timer_free
-    60 00000084                                 _timer_free:
-    61 00000084 55                              	PUSH	EBP
-    62 00000085 89 E5                           	MOV	EBP,ESP
-    63 00000087 8B 45 08                        	MOV	EAX,DWORD [8+EBP]
-    64 0000008A C7 40 04 00000000               	MOV	DWORD [4+EAX],0
-    65 00000091 5D                              	POP	EBP
-    66 00000092 C3                              	RET
-    67 00000093                                 	GLOBAL	_timer_init
-    68 00000093                                 _timer_init:
-    69 00000093 55                              	PUSH	EBP
-    70 00000094 89 E5                           	MOV	EBP,ESP
-    71 00000096 8B 45 08                        	MOV	EAX,DWORD [8+EBP]
-    72 00000099 8B 55 0C                        	MOV	EDX,DWORD [12+EBP]
-    73 0000009C 89 50 08                        	MOV	DWORD [8+EAX],EDX
-    74 0000009F 8B 55 10                        	MOV	EDX,DWORD [16+EBP]
-    75 000000A2 88 50 0C                        	MOV	BYTE [12+EAX],DL
-    76 000000A5 5D                              	POP	EBP
-    77 000000A6 C3                              	RET
-    78 000000A7                                 	GLOBAL	_timer_settime
-    79 000000A7                                 _timer_settime:
-    80 000000A7 55                              	PUSH	EBP
-    81 000000A8 89 E5                           	MOV	EBP,ESP
-    82 000000AA 57                              	PUSH	EDI
-    83 000000AB 56                              	PUSH	ESI
-    84 000000AC 31 F6                           	XOR	ESI,ESI
-    85 000000AE 53                              	PUSH	EBX
-    86 000000AF 52                              	PUSH	EDX
-    87 000000B0 A1 [00000000]                   	MOV	EAX,DWORD [_timerctl]
-    88 000000B5 8B 7D 08                        	MOV	EDI,DWORD [8+EBP]
-    89 000000B8 03 45 0C                        	ADD	EAX,DWORD [12+EBP]
-    90 000000BB C7 47 04 00000002               	MOV	DWORD [4+EDI],2
-    91 000000C2 89 07                           	MOV	DWORD [EDI],EAX
-    92 000000C4 E8 [00000000]                   	CALL	_io_load_eflags
-    93 000000C9 89 45 F0                        	MOV	DWORD [-16+EBP],EAX
-    94 000000CC E8 [00000000]                   	CALL	_io_cli
-    95 000000D1 8B 1D [00000008]                	MOV	EBX,DWORD [_timerctl+8]
-    96 000000D7 39 DE                           	CMP	ESI,EBX
-    97 000000D9 73 12                           	JAE	L23
-    98 000000DB                                 L27:
-    99 000000DB 8B 14 B5 [0000000C]             	MOV	EDX,DWORD [_timerctl+12+ESI*4]
-   100 000000E2 8B 07                           	MOV	EAX,DWORD [EDI]
-   101 000000E4 39 02                           	CMP	DWORD [EDX],EAX
-   102 000000E6 73 05                           	JAE	L23
-   103 000000E8 46                              	INC	ESI
-   104 000000E9 39 DE                           	CMP	ESI,EBX
-   105 000000EB 72 EE                           	JB	L27
-   106 000000ED                                 L23:
-   107 000000ED 89 D9                           	MOV	ECX,EBX
-   108 000000EF 39 F3                           	CMP	EBX,ESI
-   109 000000F1 7E 11                           	JLE	L35
-   110 000000F3                                 L32:
-   111 000000F3 BA [0000000C]                   	MOV	EDX,_timerctl+12
-   112 000000F8 8B 44 8A FC                     	MOV	EAX,DWORD [-4+EDX+ECX*4]
-   113 000000FC 89 04 8A                        	MOV	DWORD [EDX+ECX*4],EAX
-   114 000000FF 49                              	DEC	ECX
-   115 00000100 39 F1                           	CMP	ECX,ESI
-   116 00000102 7F EF                           	JG	L32
-   117 00000104                                 L35:
-   118 00000104 89 3C B5 [0000000C]             	MOV	DWORD [_timerctl+12+ESI*4],EDI
-   119 0000010B 8D 43 01                        	LEA	EAX,DWORD [1+EBX]
-   120 0000010E A3 [00000008]                   	MOV	DWORD [_timerctl+8],EAX
-   121 00000113 A1 [0000000C]                   	MOV	EAX,DWORD [_timerctl+12]
-   122 00000118 8B 00                           	MOV	EAX,DWORD [EAX]
-   123 0000011A A3 [00000004]                   	MOV	DWORD [_timerctl+4],EAX
-   124 0000011F 8B 45 F0                        	MOV	EAX,DWORD [-16+EBP]
-   125 00000122 89 45 08                        	MOV	DWORD [8+EBP],EAX
-   126 00000125 58                              	POP	EAX
-   127 00000126 5B                              	POP	EBX
-   128 00000127 5E                              	POP	ESI
-   129 00000128 5F                              	POP	EDI
-   130 00000129 5D                              	POP	EBP
-   131 0000012A E9 [00000000]                   	JMP	_io_store_eflags
-   132 0000012F                                 	GLOBAL	_inthandler20
-   133 0000012F                                 _inthandler20:
-   134 0000012F 55                              	PUSH	EBP
-   135 00000130 89 E5                           	MOV	EBP,ESP
-   136 00000132 56                              	PUSH	ESI
-   137 00000133 53                              	PUSH	EBX
-   138 00000134 6A 60                           	PUSH	96
-   139 00000136 6A 20                           	PUSH	32
-   140 00000138 E8 [00000000]                   	CALL	_io_out8
-   141 0000013D 5A                              	POP	EDX
-   142 0000013E A1 [00000000]                   	MOV	EAX,DWORD [_timerctl]
-   143 00000143 59                              	POP	ECX
-   144 00000144 40                              	INC	EAX
-   145 00000145 A3 [00000000]                   	MOV	DWORD [_timerctl],EAX
-   146 0000014A 39 05 [00000004]                	CMP	DWORD [_timerctl+4],EAX
-   147 00000150 77 75                           	JA	L36
-   148 00000152 31 DB                           	XOR	EBX,EBX
-   149 00000154 3B 1D [00000008]                	CMP	EBX,DWORD [_timerctl+8]
-   150 0000015A 73 2F                           	JAE	L39
-   151 0000015C                                 L43:
-   152 0000015C 8B 14 9D [0000000C]             	MOV	EDX,DWORD [_timerctl+12+EBX*4]
-   153 00000163 A1 [00000000]                   	MOV	EAX,DWORD [_timerctl]
-   154 00000168 39 02                           	CMP	DWORD [EDX],EAX
-   155 0000016A 77 1F                           	JA	L39
-   156 0000016C 0F B6 42 0C                     	MOVZX	EAX,BYTE [12+EDX]
-   157 00000170 C7 42 04 00000001               	MOV	DWORD [4+EDX],1
-   158 00000177 50                              	PUSH	EAX
-   159 00000178 43                              	INC	EBX
-   160 00000179 FF 72 08                        	PUSH	DWORD [8+EDX]
-   161 0000017C E8 [00000000]                   	CALL	_fifo8_put
-   162 00000181 3B 1D [00000008]                	CMP	EBX,DWORD [_timerctl+8]
-   163 00000187 59                              	POP	ECX
-   164 00000188 5E                              	POP	ESI
-   165 00000189 72 D1                           	JB	L43
-   166 0000018B                                 L39:
-   167 0000018B A1 [00000008]                   	MOV	EAX,DWORD [_timerctl+8]
-   168 00000190 31 C9                           	XOR	ECX,ECX
-   169 00000192 29 D8                           	SUB	EAX,EBX
-   170 00000194 A3 [00000008]                   	MOV	DWORD [_timerctl+8],EAX
-   171 00000199 39 C1                           	CMP	ECX,EAX
-   172 0000019B 73 15                           	JAE	L53
-   173 0000019D 89 C6                           	MOV	ESI,EAX
-   174 0000019F                                 L48:
-   175 0000019F B8 [0000000C]                   	MOV	EAX,_timerctl+12
-   176 000001A4 8D 14 19                        	LEA	EDX,DWORD [ECX+EBX*1]
-   177 000001A7 8B 14 90                        	MOV	EDX,DWORD [EAX+EDX*4]
-   178 000001AA 89 14 88                        	MOV	DWORD [EAX+ECX*4],EDX
-   179 000001AD 41                              	INC	ECX
-   180 000001AE 39 F1                           	CMP	ECX,ESI
-   181 000001B0 72 ED                           	JB	L48
-   182 000001B2                                 L53:
-   183 000001B2 83 3D [00000008] 00             	CMP	DWORD [_timerctl+8],0
-   184 000001B9 74 13                           	JE	L49
-   185 000001BB A1 [0000000C]                   	MOV	EAX,DWORD [_timerctl+12]
-   186 000001C0 8B 00                           	MOV	EAX,DWORD [EAX]
-   187 000001C2 A3 [00000004]                   	MOV	DWORD [_timerctl+4],EAX
-   188 000001C7                                 L36:
-   189 000001C7 8D 65 F8                        	LEA	ESP,DWORD [-8+EBP]
-   190 000001CA 5B                              	POP	EBX
-   191 000001CB 5E                              	POP	ESI
-   192 000001CC 5D                              	POP	EBP
-   193 000001CD C3                              	RET
-   194 000001CE                                 L49:
-   195 000001CE C7 05 [00000004] FFFFFFFF       	MOV	DWORD [_timerctl+4],-1
-   196 000001D8 EB ED                           	JMP	L36
-   197 000001DA                                 	GLOBAL	_timerctl
-   198                                          [SECTION .data]
-   199 00000000                                 	ALIGNB	16
-   200 00000000                                 _timerctl:
-   201 00000000 00 00 00 00 00 00 00 00 00 00   	RESB	10012
+    28 00000030 83 C4 18                        	ADD	ESP,24
+    29 00000033 B8 [00000014]                   	MOV	EAX,_timerctl+20
+    30 00000038                                 L6:
+    31 00000038 C7 00 00000000                  	MOV	DWORD [EAX],0
+    32 0000003E 83 C0 14                        	ADD	EAX,20
+    33 00000041 39 D0                           	CMP	EAX,EDX
+    34 00000043 7E F3                           	JLE	L6
+    35 00000045 E8 00000025                     	CALL	_timer_alloc
+    36 0000004A C7 40 04 FFFFFFFF               	MOV	DWORD [4+EAX],-1
+    37 00000051 C7 40 08 00000002               	MOV	DWORD [8+EAX],2
+    38 00000058 C7 00 00000000                  	MOV	DWORD [EAX],0
+    39 0000005E A3 [00000008]                   	MOV	DWORD [_timerctl+8],EAX
+    40 00000063 C7 05 [00000004] FFFFFFFF       	MOV	DWORD [_timerctl+4],-1
+    41 0000006D C9                              	LEAVE
+    42 0000006E C3                              	RET
+    43 0000006F                                 	GLOBAL	_timer_alloc
+    44 0000006F                                 _timer_alloc:
+    45 0000006F 55                              	PUSH	EBP
+    46 00000070 31 D2                           	XOR	EDX,EDX
+    47 00000072 89 E5                           	MOV	EBP,ESP
+    48 00000074 B8 [0000000C]                   	MOV	EAX,_timerctl+12
+    49 00000079                                 L15:
+    50 00000079 83 78 08 00                     	CMP	DWORD [8+EAX],0
+    51 0000007D 74 10                           	JE	L18
+    52 0000007F 42                              	INC	EDX
+    53 00000080 83 C0 14                        	ADD	EAX,20
+    54 00000083 81 FA 000001F3                  	CMP	EDX,499
+    55 00000089 7E EE                           	JLE	L15
+    56 0000008B 31 C0                           	XOR	EAX,EAX
+    57 0000008D                                 L9:
+    58 0000008D 5D                              	POP	EBP
+    59 0000008E C3                              	RET
+    60 0000008F                                 L18:
+    61 0000008F C7 40 08 00000001               	MOV	DWORD [8+EAX],1
+    62 00000096 EB F5                           	JMP	L9
+    63 00000098                                 	GLOBAL	_timer_free
+    64 00000098                                 _timer_free:
+    65 00000098 55                              	PUSH	EBP
+    66 00000099 89 E5                           	MOV	EBP,ESP
+    67 0000009B 8B 45 08                        	MOV	EAX,DWORD [8+EBP]
+    68 0000009E C7 40 08 00000000               	MOV	DWORD [8+EAX],0
+    69 000000A5 5D                              	POP	EBP
+    70 000000A6 C3                              	RET
+    71 000000A7                                 	GLOBAL	_timer_init
+    72 000000A7                                 _timer_init:
+    73 000000A7 55                              	PUSH	EBP
+    74 000000A8 89 E5                           	MOV	EBP,ESP
+    75 000000AA 8B 45 08                        	MOV	EAX,DWORD [8+EBP]
+    76 000000AD 8B 55 0C                        	MOV	EDX,DWORD [12+EBP]
+    77 000000B0 89 50 0C                        	MOV	DWORD [12+EAX],EDX
+    78 000000B3 8B 55 10                        	MOV	EDX,DWORD [16+EBP]
+    79 000000B6 89 50 10                        	MOV	DWORD [16+EAX],EDX
+    80 000000B9 5D                              	POP	EBP
+    81 000000BA C3                              	RET
+    82 000000BB                                 	GLOBAL	_timer_settime
+    83 000000BB                                 _timer_settime:
+    84 000000BB 55                              	PUSH	EBP
+    85 000000BC A1 [00000000]                   	MOV	EAX,DWORD [_timerctl]
+    86 000000C1 89 E5                           	MOV	EBP,ESP
+    87 000000C3 56                              	PUSH	ESI
+    88 000000C4 53                              	PUSH	EBX
+    89 000000C5 8B 5D 08                        	MOV	EBX,DWORD [8+EBP]
+    90 000000C8 03 45 0C                        	ADD	EAX,DWORD [12+EBP]
+    91 000000CB C7 43 08 00000002               	MOV	DWORD [8+EBX],2
+    92 000000D2 89 43 04                        	MOV	DWORD [4+EBX],EAX
+    93 000000D5 E8 [00000000]                   	CALL	_io_load_eflags
+    94 000000DA 89 C6                           	MOV	ESI,EAX
+    95 000000DC E8 [00000000]                   	CALL	_io_cli
+    96 000000E1 A1 [00000008]                   	MOV	EAX,DWORD [_timerctl+8]
+    97 000000E6 8B 53 04                        	MOV	EDX,DWORD [4+EBX]
+    98 000000E9 3B 50 04                        	CMP	EDX,DWORD [4+EAX]
+    99 000000EC 76 20                           	JBE	L29
+   100 000000EE                                 L23:
+   101 000000EE 89 C1                           	MOV	ECX,EAX
+   102 000000F0 8B 00                           	MOV	EAX,DWORD [EAX]
+   103 000000F2 85 C0                           	TEST	EAX,EAX
+   104 000000F4 74 14                           	JE	L21
+   105 000000F6 3B 50 04                        	CMP	EDX,DWORD [4+EAX]
+   106 000000F9 77 F3                           	JA	L23
+   107 000000FB 89 19                           	MOV	DWORD [ECX],EBX
+   108 000000FD 89 03                           	MOV	DWORD [EBX],EAX
+   109 000000FF                                 L28:
+   110 000000FF 89 75 08                        	MOV	DWORD [8+EBP],ESI
+   111 00000102 5B                              	POP	EBX
+   112 00000103 5E                              	POP	ESI
+   113 00000104 5D                              	POP	EBP
+   114 00000105 E9 [00000000]                   	JMP	_io_store_eflags
+   115 0000010A                                 L21:
+   116 0000010A 5B                              	POP	EBX
+   117 0000010B 5E                              	POP	ESI
+   118 0000010C 5D                              	POP	EBP
+   119 0000010D C3                              	RET
+   120 0000010E                                 L29:
+   121 0000010E 89 1D [00000008]                	MOV	DWORD [_timerctl+8],EBX
+   122 00000114 89 15 [00000004]                	MOV	DWORD [_timerctl+4],EDX
+   123 0000011A 89 03                           	MOV	DWORD [EBX],EAX
+   124 0000011C EB E1                           	JMP	L28
+   125 0000011E                                 	GLOBAL	_inthandler20
+   126 0000011E                                 _inthandler20:
+   127 0000011E 55                              	PUSH	EBP
+   128 0000011F 89 E5                           	MOV	EBP,ESP
+   129 00000121 53                              	PUSH	EBX
+   130 00000122 6A 60                           	PUSH	96
+   131 00000124 6A 20                           	PUSH	32
+   132 00000126 E8 [00000000]                   	CALL	_io_out8
+   133 0000012B 59                              	POP	ECX
+   134 0000012C A1 [00000000]                   	MOV	EAX,DWORD [_timerctl]
+   135 00000131 5B                              	POP	EBX
+   136 00000132 40                              	INC	EAX
+   137 00000133 A3 [00000000]                   	MOV	DWORD [_timerctl],EAX
+   138 00000138 39 05 [00000004]                	CMP	DWORD [_timerctl+4],EAX
+   139 0000013E 77 34                           	JA	L30
+   140 00000140 8B 1D [00000008]                	MOV	EBX,DWORD [_timerctl+8]
+   141 00000146                                 L32:
+   142 00000146 8B 43 04                        	MOV	EAX,DWORD [4+EBX]
+   143 00000149 3B 05 [00000000]                	CMP	EAX,DWORD [_timerctl]
+   144 0000014F 77 18                           	JA	L33
+   145 00000151 C7 43 08 00000001               	MOV	DWORD [8+EBX],1
+   146 00000158 FF 73 10                        	PUSH	DWORD [16+EBX]
+   147 0000015B FF 73 0C                        	PUSH	DWORD [12+EBX]
+   148 0000015E E8 [00000000]                   	CALL	_fifo32_put
+   149 00000163 58                              	POP	EAX
+   150 00000164 8B 1B                           	MOV	EBX,DWORD [EBX]
+   151 00000166 5A                              	POP	EDX
+   152 00000167 EB DD                           	JMP	L32
+   153 00000169                                 L33:
+   154 00000169 89 1D [00000008]                	MOV	DWORD [_timerctl+8],EBX
+   155 0000016F A3 [00000004]                   	MOV	DWORD [_timerctl+4],EAX
+   156 00000174                                 L30:
+   157 00000174 8B 5D FC                        	MOV	EBX,DWORD [-4+EBP]
+   158 00000177 C9                              	LEAVE
+   159 00000178 C3                              	RET
+   160 00000179                                 	GLOBAL	_timerctl
+   161                                          [SECTION .data]
+   162 00000000                                 	ALIGNB	16
+   163 00000000                                 _timerctl:
+   164 00000000 00 00 00 00 00 00 00 00 00 00   	RESB	10012
        0000000A 00 00 00 00 00 00 00 00 00 00 
        00000014 00 00 00 00 00 00 00 00 00 00 
        0000001E 00 00 00 00 00 00 00 00 00 00 
diff --git a/fyt/timer.obj b/fyt/timer.obj
index f62496c..9cfc697 100644
Binary files a/fyt/timer.obj and b/fyt/timer.obj differ
warning: LF will be replaced by CRLF in fyt/timer.lst.
The file will have its original line endings in your working directory.